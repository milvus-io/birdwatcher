// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.21.4
// source: data_coord.proto

package datapb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	commonpb "github.com/milvus-io/birdwatcher/proto/v2.2/commonpb"
	indexpb "github.com/milvus-io/birdwatcher/proto/v2.2/indexpb"
	internalpb "github.com/milvus-io/birdwatcher/proto/v2.2/internalpb"
	milvuspb "github.com/milvus-io/birdwatcher/proto/v2.2/milvuspb"
	msgpb "github.com/milvus-io/birdwatcher/proto/v2.2/msgpb"
	schemapb "github.com/milvus-io/birdwatcher/proto/v2.2/schemapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SegmentType int32

const (
	SegmentType_New       SegmentType = 0
	SegmentType_Normal    SegmentType = 1
	SegmentType_Flushed   SegmentType = 2
	SegmentType_Compacted SegmentType = 3
)

// Enum value maps for SegmentType.
var (
	SegmentType_name = map[int32]string{
		0: "New",
		1: "Normal",
		2: "Flushed",
		3: "Compacted",
	}
	SegmentType_value = map[string]int32{
		"New":       0,
		"Normal":    1,
		"Flushed":   2,
		"Compacted": 3,
	}
)

func (x SegmentType) Enum() *SegmentType {
	p := new(SegmentType)
	*p = x
	return p
}

func (x SegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[0].Descriptor()
}

func (SegmentType) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[0]
}

func (x SegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentType.Descriptor instead.
func (SegmentType) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{0}
}

type SegmentLevel int32

const (
	SegmentLevel_Legacy SegmentLevel = 0 // zero value for legacy logic
	SegmentLevel_L0     SegmentLevel = 1 // L0 segment, contains delta data for current channel
	SegmentLevel_L1     SegmentLevel = 2 // L1 segment, normal segment, with no extra compaction attribute
	SegmentLevel_L2     SegmentLevel = 3 // L2 segment, segment with extra data distribution info
)

// Enum value maps for SegmentLevel.
var (
	SegmentLevel_name = map[int32]string{
		0: "Legacy",
		1: "L0",
		2: "L1",
		3: "L2",
	}
	SegmentLevel_value = map[string]int32{
		"Legacy": 0,
		"L0":     1,
		"L1":     2,
		"L2":     3,
	}
)

func (x SegmentLevel) Enum() *SegmentLevel {
	p := new(SegmentLevel)
	*p = x
	return p
}

func (x SegmentLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[1].Descriptor()
}

func (SegmentLevel) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[1]
}

func (x SegmentLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentLevel.Descriptor instead.
func (SegmentLevel) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{1}
}

type ChannelWatchState int32

const (
	ChannelWatchState_Uncomplete     ChannelWatchState = 0 // deprecated, keep it for compatibility
	ChannelWatchState_Complete       ChannelWatchState = 1 // deprecated, keep it for compatibility
	ChannelWatchState_ToWatch        ChannelWatchState = 2
	ChannelWatchState_WatchSuccess   ChannelWatchState = 3
	ChannelWatchState_WatchFailure   ChannelWatchState = 4
	ChannelWatchState_ToRelease      ChannelWatchState = 5
	ChannelWatchState_ReleaseSuccess ChannelWatchState = 6
	ChannelWatchState_ReleaseFailure ChannelWatchState = 7
)

// Enum value maps for ChannelWatchState.
var (
	ChannelWatchState_name = map[int32]string{
		0: "Uncomplete",
		1: "Complete",
		2: "ToWatch",
		3: "WatchSuccess",
		4: "WatchFailure",
		5: "ToRelease",
		6: "ReleaseSuccess",
		7: "ReleaseFailure",
	}
	ChannelWatchState_value = map[string]int32{
		"Uncomplete":     0,
		"Complete":       1,
		"ToWatch":        2,
		"WatchSuccess":   3,
		"WatchFailure":   4,
		"ToRelease":      5,
		"ReleaseSuccess": 6,
		"ReleaseFailure": 7,
	}
)

func (x ChannelWatchState) Enum() *ChannelWatchState {
	p := new(ChannelWatchState)
	*p = x
	return p
}

func (x ChannelWatchState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelWatchState) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[2].Descriptor()
}

func (ChannelWatchState) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[2]
}

func (x ChannelWatchState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelWatchState.Descriptor instead.
func (ChannelWatchState) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{2}
}

type CompactionType int32

const (
	CompactionType_UndefinedCompaction CompactionType = 0
	CompactionType_MergeCompaction     CompactionType = 2
	CompactionType_MixCompaction       CompactionType = 3
	// compactionV2
	CompactionType_SingleCompaction       CompactionType = 4
	CompactionType_MinorCompaction        CompactionType = 5
	CompactionType_MajorCompaction        CompactionType = 6
	CompactionType_Level0DeleteCompaction CompactionType = 7
	CompactionType_ClusteringCompaction   CompactionType = 8
)

// Enum value maps for CompactionType.
var (
	CompactionType_name = map[int32]string{
		0: "UndefinedCompaction",
		2: "MergeCompaction",
		3: "MixCompaction",
		4: "SingleCompaction",
		5: "MinorCompaction",
		6: "MajorCompaction",
		7: "Level0DeleteCompaction",
		8: "ClusteringCompaction",
	}
	CompactionType_value = map[string]int32{
		"UndefinedCompaction":    0,
		"MergeCompaction":        2,
		"MixCompaction":          3,
		"SingleCompaction":       4,
		"MinorCompaction":        5,
		"MajorCompaction":        6,
		"Level0DeleteCompaction": 7,
		"ClusteringCompaction":   8,
	}
)

func (x CompactionType) Enum() *CompactionType {
	p := new(CompactionType)
	*p = x
	return p
}

func (x CompactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[3].Descriptor()
}

func (CompactionType) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[3]
}

func (x CompactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompactionType.Descriptor instead.
func (CompactionType) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{3}
}

type ImportTaskStateV2 int32

const (
	ImportTaskStateV2_None       ImportTaskStateV2 = 0
	ImportTaskStateV2_Pending    ImportTaskStateV2 = 1
	ImportTaskStateV2_InProgress ImportTaskStateV2 = 2
	ImportTaskStateV2_Failed     ImportTaskStateV2 = 3
	ImportTaskStateV2_Completed  ImportTaskStateV2 = 4
)

// Enum value maps for ImportTaskStateV2.
var (
	ImportTaskStateV2_name = map[int32]string{
		0: "None",
		1: "Pending",
		2: "InProgress",
		3: "Failed",
		4: "Completed",
	}
	ImportTaskStateV2_value = map[string]int32{
		"None":       0,
		"Pending":    1,
		"InProgress": 2,
		"Failed":     3,
		"Completed":  4,
	}
)

func (x ImportTaskStateV2) Enum() *ImportTaskStateV2 {
	p := new(ImportTaskStateV2)
	*p = x
	return p
}

func (x ImportTaskStateV2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportTaskStateV2) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[4].Descriptor()
}

func (ImportTaskStateV2) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[4]
}

func (x ImportTaskStateV2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportTaskStateV2.Descriptor instead.
func (ImportTaskStateV2) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{4}
}

type GcCommand int32

const (
	GcCommand__      GcCommand = 0
	GcCommand_Pause  GcCommand = 1
	GcCommand_Resume GcCommand = 2
)

// Enum value maps for GcCommand.
var (
	GcCommand_name = map[int32]string{
		0: "_",
		1: "Pause",
		2: "Resume",
	}
	GcCommand_value = map[string]int32{
		"_":      0,
		"Pause":  1,
		"Resume": 2,
	}
)

func (x GcCommand) Enum() *GcCommand {
	p := new(GcCommand)
	*p = x
	return p
}

func (x GcCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[5].Descriptor()
}

func (GcCommand) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[5]
}

func (x GcCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcCommand.Descriptor instead.
func (GcCommand) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{5}
}

type CompactionTaskState int32

const (
	CompactionTaskState_unknown    CompactionTaskState = 0
	CompactionTaskState_executing  CompactionTaskState = 1
	CompactionTaskState_pipelining CompactionTaskState = 2
	CompactionTaskState_completed  CompactionTaskState = 3
	CompactionTaskState_failed     CompactionTaskState = 4
	CompactionTaskState_timeout    CompactionTaskState = 5
	CompactionTaskState_analyzing  CompactionTaskState = 6
	CompactionTaskState_indexing   CompactionTaskState = 7
	CompactionTaskState_cleaned    CompactionTaskState = 8
	CompactionTaskState_meta_saved CompactionTaskState = 9
)

// Enum value maps for CompactionTaskState.
var (
	CompactionTaskState_name = map[int32]string{
		0: "unknown",
		1: "executing",
		2: "pipelining",
		3: "completed",
		4: "failed",
		5: "timeout",
		6: "analyzing",
		7: "indexing",
		8: "cleaned",
		9: "meta_saved",
	}
	CompactionTaskState_value = map[string]int32{
		"unknown":    0,
		"executing":  1,
		"pipelining": 2,
		"completed":  3,
		"failed":     4,
		"timeout":    5,
		"analyzing":  6,
		"indexing":   7,
		"cleaned":    8,
		"meta_saved": 9,
	}
)

func (x CompactionTaskState) Enum() *CompactionTaskState {
	p := new(CompactionTaskState)
	*p = x
	return p
}

func (x CompactionTaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompactionTaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_data_coord_proto_enumTypes[6].Descriptor()
}

func (CompactionTaskState) Type() protoreflect.EnumType {
	return &file_data_coord_proto_enumTypes[6]
}

func (x CompactionTaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompactionTaskState.Descriptor instead.
func (CompactionTaskState) EnumDescriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{6}
}

// TODO: import google/protobuf/empty.proto
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{0}
}

type FlushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	SegmentIDs   []int64           `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	CollectionID int64             `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	IsImport     bool              `protobuf:"varint,5,opt,name=isImport,proto3" json:"isImport,omitempty"` // deprecated
}

func (x *FlushRequest) Reset() {
	*x = FlushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushRequest) ProtoMessage() {}

func (x *FlushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushRequest.ProtoReflect.Descriptor instead.
func (*FlushRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{1}
}

func (x *FlushRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FlushRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *FlushRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *FlushRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *FlushRequest) GetIsImport() bool {
	if x != nil {
		return x.IsImport
	}
	return false
}

type FlushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status          *commonpb.Status              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DbID            int64                         `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID    int64                         `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SegmentIDs      []int64                       `protobuf:"varint,4,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`           // newly sealed segments
	FlushSegmentIDs []int64                       `protobuf:"varint,5,rep,packed,name=flushSegmentIDs,proto3" json:"flushSegmentIDs,omitempty"` // old flushed segment
	TimeOfSeal      int64                         `protobuf:"varint,6,opt,name=timeOfSeal,proto3" json:"timeOfSeal,omitempty"`
	FlushTs         uint64                        `protobuf:"varint,7,opt,name=flush_ts,json=flushTs,proto3" json:"flush_ts,omitempty"`
	ChannelCps      map[string]*msgpb.MsgPosition `protobuf:"bytes,8,rep,name=channel_cps,json=channelCps,proto3" json:"channel_cps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FlushResponse) Reset() {
	*x = FlushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushResponse) ProtoMessage() {}

func (x *FlushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushResponse.ProtoReflect.Descriptor instead.
func (*FlushResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{2}
}

func (x *FlushResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FlushResponse) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *FlushResponse) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *FlushResponse) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *FlushResponse) GetFlushSegmentIDs() []int64 {
	if x != nil {
		return x.FlushSegmentIDs
	}
	return nil
}

func (x *FlushResponse) GetTimeOfSeal() int64 {
	if x != nil {
		return x.TimeOfSeal
	}
	return 0
}

func (x *FlushResponse) GetFlushTs() uint64 {
	if x != nil {
		return x.FlushTs
	}
	return 0
}

func (x *FlushResponse) GetChannelCps() map[string]*msgpb.MsgPosition {
	if x != nil {
		return x.ChannelCps
	}
	return nil
}

type FlushChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	FlushTs  uint64            `protobuf:"varint,2,opt,name=flush_ts,json=flushTs,proto3" json:"flush_ts,omitempty"`
	Channels []string          `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *FlushChannelsRequest) Reset() {
	*x = FlushChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushChannelsRequest) ProtoMessage() {}

func (x *FlushChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushChannelsRequest.ProtoReflect.Descriptor instead.
func (*FlushChannelsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{3}
}

func (x *FlushChannelsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FlushChannelsRequest) GetFlushTs() uint64 {
	if x != nil {
		return x.FlushTs
	}
	return 0
}

func (x *FlushChannelsRequest) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type SegmentIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        uint32       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ChannelName  string       `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	CollectionID int64        `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID  int64        `protobuf:"varint,4,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IsImport     bool         `protobuf:"varint,5,opt,name=isImport,proto3" json:"isImport,omitempty"`         // deprecated
	ImportTaskID int64        `protobuf:"varint,6,opt,name=importTaskID,proto3" json:"importTaskID,omitempty"` // deprecated
	Level        SegmentLevel `protobuf:"varint,7,opt,name=level,proto3,enum=milvus.protov2.data.SegmentLevel" json:"level,omitempty"`
}

func (x *SegmentIDRequest) Reset() {
	*x = SegmentIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentIDRequest) ProtoMessage() {}

func (x *SegmentIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentIDRequest.ProtoReflect.Descriptor instead.
func (*SegmentIDRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{4}
}

func (x *SegmentIDRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SegmentIDRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *SegmentIDRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SegmentIDRequest) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SegmentIDRequest) GetIsImport() bool {
	if x != nil {
		return x.IsImport
	}
	return false
}

func (x *SegmentIDRequest) GetImportTaskID() int64 {
	if x != nil {
		return x.ImportTaskID
	}
	return 0
}

func (x *SegmentIDRequest) GetLevel() SegmentLevel {
	if x != nil {
		return x.Level
	}
	return SegmentLevel_Legacy
}

type AssignSegmentIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID            int64               `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	PeerRole          string              `protobuf:"bytes,2,opt,name=peer_role,json=peerRole,proto3" json:"peer_role,omitempty"`
	SegmentIDRequests []*SegmentIDRequest `protobuf:"bytes,3,rep,name=segmentIDRequests,proto3" json:"segmentIDRequests,omitempty"`
}

func (x *AssignSegmentIDRequest) Reset() {
	*x = AssignSegmentIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignSegmentIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignSegmentIDRequest) ProtoMessage() {}

func (x *AssignSegmentIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignSegmentIDRequest.ProtoReflect.Descriptor instead.
func (*AssignSegmentIDRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{5}
}

func (x *AssignSegmentIDRequest) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *AssignSegmentIDRequest) GetPeerRole() string {
	if x != nil {
		return x.PeerRole
	}
	return ""
}

func (x *AssignSegmentIDRequest) GetSegmentIDRequests() []*SegmentIDRequest {
	if x != nil {
		return x.SegmentIDRequests
	}
	return nil
}

type SegmentIDAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegID        int64            `protobuf:"varint,1,opt,name=segID,proto3" json:"segID,omitempty"`
	ChannelName  string           `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Count        uint32           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	CollectionID int64            `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID  int64            `protobuf:"varint,5,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	ExpireTime   uint64           `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Status       *commonpb.Status `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SegmentIDAssignment) Reset() {
	*x = SegmentIDAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentIDAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentIDAssignment) ProtoMessage() {}

func (x *SegmentIDAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentIDAssignment.ProtoReflect.Descriptor instead.
func (*SegmentIDAssignment) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{6}
}

func (x *SegmentIDAssignment) GetSegID() int64 {
	if x != nil {
		return x.SegID
	}
	return 0
}

func (x *SegmentIDAssignment) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *SegmentIDAssignment) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SegmentIDAssignment) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SegmentIDAssignment) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SegmentIDAssignment) GetExpireTime() uint64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *SegmentIDAssignment) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AssignSegmentIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegIDAssignments []*SegmentIDAssignment `protobuf:"bytes,1,rep,name=segIDAssignments,proto3" json:"segIDAssignments,omitempty"`
	Status           *commonpb.Status       `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssignSegmentIDResponse) Reset() {
	*x = AssignSegmentIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignSegmentIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignSegmentIDResponse) ProtoMessage() {}

func (x *AssignSegmentIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignSegmentIDResponse.ProtoReflect.Descriptor instead.
func (*AssignSegmentIDResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{7}
}

func (x *AssignSegmentIDResponse) GetSegIDAssignments() []*SegmentIDAssignment {
	if x != nil {
		return x.SegIDAssignments
	}
	return nil
}

func (x *AssignSegmentIDResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSegmentStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIDs []int64           `protobuf:"varint,2,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
}

func (x *GetSegmentStatesRequest) Reset() {
	*x = GetSegmentStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentStatesRequest) ProtoMessage() {}

func (x *GetSegmentStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentStatesRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentStatesRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{8}
}

func (x *GetSegmentStatesRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetSegmentStatesRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

type SegmentStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID     int64                 `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	State         commonpb.SegmentState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.protov2.common.SegmentState" json:"state,omitempty"`
	StartPosition *msgpb.MsgPosition    `protobuf:"bytes,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *msgpb.MsgPosition    `protobuf:"bytes,4,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	Status        *commonpb.Status      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SegmentStateInfo) Reset() {
	*x = SegmentStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentStateInfo) ProtoMessage() {}

func (x *SegmentStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentStateInfo.ProtoReflect.Descriptor instead.
func (*SegmentStateInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{9}
}

func (x *SegmentStateInfo) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SegmentStateInfo) GetState() commonpb.SegmentState {
	if x != nil {
		return x.State
	}
	return commonpb.SegmentState_SegmentStateNone
}

func (x *SegmentStateInfo) GetStartPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SegmentStateInfo) GetEndPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

func (x *SegmentStateInfo) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSegmentStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	States []*SegmentStateInfo `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *GetSegmentStatesResponse) Reset() {
	*x = GetSegmentStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentStatesResponse) ProtoMessage() {}

func (x *GetSegmentStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentStatesResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentStatesResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{10}
}

func (x *GetSegmentStatesResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentStatesResponse) GetStates() []*SegmentStateInfo {
	if x != nil {
		return x.States
	}
	return nil
}

type GetSegmentInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIDs       []int64           `protobuf:"varint,2,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	IncludeUnHealthy bool              `protobuf:"varint,3,opt,name=includeUnHealthy,proto3" json:"includeUnHealthy,omitempty"`
}

func (x *GetSegmentInfoRequest) Reset() {
	*x = GetSegmentInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentInfoRequest) ProtoMessage() {}

func (x *GetSegmentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentInfoRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{11}
}

func (x *GetSegmentInfoRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetSegmentInfoRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *GetSegmentInfoRequest) GetIncludeUnHealthy() bool {
	if x != nil {
		return x.IncludeUnHealthy
	}
	return false
}

type GetSegmentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *commonpb.Status              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Infos             []*SegmentInfo                `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos,omitempty"`
	ChannelCheckpoint map[string]*msgpb.MsgPosition `protobuf:"bytes,3,rep,name=channel_checkpoint,json=channelCheckpoint,proto3" json:"channel_checkpoint,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSegmentInfoResponse) Reset() {
	*x = GetSegmentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentInfoResponse) ProtoMessage() {}

func (x *GetSegmentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentInfoResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{12}
}

func (x *GetSegmentInfoResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentInfoResponse) GetInfos() []*SegmentInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetSegmentInfoResponse) GetChannelCheckpoint() map[string]*msgpb.MsgPosition {
	if x != nil {
		return x.ChannelCheckpoint
	}
	return nil
}

type GetInsertBinlogPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentID int64             `protobuf:"varint,2,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
}

func (x *GetInsertBinlogPathsRequest) Reset() {
	*x = GetInsertBinlogPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInsertBinlogPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInsertBinlogPathsRequest) ProtoMessage() {}

func (x *GetInsertBinlogPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInsertBinlogPathsRequest.ProtoReflect.Descriptor instead.
func (*GetInsertBinlogPathsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{13}
}

func (x *GetInsertBinlogPathsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetInsertBinlogPathsRequest) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

type GetInsertBinlogPathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldIDs []int64                  `protobuf:"varint,1,rep,packed,name=fieldIDs,proto3" json:"fieldIDs,omitempty"`
	Paths    []*internalpb.StringList `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	Status   *commonpb.Status         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetInsertBinlogPathsResponse) Reset() {
	*x = GetInsertBinlogPathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInsertBinlogPathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInsertBinlogPathsResponse) ProtoMessage() {}

func (x *GetInsertBinlogPathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInsertBinlogPathsResponse.ProtoReflect.Descriptor instead.
func (*GetInsertBinlogPathsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{14}
}

func (x *GetInsertBinlogPathsResponse) GetFieldIDs() []int64 {
	if x != nil {
		return x.FieldIDs
	}
	return nil
}

func (x *GetInsertBinlogPathsResponse) GetPaths() []*internalpb.StringList {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *GetInsertBinlogPathsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetCollectionStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
}

func (x *GetCollectionStatisticsRequest) Reset() {
	*x = GetCollectionStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionStatisticsRequest) ProtoMessage() {}

func (x *GetCollectionStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{15}
}

func (x *GetCollectionStatisticsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetCollectionStatisticsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *GetCollectionStatisticsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

type GetCollectionStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats  []*commonpb.KeyValuePair `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	Status *commonpb.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetCollectionStatisticsResponse) Reset() {
	*x = GetCollectionStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionStatisticsResponse) ProtoMessage() {}

func (x *GetCollectionStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{16}
}

func (x *GetCollectionStatisticsResponse) GetStats() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetCollectionStatisticsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetPartitionStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64           `protobuf:"varint,4,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
}

func (x *GetPartitionStatisticsRequest) Reset() {
	*x = GetPartitionStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatisticsRequest) ProtoMessage() {}

func (x *GetPartitionStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetPartitionStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{17}
}

func (x *GetPartitionStatisticsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetPartitionStatisticsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *GetPartitionStatisticsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetPartitionStatisticsRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

type GetPartitionStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats  []*commonpb.KeyValuePair `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	Status *commonpb.Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetPartitionStatisticsResponse) Reset() {
	*x = GetPartitionStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartitionStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartitionStatisticsResponse) ProtoMessage() {}

func (x *GetPartitionStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartitionStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetPartitionStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{18}
}

func (x *GetPartitionStatisticsResponse) GetStats() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetPartitionStatisticsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetSegmentInfoChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSegmentInfoChannelRequest) Reset() {
	*x = GetSegmentInfoChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentInfoChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentInfoChannelRequest) ProtoMessage() {}

func (x *GetSegmentInfoChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentInfoChannelRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentInfoChannelRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{19}
}

type VchannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID           int64              `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	ChannelName            string             `protobuf:"bytes,2,opt,name=channelName,proto3" json:"channelName,omitempty"`
	SeekPosition           *msgpb.MsgPosition `protobuf:"bytes,3,opt,name=seek_position,json=seekPosition,proto3" json:"seek_position,omitempty"`
	UnflushedSegments      []*SegmentInfo     `protobuf:"bytes,4,rep,name=unflushedSegments,proto3" json:"unflushedSegments,omitempty"`                    // deprecated, keep it for compatibility
	FlushedSegments        []*SegmentInfo     `protobuf:"bytes,5,rep,name=flushedSegments,proto3" json:"flushedSegments,omitempty"`                        // deprecated, keep it for compatibility
	DroppedSegments        []*SegmentInfo     `protobuf:"bytes,6,rep,name=dropped_segments,json=droppedSegments,proto3" json:"dropped_segments,omitempty"` // deprecated, keep it for compatibility
	UnflushedSegmentIds    []int64            `protobuf:"varint,7,rep,packed,name=unflushedSegmentIds,proto3" json:"unflushedSegmentIds,omitempty"`
	FlushedSegmentIds      []int64            `protobuf:"varint,8,rep,packed,name=flushedSegmentIds,proto3" json:"flushedSegmentIds,omitempty"`
	DroppedSegmentIds      []int64            `protobuf:"varint,9,rep,packed,name=dropped_segmentIds,json=droppedSegmentIds,proto3" json:"dropped_segmentIds,omitempty"`
	IndexedSegmentIds      []int64            `protobuf:"varint,10,rep,packed,name=indexed_segmentIds,json=indexedSegmentIds,proto3" json:"indexed_segmentIds,omitempty"`
	IndexedSegments        []*SegmentInfo     `protobuf:"bytes,11,rep,name=indexed_segments,json=indexedSegments,proto3" json:"indexed_segments,omitempty"`
	LevelZeroSegmentIds    []int64            `protobuf:"varint,12,rep,packed,name=level_zero_segment_ids,json=levelZeroSegmentIds,proto3" json:"level_zero_segment_ids,omitempty"`
	PartitionStatsVersions map[int64]int64    `protobuf:"bytes,13,rep,name=partition_stats_versions,json=partitionStatsVersions,proto3" json:"partition_stats_versions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *VchannelInfo) Reset() {
	*x = VchannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VchannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VchannelInfo) ProtoMessage() {}

func (x *VchannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VchannelInfo.ProtoReflect.Descriptor instead.
func (*VchannelInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{20}
}

func (x *VchannelInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *VchannelInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *VchannelInfo) GetSeekPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.SeekPosition
	}
	return nil
}

func (x *VchannelInfo) GetUnflushedSegments() []*SegmentInfo {
	if x != nil {
		return x.UnflushedSegments
	}
	return nil
}

func (x *VchannelInfo) GetFlushedSegments() []*SegmentInfo {
	if x != nil {
		return x.FlushedSegments
	}
	return nil
}

func (x *VchannelInfo) GetDroppedSegments() []*SegmentInfo {
	if x != nil {
		return x.DroppedSegments
	}
	return nil
}

func (x *VchannelInfo) GetUnflushedSegmentIds() []int64 {
	if x != nil {
		return x.UnflushedSegmentIds
	}
	return nil
}

func (x *VchannelInfo) GetFlushedSegmentIds() []int64 {
	if x != nil {
		return x.FlushedSegmentIds
	}
	return nil
}

func (x *VchannelInfo) GetDroppedSegmentIds() []int64 {
	if x != nil {
		return x.DroppedSegmentIds
	}
	return nil
}

func (x *VchannelInfo) GetIndexedSegmentIds() []int64 {
	if x != nil {
		return x.IndexedSegmentIds
	}
	return nil
}

func (x *VchannelInfo) GetIndexedSegments() []*SegmentInfo {
	if x != nil {
		return x.IndexedSegments
	}
	return nil
}

func (x *VchannelInfo) GetLevelZeroSegmentIds() []int64 {
	if x != nil {
		return x.LevelZeroSegmentIds
	}
	return nil
}

func (x *VchannelInfo) GetPartitionStatsVersions() map[int64]int64 {
	if x != nil {
		return x.PartitionStatsVersions
	}
	return nil
}

type WatchDmChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Vchannels []*VchannelInfo   `protobuf:"bytes,2,rep,name=vchannels,proto3" json:"vchannels,omitempty"`
}

func (x *WatchDmChannelsRequest) Reset() {
	*x = WatchDmChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchDmChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchDmChannelsRequest) ProtoMessage() {}

func (x *WatchDmChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchDmChannelsRequest.ProtoReflect.Descriptor instead.
func (*WatchDmChannelsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{21}
}

func (x *WatchDmChannelsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WatchDmChannelsRequest) GetVchannels() []*VchannelInfo {
	if x != nil {
		return x.Vchannels
	}
	return nil
}

type FlushSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DbID         int64             `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SegmentIDs   []int64           `protobuf:"varint,4,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"` // segments to flush
	ChannelName  string            `protobuf:"bytes,5,opt,name=channelName,proto3" json:"channelName,omitempty"`       // vchannel name to flush
}

func (x *FlushSegmentsRequest) Reset() {
	*x = FlushSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSegmentsRequest) ProtoMessage() {}

func (x *FlushSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSegmentsRequest.ProtoReflect.Descriptor instead.
func (*FlushSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{22}
}

func (x *FlushSegmentsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FlushSegmentsRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *FlushSegmentsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *FlushSegmentsRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *FlushSegmentsRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type SegmentMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Segment *SegmentInfo      `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SegmentMsg) Reset() {
	*x = SegmentMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentMsg) ProtoMessage() {}

func (x *SegmentMsg) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentMsg.ProtoReflect.Descriptor instead.
func (*SegmentMsg) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{23}
}

func (x *SegmentMsg) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SegmentMsg) GetSegment() *SegmentInfo {
	if x != nil {
		return x.Segment
	}
	return nil
}

type TextIndexStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldID    int64    `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	Version    int64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Files      []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	LogSize    int64    `protobuf:"varint,4,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	MemorySize int64    `protobuf:"varint,5,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	BuildID    int64    `protobuf:"varint,6,opt,name=buildID,proto3" json:"buildID,omitempty"`
}

func (x *TextIndexStats) Reset() {
	*x = TextIndexStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextIndexStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextIndexStats) ProtoMessage() {}

func (x *TextIndexStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextIndexStats.ProtoReflect.Descriptor instead.
func (*TextIndexStats) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{24}
}

func (x *TextIndexStats) GetFieldID() int64 {
	if x != nil {
		return x.FieldID
	}
	return 0
}

func (x *TextIndexStats) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TextIndexStats) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *TextIndexStats) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *TextIndexStats) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *TextIndexStats) GetBuildID() int64 {
	if x != nil {
		return x.BuildID
	}
	return 0
}

type JsonKeyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldID    int64    `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	Version    int64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Files      []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	LogSize    int64    `protobuf:"varint,4,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	MemorySize int64    `protobuf:"varint,5,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	BuildID    int64    `protobuf:"varint,6,opt,name=buildID,proto3" json:"buildID,omitempty"`
}

func (x *JsonKeyStats) Reset() {
	*x = JsonKeyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonKeyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonKeyStats) ProtoMessage() {}

func (x *JsonKeyStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonKeyStats.ProtoReflect.Descriptor instead.
func (*JsonKeyStats) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{25}
}

func (x *JsonKeyStats) GetFieldID() int64 {
	if x != nil {
		return x.FieldID
	}
	return 0
}

func (x *JsonKeyStats) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *JsonKeyStats) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *JsonKeyStats) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *JsonKeyStats) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *JsonKeyStats) GetBuildID() int64 {
	if x != nil {
		return x.BuildID
	}
	return 0
}

type SegmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int64                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CollectionID   int64                 `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID    int64                 `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	InsertChannel  string                `protobuf:"bytes,4,opt,name=insert_channel,json=insertChannel,proto3" json:"insert_channel,omitempty"`
	NumOfRows      int64                 `protobuf:"varint,5,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	State          commonpb.SegmentState `protobuf:"varint,6,opt,name=state,proto3,enum=milvus.protov2.common.SegmentState" json:"state,omitempty"`
	MaxRowNum      int64                 `protobuf:"varint,7,opt,name=max_row_num,json=maxRowNum,proto3" json:"max_row_num,omitempty"`
	LastExpireTime uint64                `protobuf:"varint,8,opt,name=last_expire_time,json=lastExpireTime,proto3" json:"last_expire_time,omitempty"`
	StartPosition  *msgpb.MsgPosition    `protobuf:"bytes,9,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	DmlPosition    *msgpb.MsgPosition    `protobuf:"bytes,10,opt,name=dml_position,json=dmlPosition,proto3" json:"dml_position,omitempty"`
	// binlogs consist of insert binlogs
	Binlogs   []*FieldBinlog `protobuf:"bytes,11,rep,name=binlogs,proto3" json:"binlogs,omitempty"`
	Statslogs []*FieldBinlog `protobuf:"bytes,12,rep,name=statslogs,proto3" json:"statslogs,omitempty"`
	// deltalogs consists of delete binlogs. FieldID is not used yet since delete is always applied on primary key
	Deltalogs           []*FieldBinlog `protobuf:"bytes,13,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	CreatedByCompaction bool           `protobuf:"varint,14,opt,name=createdByCompaction,proto3" json:"createdByCompaction,omitempty"`
	CompactionFrom      []int64        `protobuf:"varint,15,rep,packed,name=compactionFrom,proto3" json:"compactionFrom,omitempty"`
	DroppedAt           uint64         `protobuf:"varint,16,opt,name=dropped_at,json=droppedAt,proto3" json:"dropped_at,omitempty"` // timestamp when segment marked drop
	// A flag indicating if:
	// (1) this segment is created by bulk insert, and
	// (2) the bulk insert task that creates this segment has not yet reached `ImportCompleted` state.
	IsImporting bool `protobuf:"varint,17,opt,name=is_importing,json=isImporting,proto3" json:"is_importing,omitempty"`
	IsFake      bool `protobuf:"varint,18,opt,name=is_fake,json=isFake,proto3" json:"is_fake,omitempty"`
	// denote if this segment is compacted to other segment.
	// For compatibility reasons, this flag of an old compacted segment may still be False.
	// As for new fields added in the message, they will be populated with their respective field types' default values.
	Compacted bool `protobuf:"varint,19,opt,name=compacted,proto3" json:"compacted,omitempty"`
	// Segment level, indicating compaction segment level
	// Available value: Legacy, L0, L1, L2
	// For legacy level, it represent old segment before segment level introduced
	// so segments with Legacy level shall be treated as L1 segment
	Level                 SegmentLevel `protobuf:"varint,20,opt,name=level,proto3,enum=milvus.protov2.data.SegmentLevel" json:"level,omitempty"`
	StorageVersion        int64        `protobuf:"varint,21,opt,name=storage_version,json=storageVersion,proto3" json:"storage_version,omitempty"`
	PartitionStatsVersion int64        `protobuf:"varint,22,opt,name=partition_stats_version,json=partitionStatsVersion,proto3" json:"partition_stats_version,omitempty"`
	// use in major compaction, if compaction fail, should revert segment level to last value
	LastLevel SegmentLevel `protobuf:"varint,23,opt,name=last_level,json=lastLevel,proto3,enum=milvus.protov2.data.SegmentLevel" json:"last_level,omitempty"`
	// use in major compaction, if compaction fail, should revert partition stats version to last value
	LastPartitionStatsVersion int64 `protobuf:"varint,24,opt,name=last_partition_stats_version,json=lastPartitionStatsVersion,proto3" json:"last_partition_stats_version,omitempty"`
	// used to indicate whether the segment is sorted by primary key.
	IsSorted bool `protobuf:"varint,25,opt,name=is_sorted,json=isSorted,proto3" json:"is_sorted,omitempty"`
	// textStatsLogs is used to record tokenization index for fields.
	TextStatsLogs map[int64]*TextIndexStats `protobuf:"bytes,26,rep,name=textStatsLogs,proto3" json:"textStatsLogs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bm25Statslogs []*FieldBinlog            `protobuf:"bytes,27,rep,name=bm25statslogs,proto3" json:"bm25statslogs,omitempty"`
	// This field is used to indicate that some intermediate state segments should not be loaded.
	// For example, segments that have been clustered but haven't undergone stats yet.
	IsInvisible bool `protobuf:"varint,28,opt,name=is_invisible,json=isInvisible,proto3" json:"is_invisible,omitempty"`
	// jsonKeyStats is used to record json key index for fields.
	JsonKeyStats map[int64]*JsonKeyStats `protobuf:"bytes,29,rep,name=jsonKeyStats,proto3" json:"jsonKeyStats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SegmentInfo) Reset() {
	*x = SegmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentInfo) ProtoMessage() {}

func (x *SegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentInfo.ProtoReflect.Descriptor instead.
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{26}
}

func (x *SegmentInfo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SegmentInfo) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SegmentInfo) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SegmentInfo) GetInsertChannel() string {
	if x != nil {
		return x.InsertChannel
	}
	return ""
}

func (x *SegmentInfo) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

func (x *SegmentInfo) GetState() commonpb.SegmentState {
	if x != nil {
		return x.State
	}
	return commonpb.SegmentState_SegmentStateNone
}

func (x *SegmentInfo) GetMaxRowNum() int64 {
	if x != nil {
		return x.MaxRowNum
	}
	return 0
}

func (x *SegmentInfo) GetLastExpireTime() uint64 {
	if x != nil {
		return x.LastExpireTime
	}
	return 0
}

func (x *SegmentInfo) GetStartPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SegmentInfo) GetDmlPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.DmlPosition
	}
	return nil
}

func (x *SegmentInfo) GetBinlogs() []*FieldBinlog {
	if x != nil {
		return x.Binlogs
	}
	return nil
}

func (x *SegmentInfo) GetStatslogs() []*FieldBinlog {
	if x != nil {
		return x.Statslogs
	}
	return nil
}

func (x *SegmentInfo) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *SegmentInfo) GetCreatedByCompaction() bool {
	if x != nil {
		return x.CreatedByCompaction
	}
	return false
}

func (x *SegmentInfo) GetCompactionFrom() []int64 {
	if x != nil {
		return x.CompactionFrom
	}
	return nil
}

func (x *SegmentInfo) GetDroppedAt() uint64 {
	if x != nil {
		return x.DroppedAt
	}
	return 0
}

func (x *SegmentInfo) GetIsImporting() bool {
	if x != nil {
		return x.IsImporting
	}
	return false
}

func (x *SegmentInfo) GetIsFake() bool {
	if x != nil {
		return x.IsFake
	}
	return false
}

func (x *SegmentInfo) GetCompacted() bool {
	if x != nil {
		return x.Compacted
	}
	return false
}

func (x *SegmentInfo) GetLevel() SegmentLevel {
	if x != nil {
		return x.Level
	}
	return SegmentLevel_Legacy
}

func (x *SegmentInfo) GetStorageVersion() int64 {
	if x != nil {
		return x.StorageVersion
	}
	return 0
}

func (x *SegmentInfo) GetPartitionStatsVersion() int64 {
	if x != nil {
		return x.PartitionStatsVersion
	}
	return 0
}

func (x *SegmentInfo) GetLastLevel() SegmentLevel {
	if x != nil {
		return x.LastLevel
	}
	return SegmentLevel_Legacy
}

func (x *SegmentInfo) GetLastPartitionStatsVersion() int64 {
	if x != nil {
		return x.LastPartitionStatsVersion
	}
	return 0
}

func (x *SegmentInfo) GetIsSorted() bool {
	if x != nil {
		return x.IsSorted
	}
	return false
}

func (x *SegmentInfo) GetTextStatsLogs() map[int64]*TextIndexStats {
	if x != nil {
		return x.TextStatsLogs
	}
	return nil
}

func (x *SegmentInfo) GetBm25Statslogs() []*FieldBinlog {
	if x != nil {
		return x.Bm25Statslogs
	}
	return nil
}

func (x *SegmentInfo) GetIsInvisible() bool {
	if x != nil {
		return x.IsInvisible
	}
	return false
}

func (x *SegmentInfo) GetJsonKeyStats() map[int64]*JsonKeyStats {
	if x != nil {
		return x.JsonKeyStats
	}
	return nil
}

type SegmentStartPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *msgpb.MsgPosition `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	SegmentID     int64              `protobuf:"varint,2,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
}

func (x *SegmentStartPosition) Reset() {
	*x = SegmentStartPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentStartPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentStartPosition) ProtoMessage() {}

func (x *SegmentStartPosition) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentStartPosition.ProtoReflect.Descriptor instead.
func (*SegmentStartPosition) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{27}
}

func (x *SegmentStartPosition) GetStartPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *SegmentStartPosition) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

type SaveBinlogPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                *commonpb.MsgBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentID           int64                   `protobuf:"varint,2,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID        int64                   `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Field2BinlogPaths   []*FieldBinlog          `protobuf:"bytes,4,rep,name=field2BinlogPaths,proto3" json:"field2BinlogPaths,omitempty"`
	CheckPoints         []*CheckPoint           `protobuf:"bytes,5,rep,name=checkPoints,proto3" json:"checkPoints,omitempty"`
	StartPositions      []*SegmentStartPosition `protobuf:"bytes,6,rep,name=start_positions,json=startPositions,proto3" json:"start_positions,omitempty"`
	Flushed             bool                    `protobuf:"varint,7,opt,name=flushed,proto3" json:"flushed,omitempty"`
	Field2StatslogPaths []*FieldBinlog          `protobuf:"bytes,8,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs           []*FieldBinlog          `protobuf:"bytes,9,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	Dropped             bool                    `protobuf:"varint,10,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Importing           bool                    `protobuf:"varint,11,opt,name=importing,proto3" json:"importing,omitempty"` // deprecated
	Channel             string                  `protobuf:"bytes,12,opt,name=channel,proto3" json:"channel,omitempty"`      // report channel name for verification
	SegLevel            SegmentLevel            `protobuf:"varint,13,opt,name=seg_level,json=segLevel,proto3,enum=milvus.protov2.data.SegmentLevel" json:"seg_level,omitempty"`
	PartitionID         int64                   `protobuf:"varint,14,opt,name=partitionID,proto3" json:"partitionID,omitempty"` // report partitionID for create L0 segment
	StorageVersion      int64                   `protobuf:"varint,15,opt,name=storageVersion,proto3" json:"storageVersion,omitempty"`
}

func (x *SaveBinlogPathsRequest) Reset() {
	*x = SaveBinlogPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveBinlogPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBinlogPathsRequest) ProtoMessage() {}

func (x *SaveBinlogPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBinlogPathsRequest.ProtoReflect.Descriptor instead.
func (*SaveBinlogPathsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{28}
}

func (x *SaveBinlogPathsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SaveBinlogPathsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *SaveBinlogPathsRequest) GetField2BinlogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2BinlogPaths
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetCheckPoints() []*CheckPoint {
	if x != nil {
		return x.CheckPoints
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetStartPositions() []*SegmentStartPosition {
	if x != nil {
		return x.StartPositions
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetFlushed() bool {
	if x != nil {
		return x.Flushed
	}
	return false
}

func (x *SaveBinlogPathsRequest) GetField2StatslogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2StatslogPaths
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *SaveBinlogPathsRequest) GetDropped() bool {
	if x != nil {
		return x.Dropped
	}
	return false
}

func (x *SaveBinlogPathsRequest) GetImporting() bool {
	if x != nil {
		return x.Importing
	}
	return false
}

func (x *SaveBinlogPathsRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *SaveBinlogPathsRequest) GetSegLevel() SegmentLevel {
	if x != nil {
		return x.SegLevel
	}
	return SegmentLevel_Legacy
}

func (x *SaveBinlogPathsRequest) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *SaveBinlogPathsRequest) GetStorageVersion() int64 {
	if x != nil {
		return x.StorageVersion
	}
	return 0
}

type CheckPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID int64              `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	Position  *msgpb.MsgPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	NumOfRows int64              `protobuf:"varint,3,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
}

func (x *CheckPoint) Reset() {
	*x = CheckPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPoint) ProtoMessage() {}

func (x *CheckPoint) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPoint.ProtoReflect.Descriptor instead.
func (*CheckPoint) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{29}
}

func (x *CheckPoint) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *CheckPoint) GetPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CheckPoint) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

type DeltaLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordEntries uint64 `protobuf:"varint,1,opt,name=record_entries,json=recordEntries,proto3" json:"record_entries,omitempty"`
	TimestampFrom uint64 `protobuf:"varint,2,opt,name=timestamp_from,json=timestampFrom,proto3" json:"timestamp_from,omitempty"`
	TimestampTo   uint64 `protobuf:"varint,3,opt,name=timestamp_to,json=timestampTo,proto3" json:"timestamp_to,omitempty"`
	DeltaLogPath  string `protobuf:"bytes,4,opt,name=delta_log_path,json=deltaLogPath,proto3" json:"delta_log_path,omitempty"`
	DeltaLogSize  int64  `protobuf:"varint,5,opt,name=delta_log_size,json=deltaLogSize,proto3" json:"delta_log_size,omitempty"`
}

func (x *DeltaLogInfo) Reset() {
	*x = DeltaLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaLogInfo) ProtoMessage() {}

func (x *DeltaLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaLogInfo.ProtoReflect.Descriptor instead.
func (*DeltaLogInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{30}
}

func (x *DeltaLogInfo) GetRecordEntries() uint64 {
	if x != nil {
		return x.RecordEntries
	}
	return 0
}

func (x *DeltaLogInfo) GetTimestampFrom() uint64 {
	if x != nil {
		return x.TimestampFrom
	}
	return 0
}

func (x *DeltaLogInfo) GetTimestampTo() uint64 {
	if x != nil {
		return x.TimestampTo
	}
	return 0
}

func (x *DeltaLogInfo) GetDeltaLogPath() string {
	if x != nil {
		return x.DeltaLogPath
	}
	return ""
}

func (x *DeltaLogInfo) GetDeltaLogSize() int64 {
	if x != nil {
		return x.DeltaLogSize
	}
	return 0
}

type ChannelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State        ChannelWatchState `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.protov2.data.ChannelWatchState" json:"state,omitempty"`
	CollectionID int64             `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
}

func (x *ChannelStatus) Reset() {
	*x = ChannelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStatus) ProtoMessage() {}

func (x *ChannelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStatus.ProtoReflect.Descriptor instead.
func (*ChannelStatus) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{31}
}

func (x *ChannelStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelStatus) GetState() ChannelWatchState {
	if x != nil {
		return x.State
	}
	return ChannelWatchState_Uncomplete
}

func (x *ChannelStatus) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

type DataNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Version  int64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Channels []*ChannelStatus `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *DataNodeInfo) Reset() {
	*x = DataNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNodeInfo) ProtoMessage() {}

func (x *DataNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNodeInfo.ProtoReflect.Descriptor instead.
func (*DataNodeInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{32}
}

func (x *DataNodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DataNodeInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DataNodeInfo) GetChannels() []*ChannelStatus {
	if x != nil {
		return x.Channels
	}
	return nil
}

type SegmentBinlogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID     int64          `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	FieldBinlogs  []*FieldBinlog `protobuf:"bytes,2,rep,name=fieldBinlogs,proto3" json:"fieldBinlogs,omitempty"`
	NumOfRows     int64          `protobuf:"varint,3,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	Statslogs     []*FieldBinlog `protobuf:"bytes,4,rep,name=statslogs,proto3" json:"statslogs,omitempty"`
	Deltalogs     []*FieldBinlog `protobuf:"bytes,5,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	InsertChannel string         `protobuf:"bytes,6,opt,name=insert_channel,json=insertChannel,proto3" json:"insert_channel,omitempty"`
}

func (x *SegmentBinlogs) Reset() {
	*x = SegmentBinlogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentBinlogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentBinlogs) ProtoMessage() {}

func (x *SegmentBinlogs) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentBinlogs.ProtoReflect.Descriptor instead.
func (*SegmentBinlogs) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{33}
}

func (x *SegmentBinlogs) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SegmentBinlogs) GetFieldBinlogs() []*FieldBinlog {
	if x != nil {
		return x.FieldBinlogs
	}
	return nil
}

func (x *SegmentBinlogs) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

func (x *SegmentBinlogs) GetStatslogs() []*FieldBinlog {
	if x != nil {
		return x.Statslogs
	}
	return nil
}

func (x *SegmentBinlogs) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *SegmentBinlogs) GetInsertChannel() string {
	if x != nil {
		return x.InsertChannel
	}
	return ""
}

type FieldBinlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldID int64     `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	Binlogs []*Binlog `protobuf:"bytes,2,rep,name=binlogs,proto3" json:"binlogs,omitempty"`
}

func (x *FieldBinlog) Reset() {
	*x = FieldBinlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldBinlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldBinlog) ProtoMessage() {}

func (x *FieldBinlog) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldBinlog.ProtoReflect.Descriptor instead.
func (*FieldBinlog) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{34}
}

func (x *FieldBinlog) GetFieldID() int64 {
	if x != nil {
		return x.FieldID
	}
	return 0
}

func (x *FieldBinlog) GetBinlogs() []*Binlog {
	if x != nil {
		return x.Binlogs
	}
	return nil
}

type Binlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesNum    int64  `protobuf:"varint,1,opt,name=entries_num,json=entriesNum,proto3" json:"entries_num,omitempty"`
	TimestampFrom uint64 `protobuf:"varint,2,opt,name=timestamp_from,json=timestampFrom,proto3" json:"timestamp_from,omitempty"`
	TimestampTo   uint64 `protobuf:"varint,3,opt,name=timestamp_to,json=timestampTo,proto3" json:"timestamp_to,omitempty"`
	// deprecated
	LogPath string `protobuf:"bytes,4,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	LogSize int64  `protobuf:"varint,5,opt,name=log_size,json=logSize,proto3" json:"log_size,omitempty"`
	LogID   int64  `protobuf:"varint,6,opt,name=logID,proto3" json:"logID,omitempty"`
	// memory_size represents the size occupied by loading data into memory.
	// log_size represents the size after data serialized.
	// for stats_log, the memory_size always equal log_size.
	MemorySize int64 `protobuf:"varint,7,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
}

func (x *Binlog) Reset() {
	*x = Binlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binlog) ProtoMessage() {}

func (x *Binlog) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binlog.ProtoReflect.Descriptor instead.
func (*Binlog) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{35}
}

func (x *Binlog) GetEntriesNum() int64 {
	if x != nil {
		return x.EntriesNum
	}
	return 0
}

func (x *Binlog) GetTimestampFrom() uint64 {
	if x != nil {
		return x.TimestampFrom
	}
	return 0
}

func (x *Binlog) GetTimestampTo() uint64 {
	if x != nil {
		return x.TimestampTo
	}
	return 0
}

func (x *Binlog) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *Binlog) GetLogSize() int64 {
	if x != nil {
		return x.LogSize
	}
	return 0
}

func (x *Binlog) GetLogID() int64 {
	if x != nil {
		return x.LogID
	}
	return 0
}

func (x *Binlog) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

type GetRecoveryInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *commonpb.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Channels []*VchannelInfo   `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	Binlogs  []*SegmentBinlogs `protobuf:"bytes,3,rep,name=binlogs,proto3" json:"binlogs,omitempty"`
}

func (x *GetRecoveryInfoResponse) Reset() {
	*x = GetRecoveryInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecoveryInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecoveryInfoResponse) ProtoMessage() {}

func (x *GetRecoveryInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecoveryInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRecoveryInfoResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{36}
}

func (x *GetRecoveryInfoResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetRecoveryInfoResponse) GetChannels() []*VchannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetRecoveryInfoResponse) GetBinlogs() []*SegmentBinlogs {
	if x != nil {
		return x.Binlogs
	}
	return nil
}

type GetRecoveryInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID  int64             `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
}

func (x *GetRecoveryInfoRequest) Reset() {
	*x = GetRecoveryInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecoveryInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecoveryInfoRequest) ProtoMessage() {}

func (x *GetRecoveryInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecoveryInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRecoveryInfoRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{37}
}

func (x *GetRecoveryInfoRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetRecoveryInfoRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetRecoveryInfoRequest) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

type GetRecoveryInfoResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Channels []*VchannelInfo  `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	Segments []*SegmentInfo   `protobuf:"bytes,3,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *GetRecoveryInfoResponseV2) Reset() {
	*x = GetRecoveryInfoResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecoveryInfoResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecoveryInfoResponseV2) ProtoMessage() {}

func (x *GetRecoveryInfoResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecoveryInfoResponseV2.ProtoReflect.Descriptor instead.
func (*GetRecoveryInfoResponseV2) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{38}
}

func (x *GetRecoveryInfoResponseV2) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetRecoveryInfoResponseV2) GetChannels() []*VchannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GetRecoveryInfoResponseV2) GetSegments() []*SegmentInfo {
	if x != nil {
		return x.Segments
	}
	return nil
}

type GetRecoveryInfoRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64           `protobuf:"varint,3,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
}

func (x *GetRecoveryInfoRequestV2) Reset() {
	*x = GetRecoveryInfoRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecoveryInfoRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecoveryInfoRequestV2) ProtoMessage() {}

func (x *GetRecoveryInfoRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecoveryInfoRequestV2.ProtoReflect.Descriptor instead.
func (*GetRecoveryInfoRequestV2) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{39}
}

func (x *GetRecoveryInfoRequestV2) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetRecoveryInfoRequestV2) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetRecoveryInfoRequestV2) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

type GetSegmentsByStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *commonpb.MsgBase       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID int64                   `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID  int64                   `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	States       []commonpb.SegmentState `protobuf:"varint,4,rep,packed,name=states,proto3,enum=milvus.protov2.common.SegmentState" json:"states,omitempty"`
}

func (x *GetSegmentsByStatesRequest) Reset() {
	*x = GetSegmentsByStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentsByStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentsByStatesRequest) ProtoMessage() {}

func (x *GetSegmentsByStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentsByStatesRequest.ProtoReflect.Descriptor instead.
func (*GetSegmentsByStatesRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{40}
}

func (x *GetSegmentsByStatesRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetSegmentsByStatesRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetSegmentsByStatesRequest) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *GetSegmentsByStatesRequest) GetStates() []commonpb.SegmentState {
	if x != nil {
		return x.States
	}
	return nil
}

type GetSegmentsByStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Segments []int64          `protobuf:"varint,2,rep,packed,name=segments,proto3" json:"segments,omitempty"`
}

func (x *GetSegmentsByStatesResponse) Reset() {
	*x = GetSegmentsByStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSegmentsByStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSegmentsByStatesResponse) ProtoMessage() {}

func (x *GetSegmentsByStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSegmentsByStatesResponse.ProtoReflect.Descriptor instead.
func (*GetSegmentsByStatesResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{41}
}

func (x *GetSegmentsByStatesResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetSegmentsByStatesResponse) GetSegments() []int64 {
	if x != nil {
		return x.Segments
	}
	return nil
}

type GetFlushedSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CollectionID     int64             `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID      int64             `protobuf:"varint,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	IncludeUnhealthy bool              `protobuf:"varint,4,opt,name=includeUnhealthy,proto3" json:"includeUnhealthy,omitempty"`
}

func (x *GetFlushedSegmentsRequest) Reset() {
	*x = GetFlushedSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlushedSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlushedSegmentsRequest) ProtoMessage() {}

func (x *GetFlushedSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlushedSegmentsRequest.ProtoReflect.Descriptor instead.
func (*GetFlushedSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{42}
}

func (x *GetFlushedSegmentsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GetFlushedSegmentsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *GetFlushedSegmentsRequest) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *GetFlushedSegmentsRequest) GetIncludeUnhealthy() bool {
	if x != nil {
		return x.IncludeUnhealthy
	}
	return false
}

type GetFlushedSegmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Segments []int64          `protobuf:"varint,2,rep,packed,name=segments,proto3" json:"segments,omitempty"`
}

func (x *GetFlushedSegmentsResponse) Reset() {
	*x = GetFlushedSegmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlushedSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlushedSegmentsResponse) ProtoMessage() {}

func (x *GetFlushedSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlushedSegmentsResponse.ProtoReflect.Descriptor instead.
func (*GetFlushedSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{43}
}

func (x *GetFlushedSegmentsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetFlushedSegmentsResponse) GetSegments() []int64 {
	if x != nil {
		return x.Segments
	}
	return nil
}

type SegmentFlushCompletedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Segment *SegmentInfo      `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
}

func (x *SegmentFlushCompletedMsg) Reset() {
	*x = SegmentFlushCompletedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentFlushCompletedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentFlushCompletedMsg) ProtoMessage() {}

func (x *SegmentFlushCompletedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentFlushCompletedMsg.ProtoReflect.Descriptor instead.
func (*SegmentFlushCompletedMsg) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{44}
}

func (x *SegmentFlushCompletedMsg) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SegmentFlushCompletedMsg) GetSegment() *SegmentInfo {
	if x != nil {
		return x.Segment
	}
	return nil
}

type ChannelWatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vchan   *VchannelInfo     `protobuf:"bytes,1,opt,name=vchan,proto3" json:"vchan,omitempty"`
	StartTs int64             `protobuf:"varint,2,opt,name=startTs,proto3" json:"startTs,omitempty"`
	State   ChannelWatchState `protobuf:"varint,3,opt,name=state,proto3,enum=milvus.protov2.data.ChannelWatchState" json:"state,omitempty"`
	// the timeout ts, datanode shall do nothing after it
	// NOT USED.
	TimeoutTs int64 `protobuf:"varint,4,opt,name=timeoutTs,proto3" json:"timeoutTs,omitempty"`
	// the schema of the collection to watch, to avoid get schema rpc issues.
	Schema *schemapb.CollectionSchema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	// watch progress, deprecated
	Progress int32 `protobuf:"varint,6,opt,name=progress,proto3" json:"progress,omitempty"`
	OpID     int64 `protobuf:"varint,7,opt,name=opID,proto3" json:"opID,omitempty"`
}

func (x *ChannelWatchInfo) Reset() {
	*x = ChannelWatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelWatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelWatchInfo) ProtoMessage() {}

func (x *ChannelWatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelWatchInfo.ProtoReflect.Descriptor instead.
func (*ChannelWatchInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{45}
}

func (x *ChannelWatchInfo) GetVchan() *VchannelInfo {
	if x != nil {
		return x.Vchan
	}
	return nil
}

func (x *ChannelWatchInfo) GetStartTs() int64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *ChannelWatchInfo) GetState() ChannelWatchState {
	if x != nil {
		return x.State
	}
	return ChannelWatchState_Uncomplete
}

func (x *ChannelWatchInfo) GetTimeoutTs() int64 {
	if x != nil {
		return x.TimeoutTs
	}
	return 0
}

func (x *ChannelWatchInfo) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChannelWatchInfo) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ChannelWatchInfo) GetOpID() int64 {
	if x != nil {
		return x.OpID
	}
	return 0
}

type CompactionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base   *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	PlanID int64             `protobuf:"varint,2,opt,name=planID,proto3" json:"planID,omitempty"`
}

func (x *CompactionStateRequest) Reset() {
	*x = CompactionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionStateRequest) ProtoMessage() {}

func (x *CompactionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionStateRequest.ProtoReflect.Descriptor instead.
func (*CompactionStateRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{46}
}

func (x *CompactionStateRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CompactionStateRequest) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

type SyncSegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, after v2.4.3
	PlanID int64 `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	// Deprecated, after v2.4.3
	CompactedTo int64 `protobuf:"varint,2,opt,name=compacted_to,json=compactedTo,proto3" json:"compacted_to,omitempty"`
	// Deprecated, after v2.4.3
	NumOfRows int64 `protobuf:"varint,3,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	// Deprecated, after v2.4.3
	CompactedFrom []int64 `protobuf:"varint,4,rep,packed,name=compacted_from,json=compactedFrom,proto3" json:"compacted_from,omitempty"`
	// Deprecated, after v2.4.3
	StatsLogs    []*FieldBinlog `protobuf:"bytes,5,rep,name=stats_logs,json=statsLogs,proto3" json:"stats_logs,omitempty"`
	ChannelName  string         `protobuf:"bytes,6,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	PartitionId  int64          `protobuf:"varint,7,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	CollectionId int64          `protobuf:"varint,8,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *SyncSegmentsRequest) Reset() {
	*x = SyncSegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSegmentsRequest) ProtoMessage() {}

func (x *SyncSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSegmentsRequest.ProtoReflect.Descriptor instead.
func (*SyncSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{47}
}

func (x *SyncSegmentsRequest) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *SyncSegmentsRequest) GetCompactedTo() int64 {
	if x != nil {
		return x.CompactedTo
	}
	return 0
}

func (x *SyncSegmentsRequest) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

func (x *SyncSegmentsRequest) GetCompactedFrom() []int64 {
	if x != nil {
		return x.CompactedFrom
	}
	return nil
}

func (x *SyncSegmentsRequest) GetStatsLogs() []*FieldBinlog {
	if x != nil {
		return x.StatsLogs
	}
	return nil
}

func (x *SyncSegmentsRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *SyncSegmentsRequest) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *SyncSegmentsRequest) GetCollectionId() int64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

type CompactionSegmentBinlogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID           int64          `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	FieldBinlogs        []*FieldBinlog `protobuf:"bytes,2,rep,name=fieldBinlogs,proto3" json:"fieldBinlogs,omitempty"`
	Field2StatslogPaths []*FieldBinlog `protobuf:"bytes,3,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs           []*FieldBinlog `protobuf:"bytes,4,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	InsertChannel       string         `protobuf:"bytes,5,opt,name=insert_channel,json=insertChannel,proto3" json:"insert_channel,omitempty"`
	Level               SegmentLevel   `protobuf:"varint,6,opt,name=level,proto3,enum=milvus.protov2.data.SegmentLevel" json:"level,omitempty"`
	CollectionID        int64          `protobuf:"varint,7,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID         int64          `protobuf:"varint,8,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
}

func (x *CompactionSegmentBinlogs) Reset() {
	*x = CompactionSegmentBinlogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionSegmentBinlogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionSegmentBinlogs) ProtoMessage() {}

func (x *CompactionSegmentBinlogs) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionSegmentBinlogs.ProtoReflect.Descriptor instead.
func (*CompactionSegmentBinlogs) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{48}
}

func (x *CompactionSegmentBinlogs) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *CompactionSegmentBinlogs) GetFieldBinlogs() []*FieldBinlog {
	if x != nil {
		return x.FieldBinlogs
	}
	return nil
}

func (x *CompactionSegmentBinlogs) GetField2StatslogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2StatslogPaths
	}
	return nil
}

func (x *CompactionSegmentBinlogs) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *CompactionSegmentBinlogs) GetInsertChannel() string {
	if x != nil {
		return x.InsertChannel
	}
	return ""
}

func (x *CompactionSegmentBinlogs) GetLevel() SegmentLevel {
	if x != nil {
		return x.Level
	}
	return SegmentLevel_Legacy
}

func (x *CompactionSegmentBinlogs) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CompactionSegmentBinlogs) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

type CompactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID             int64                       `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	SegmentBinlogs     []*CompactionSegmentBinlogs `protobuf:"bytes,2,rep,name=segmentBinlogs,proto3" json:"segmentBinlogs,omitempty"`
	StartTime          int64                       `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	TimeoutInSeconds   int32                       `protobuf:"varint,4,opt,name=timeout_in_seconds,json=timeoutInSeconds,proto3" json:"timeout_in_seconds,omitempty"`
	Type               CompactionType              `protobuf:"varint,5,opt,name=type,proto3,enum=milvus.protov2.data.CompactionType" json:"type,omitempty"`
	Timetravel         uint64                      `protobuf:"varint,6,opt,name=timetravel,proto3" json:"timetravel,omitempty"`
	Channel            string                      `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
	CollectionTtl      int64                       `protobuf:"varint,8,opt,name=collection_ttl,json=collectionTtl,proto3" json:"collection_ttl,omitempty"`
	TotalRows          int64                       `protobuf:"varint,9,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	Schema             *schemapb.CollectionSchema  `protobuf:"bytes,10,opt,name=schema,proto3" json:"schema,omitempty"`
	ClusteringKeyField int64                       `protobuf:"varint,11,opt,name=clustering_key_field,json=clusteringKeyField,proto3" json:"clustering_key_field,omitempty"`
	MaxSegmentRows     int64                       `protobuf:"varint,12,opt,name=max_segment_rows,json=maxSegmentRows,proto3" json:"max_segment_rows,omitempty"`
	PreferSegmentRows  int64                       `protobuf:"varint,13,opt,name=prefer_segment_rows,json=preferSegmentRows,proto3" json:"prefer_segment_rows,omitempty"`
	AnalyzeResultPath  string                      `protobuf:"bytes,14,opt,name=analyze_result_path,json=analyzeResultPath,proto3" json:"analyze_result_path,omitempty"`
	AnalyzeSegmentIds  []int64                     `protobuf:"varint,15,rep,packed,name=analyze_segment_ids,json=analyzeSegmentIds,proto3" json:"analyze_segment_ids,omitempty"`
	State              int32                       `protobuf:"varint,16,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *CompactionPlan) Reset() {
	*x = CompactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionPlan) ProtoMessage() {}

func (x *CompactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionPlan.ProtoReflect.Descriptor instead.
func (*CompactionPlan) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{49}
}

func (x *CompactionPlan) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *CompactionPlan) GetSegmentBinlogs() []*CompactionSegmentBinlogs {
	if x != nil {
		return x.SegmentBinlogs
	}
	return nil
}

func (x *CompactionPlan) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CompactionPlan) GetTimeoutInSeconds() int32 {
	if x != nil {
		return x.TimeoutInSeconds
	}
	return 0
}

func (x *CompactionPlan) GetType() CompactionType {
	if x != nil {
		return x.Type
	}
	return CompactionType_UndefinedCompaction
}

func (x *CompactionPlan) GetTimetravel() uint64 {
	if x != nil {
		return x.Timetravel
	}
	return 0
}

func (x *CompactionPlan) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CompactionPlan) GetCollectionTtl() int64 {
	if x != nil {
		return x.CollectionTtl
	}
	return 0
}

func (x *CompactionPlan) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *CompactionPlan) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CompactionPlan) GetClusteringKeyField() int64 {
	if x != nil {
		return x.ClusteringKeyField
	}
	return 0
}

func (x *CompactionPlan) GetMaxSegmentRows() int64 {
	if x != nil {
		return x.MaxSegmentRows
	}
	return 0
}

func (x *CompactionPlan) GetPreferSegmentRows() int64 {
	if x != nil {
		return x.PreferSegmentRows
	}
	return 0
}

func (x *CompactionPlan) GetAnalyzeResultPath() string {
	if x != nil {
		return x.AnalyzeResultPath
	}
	return ""
}

func (x *CompactionPlan) GetAnalyzeSegmentIds() []int64 {
	if x != nil {
		return x.AnalyzeSegmentIds
	}
	return nil
}

func (x *CompactionPlan) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type CompactionSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID              int64          `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"` // deprecated after 2.3.4
	SegmentID           int64          `protobuf:"varint,2,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	NumOfRows           int64          `protobuf:"varint,3,opt,name=num_of_rows,json=numOfRows,proto3" json:"num_of_rows,omitempty"`
	InsertLogs          []*FieldBinlog `protobuf:"bytes,4,rep,name=insert_logs,json=insertLogs,proto3" json:"insert_logs,omitempty"`
	Field2StatslogPaths []*FieldBinlog `protobuf:"bytes,5,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs           []*FieldBinlog `protobuf:"bytes,6,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	Channel             string         `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *CompactionSegment) Reset() {
	*x = CompactionSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionSegment) ProtoMessage() {}

func (x *CompactionSegment) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionSegment.ProtoReflect.Descriptor instead.
func (*CompactionSegment) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{50}
}

func (x *CompactionSegment) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *CompactionSegment) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *CompactionSegment) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

func (x *CompactionSegment) GetInsertLogs() []*FieldBinlog {
	if x != nil {
		return x.InsertLogs
	}
	return nil
}

func (x *CompactionSegment) GetField2StatslogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2StatslogPaths
	}
	return nil
}

func (x *CompactionSegment) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *CompactionSegment) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type CompactionPlanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID   int64                `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	State    CompactionTaskState  `protobuf:"varint,2,opt,name=state,proto3,enum=milvus.protov2.data.CompactionTaskState" json:"state,omitempty"`
	Segments []*CompactionSegment `protobuf:"bytes,3,rep,name=segments,proto3" json:"segments,omitempty"`
	Channel  string               `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	Type     CompactionType       `protobuf:"varint,5,opt,name=type,proto3,enum=milvus.protov2.data.CompactionType" json:"type,omitempty"`
}

func (x *CompactionPlanResult) Reset() {
	*x = CompactionPlanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionPlanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionPlanResult) ProtoMessage() {}

func (x *CompactionPlanResult) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionPlanResult.ProtoReflect.Descriptor instead.
func (*CompactionPlanResult) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{51}
}

func (x *CompactionPlanResult) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *CompactionPlanResult) GetState() CompactionTaskState {
	if x != nil {
		return x.State
	}
	return CompactionTaskState_unknown
}

func (x *CompactionPlanResult) GetSegments() []*CompactionSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *CompactionPlanResult) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CompactionPlanResult) GetType() CompactionType {
	if x != nil {
		return x.Type
	}
	return CompactionType_UndefinedCompaction
}

type CompactionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *commonpb.Status        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Results []*CompactionPlanResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CompactionStateResponse) Reset() {
	*x = CompactionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionStateResponse) ProtoMessage() {}

func (x *CompactionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionStateResponse.ProtoReflect.Descriptor instead.
func (*CompactionStateResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{52}
}

func (x *CompactionStateResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompactionStateResponse) GetResults() []*CompactionPlanResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Deprecated
type SegmentFieldBinlogMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldID    int64  `protobuf:"varint,1,opt,name=fieldID,proto3" json:"fieldID,omitempty"`
	BinlogPath string `protobuf:"bytes,2,opt,name=binlog_path,json=binlogPath,proto3" json:"binlog_path,omitempty"`
}

func (x *SegmentFieldBinlogMeta) Reset() {
	*x = SegmentFieldBinlogMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentFieldBinlogMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentFieldBinlogMeta) ProtoMessage() {}

func (x *SegmentFieldBinlogMeta) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentFieldBinlogMeta.ProtoReflect.Descriptor instead.
func (*SegmentFieldBinlogMeta) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{53}
}

func (x *SegmentFieldBinlogMeta) GetFieldID() int64 {
	if x != nil {
		return x.FieldID
	}
	return 0
}

func (x *SegmentFieldBinlogMeta) GetBinlogPath() string {
	if x != nil {
		return x.BinlogPath
	}
	return ""
}

type WatchChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID    int64                      `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	ChannelNames    []string                   `protobuf:"bytes,2,rep,name=channelNames,proto3" json:"channelNames,omitempty"`
	StartPositions  []*commonpb.KeyDataPair    `protobuf:"bytes,3,rep,name=start_positions,json=startPositions,proto3" json:"start_positions,omitempty"`
	Schema          *schemapb.CollectionSchema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	CreateTimestamp uint64                     `protobuf:"varint,5,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (x *WatchChannelsRequest) Reset() {
	*x = WatchChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchChannelsRequest) ProtoMessage() {}

func (x *WatchChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchChannelsRequest.ProtoReflect.Descriptor instead.
func (*WatchChannelsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{54}
}

func (x *WatchChannelsRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *WatchChannelsRequest) GetChannelNames() []string {
	if x != nil {
		return x.ChannelNames
	}
	return nil
}

func (x *WatchChannelsRequest) GetStartPositions() []*commonpb.KeyDataPair {
	if x != nil {
		return x.StartPositions
	}
	return nil
}

func (x *WatchChannelsRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *WatchChannelsRequest) GetCreateTimestamp() uint64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

type WatchChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WatchChannelsResponse) Reset() {
	*x = WatchChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchChannelsResponse) ProtoMessage() {}

func (x *WatchChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchChannelsResponse.ProtoReflect.Descriptor instead.
func (*WatchChannelsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{55}
}

func (x *WatchChannelsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type SetSegmentStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *commonpb.MsgBase     `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentId int64                 `protobuf:"varint,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	NewState  commonpb.SegmentState `protobuf:"varint,3,opt,name=new_state,json=newState,proto3,enum=milvus.protov2.common.SegmentState" json:"new_state,omitempty"`
}

func (x *SetSegmentStateRequest) Reset() {
	*x = SetSegmentStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSegmentStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSegmentStateRequest) ProtoMessage() {}

func (x *SetSegmentStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSegmentStateRequest.ProtoReflect.Descriptor instead.
func (*SetSegmentStateRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{56}
}

func (x *SetSegmentStateRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SetSegmentStateRequest) GetSegmentId() int64 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *SetSegmentStateRequest) GetNewState() commonpb.SegmentState {
	if x != nil {
		return x.NewState
	}
	return commonpb.SegmentState_SegmentStateNone
}

type SetSegmentStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetSegmentStateResponse) Reset() {
	*x = SetSegmentStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSegmentStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSegmentStateResponse) ProtoMessage() {}

func (x *SetSegmentStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSegmentStateResponse.ProtoReflect.Descriptor instead.
func (*SetSegmentStateResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{57}
}

func (x *SetSegmentStateResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DropVirtualChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *commonpb.MsgBase            `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ChannelName string                       `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Segments    []*DropVirtualChannelSegment `protobuf:"bytes,3,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *DropVirtualChannelRequest) Reset() {
	*x = DropVirtualChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropVirtualChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropVirtualChannelRequest) ProtoMessage() {}

func (x *DropVirtualChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropVirtualChannelRequest.ProtoReflect.Descriptor instead.
func (*DropVirtualChannelRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{58}
}

func (x *DropVirtualChannelRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DropVirtualChannelRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *DropVirtualChannelRequest) GetSegments() []*DropVirtualChannelSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type DropVirtualChannelSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID           int64              `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	CollectionID        int64              `protobuf:"varint,2,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Field2BinlogPaths   []*FieldBinlog     `protobuf:"bytes,3,rep,name=field2BinlogPaths,proto3" json:"field2BinlogPaths,omitempty"`
	Field2StatslogPaths []*FieldBinlog     `protobuf:"bytes,4,rep,name=field2StatslogPaths,proto3" json:"field2StatslogPaths,omitempty"`
	Deltalogs           []*FieldBinlog     `protobuf:"bytes,5,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
	StartPosition       *msgpb.MsgPosition `protobuf:"bytes,6,opt,name=startPosition,proto3" json:"startPosition,omitempty"`
	CheckPoint          *msgpb.MsgPosition `protobuf:"bytes,7,opt,name=checkPoint,proto3" json:"checkPoint,omitempty"`
	NumOfRows           int64              `protobuf:"varint,8,opt,name=numOfRows,proto3" json:"numOfRows,omitempty"`
}

func (x *DropVirtualChannelSegment) Reset() {
	*x = DropVirtualChannelSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropVirtualChannelSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropVirtualChannelSegment) ProtoMessage() {}

func (x *DropVirtualChannelSegment) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropVirtualChannelSegment.ProtoReflect.Descriptor instead.
func (*DropVirtualChannelSegment) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{59}
}

func (x *DropVirtualChannelSegment) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *DropVirtualChannelSegment) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *DropVirtualChannelSegment) GetField2BinlogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2BinlogPaths
	}
	return nil
}

func (x *DropVirtualChannelSegment) GetField2StatslogPaths() []*FieldBinlog {
	if x != nil {
		return x.Field2StatslogPaths
	}
	return nil
}

func (x *DropVirtualChannelSegment) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

func (x *DropVirtualChannelSegment) GetStartPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *DropVirtualChannelSegment) GetCheckPoint() *msgpb.MsgPosition {
	if x != nil {
		return x.CheckPoint
	}
	return nil
}

func (x *DropVirtualChannelSegment) GetNumOfRows() int64 {
	if x != nil {
		return x.NumOfRows
	}
	return 0
}

type DropVirtualChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DropVirtualChannelResponse) Reset() {
	*x = DropVirtualChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropVirtualChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropVirtualChannelResponse) ProtoMessage() {}

func (x *DropVirtualChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropVirtualChannelResponse.ProtoReflect.Descriptor instead.
func (*DropVirtualChannelResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{60}
}

func (x *DropVirtualChannelResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateSegmentStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base  *commonpb.MsgBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Stats []*commonpb.SegmentStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *UpdateSegmentStatisticsRequest) Reset() {
	*x = UpdateSegmentStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSegmentStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSegmentStatisticsRequest) ProtoMessage() {}

func (x *UpdateSegmentStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSegmentStatisticsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSegmentStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateSegmentStatisticsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateSegmentStatisticsRequest) GetStats() []*commonpb.SegmentStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type UpdateChannelCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base               *commonpb.MsgBase    `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	VChannel           string               `protobuf:"bytes,2,opt,name=vChannel,proto3" json:"vChannel,omitempty"` // deprecated, keep it for compatibility
	Position           *msgpb.MsgPosition   `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"` // deprecated, keep it for compatibility
	ChannelCheckpoints []*msgpb.MsgPosition `protobuf:"bytes,4,rep,name=channel_checkpoints,json=channelCheckpoints,proto3" json:"channel_checkpoints,omitempty"`
}

func (x *UpdateChannelCheckpointRequest) Reset() {
	*x = UpdateChannelCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelCheckpointRequest) ProtoMessage() {}

func (x *UpdateChannelCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelCheckpointRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateChannelCheckpointRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *UpdateChannelCheckpointRequest) GetVChannel() string {
	if x != nil {
		return x.VChannel
	}
	return ""
}

func (x *UpdateChannelCheckpointRequest) GetPosition() *msgpb.MsgPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UpdateChannelCheckpointRequest) GetChannelCheckpoints() []*msgpb.MsgPosition {
	if x != nil {
		return x.ChannelCheckpoints
	}
	return nil
}

type ResendSegmentStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *ResendSegmentStatsRequest) Reset() {
	*x = ResendSegmentStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendSegmentStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendSegmentStatsRequest) ProtoMessage() {}

func (x *ResendSegmentStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendSegmentStatsRequest.ProtoReflect.Descriptor instead.
func (*ResendSegmentStatsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{63}
}

func (x *ResendSegmentStatsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

type ResendSegmentStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SegResent []int64          `protobuf:"varint,2,rep,packed,name=seg_resent,json=segResent,proto3" json:"seg_resent,omitempty"`
}

func (x *ResendSegmentStatsResponse) Reset() {
	*x = ResendSegmentStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendSegmentStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendSegmentStatsResponse) ProtoMessage() {}

func (x *ResendSegmentStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendSegmentStatsResponse.ProtoReflect.Descriptor instead.
func (*ResendSegmentStatsResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{64}
}

func (x *ResendSegmentStatsResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ResendSegmentStatsResponse) GetSegResent() []int64 {
	if x != nil {
		return x.SegResent
	}
	return nil
}

type MarkSegmentsDroppedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *commonpb.MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentIds []int64           `protobuf:"varint,2,rep,packed,name=segment_ids,json=segmentIds,proto3" json:"segment_ids,omitempty"` // IDs of segments that needs to be marked as `dropped`.
}

func (x *MarkSegmentsDroppedRequest) Reset() {
	*x = MarkSegmentsDroppedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkSegmentsDroppedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkSegmentsDroppedRequest) ProtoMessage() {}

func (x *MarkSegmentsDroppedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkSegmentsDroppedRequest.ProtoReflect.Descriptor instead.
func (*MarkSegmentsDroppedRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{65}
}

func (x *MarkSegmentsDroppedRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MarkSegmentsDroppedRequest) GetSegmentIds() []int64 {
	if x != nil {
		return x.SegmentIds
	}
	return nil
}

type SegmentReferenceLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     int64   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	NodeID     int64   `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	SegmentIDs []int64 `protobuf:"varint,3,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
}

func (x *SegmentReferenceLock) Reset() {
	*x = SegmentReferenceLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentReferenceLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentReferenceLock) ProtoMessage() {}

func (x *SegmentReferenceLock) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentReferenceLock.ProtoReflect.Descriptor instead.
func (*SegmentReferenceLock) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{66}
}

func (x *SegmentReferenceLock) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *SegmentReferenceLock) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *SegmentReferenceLock) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

type AlterCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionID   int64                      `protobuf:"varint,1,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	Schema         *schemapb.CollectionSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	PartitionIDs   []int64                    `protobuf:"varint,3,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	StartPositions []*commonpb.KeyDataPair    `protobuf:"bytes,4,rep,name=start_positions,json=startPositions,proto3" json:"start_positions,omitempty"`
	Properties     []*commonpb.KeyValuePair   `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty"`
	DbID           int64                      `protobuf:"varint,6,opt,name=dbID,proto3" json:"dbID,omitempty"`
	VChannels      []string                   `protobuf:"bytes,7,rep,name=vChannels,proto3" json:"vChannels,omitempty"`
}

func (x *AlterCollectionRequest) Reset() {
	*x = AlterCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterCollectionRequest) ProtoMessage() {}

func (x *AlterCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterCollectionRequest.ProtoReflect.Descriptor instead.
func (*AlterCollectionRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{67}
}

func (x *AlterCollectionRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *AlterCollectionRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *AlterCollectionRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *AlterCollectionRequest) GetStartPositions() []*commonpb.KeyDataPair {
	if x != nil {
		return x.StartPositions
	}
	return nil
}

func (x *AlterCollectionRequest) GetProperties() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AlterCollectionRequest) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *AlterCollectionRequest) GetVChannels() []string {
	if x != nil {
		return x.VChannels
	}
	return nil
}

type GcConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId int64 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	PartitionId  int64 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"` // -1 means whole collection.
}

func (x *GcConfirmRequest) Reset() {
	*x = GcConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcConfirmRequest) ProtoMessage() {}

func (x *GcConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcConfirmRequest.ProtoReflect.Descriptor instead.
func (*GcConfirmRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{68}
}

func (x *GcConfirmRequest) GetCollectionId() int64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *GcConfirmRequest) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type GcConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *commonpb.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	GcFinished bool             `protobuf:"varint,2,opt,name=gc_finished,json=gcFinished,proto3" json:"gc_finished,omitempty"`
}

func (x *GcConfirmResponse) Reset() {
	*x = GcConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcConfirmResponse) ProtoMessage() {}

func (x *GcConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcConfirmResponse.ProtoReflect.Descriptor instead.
func (*GcConfirmResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{69}
}

func (x *GcConfirmResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GcConfirmResponse) GetGcFinished() bool {
	if x != nil {
		return x.GcFinished
	}
	return false
}

type ReportDataNodeTtMsgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *commonpb.MsgBase      `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Msgs []*msgpb.DataNodeTtMsg `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs,omitempty"` // -1 means whole collection.
}

func (x *ReportDataNodeTtMsgsRequest) Reset() {
	*x = ReportDataNodeTtMsgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDataNodeTtMsgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDataNodeTtMsgsRequest) ProtoMessage() {}

func (x *ReportDataNodeTtMsgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDataNodeTtMsgsRequest.ProtoReflect.Descriptor instead.
func (*ReportDataNodeTtMsgsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{70}
}

func (x *ReportDataNodeTtMsgsRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ReportDataNodeTtMsgsRequest) GetMsgs() []*msgpb.DataNodeTtMsg {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type GetFlushStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentIDs     []int64 `protobuf:"varint,1,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	FlushTs        uint64  `protobuf:"varint,2,opt,name=flush_ts,json=flushTs,proto3" json:"flush_ts,omitempty"`
	DbName         string  `protobuf:"bytes,3,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	CollectionName string  `protobuf:"bytes,4,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	CollectionID   int64   `protobuf:"varint,5,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
}

func (x *GetFlushStateRequest) Reset() {
	*x = GetFlushStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlushStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlushStateRequest) ProtoMessage() {}

func (x *GetFlushStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlushStateRequest.ProtoReflect.Descriptor instead.
func (*GetFlushStateRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{71}
}

func (x *GetFlushStateRequest) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *GetFlushStateRequest) GetFlushTs() uint64 {
	if x != nil {
		return x.FlushTs
	}
	return 0
}

func (x *GetFlushStateRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *GetFlushStateRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetFlushStateRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

type ChannelOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ChannelWatchInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *ChannelOperationsRequest) Reset() {
	*x = ChannelOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOperationsRequest) ProtoMessage() {}

func (x *ChannelOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOperationsRequest.ProtoReflect.Descriptor instead.
func (*ChannelOperationsRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{72}
}

func (x *ChannelOperationsRequest) GetInfos() []*ChannelWatchInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ChannelOperationProgressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *commonpb.Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	OpID     int64             `protobuf:"varint,2,opt,name=opID,proto3" json:"opID,omitempty"`
	State    ChannelWatchState `protobuf:"varint,3,opt,name=state,proto3,enum=milvus.protov2.data.ChannelWatchState" json:"state,omitempty"`
	Progress int32             `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *ChannelOperationProgressResponse) Reset() {
	*x = ChannelOperationProgressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOperationProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOperationProgressResponse) ProtoMessage() {}

func (x *ChannelOperationProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOperationProgressResponse.ProtoReflect.Descriptor instead.
func (*ChannelOperationProgressResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{73}
}

func (x *ChannelOperationProgressResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ChannelOperationProgressResponse) GetOpID() int64 {
	if x != nil {
		return x.OpID
	}
	return 0
}

func (x *ChannelOperationProgressResponse) GetState() ChannelWatchState {
	if x != nil {
		return x.State
	}
	return ChannelWatchState_Uncomplete
}

func (x *ChannelOperationProgressResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type PreImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID    string                     `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	JobID        int64                      `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID       int64                      `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CollectionID int64                      `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs []int64                    `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Vchannels    []string                   `protobuf:"bytes,6,rep,name=vchannels,proto3" json:"vchannels,omitempty"`
	Schema       *schemapb.CollectionSchema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	ImportFiles  []*internalpb.ImportFile   `protobuf:"bytes,8,rep,name=import_files,json=importFiles,proto3" json:"import_files,omitempty"`
	Options      []*commonpb.KeyValuePair   `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *PreImportRequest) Reset() {
	*x = PreImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreImportRequest) ProtoMessage() {}

func (x *PreImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreImportRequest.ProtoReflect.Descriptor instead.
func (*PreImportRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{74}
}

func (x *PreImportRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *PreImportRequest) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *PreImportRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PreImportRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *PreImportRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *PreImportRequest) GetVchannels() []string {
	if x != nil {
		return x.Vchannels
	}
	return nil
}

func (x *PreImportRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *PreImportRequest) GetImportFiles() []*internalpb.ImportFile {
	if x != nil {
		return x.ImportFiles
	}
	return nil
}

func (x *PreImportRequest) GetOptions() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Options
	}
	return nil
}

type AutoIDRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin int64 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AutoIDRange) Reset() {
	*x = AutoIDRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoIDRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoIDRange) ProtoMessage() {}

func (x *AutoIDRange) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoIDRange.ProtoReflect.Descriptor instead.
func (*AutoIDRange) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{75}
}

func (x *AutoIDRange) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *AutoIDRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ImportRequestSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID   int64  `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	PartitionID int64  `protobuf:"varint,2,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Vchannel    string `protobuf:"bytes,3,opt,name=vchannel,proto3" json:"vchannel,omitempty"`
}

func (x *ImportRequestSegment) Reset() {
	*x = ImportRequestSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportRequestSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportRequestSegment) ProtoMessage() {}

func (x *ImportRequestSegment) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportRequestSegment.ProtoReflect.Descriptor instead.
func (*ImportRequestSegment) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{76}
}

func (x *ImportRequestSegment) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *ImportRequestSegment) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *ImportRequestSegment) GetVchannel() string {
	if x != nil {
		return x.Vchannel
	}
	return ""
}

type ImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID       string                     `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	JobID           int64                      `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID          int64                      `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CollectionID    int64                      `protobuf:"varint,4,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionIDs    []int64                    `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Vchannels       []string                   `protobuf:"bytes,6,rep,name=vchannels,proto3" json:"vchannels,omitempty"`
	Schema          *schemapb.CollectionSchema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	Files           []*internalpb.ImportFile   `protobuf:"bytes,8,rep,name=files,proto3" json:"files,omitempty"`
	Options         []*commonpb.KeyValuePair   `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
	Ts              uint64                     `protobuf:"varint,10,opt,name=ts,proto3" json:"ts,omitempty"`
	AutoIDRange     *AutoIDRange               `protobuf:"bytes,11,opt,name=autoID_range,json=autoIDRange,proto3" json:"autoID_range,omitempty"`
	RequestSegments []*ImportRequestSegment    `protobuf:"bytes,12,rep,name=request_segments,json=requestSegments,proto3" json:"request_segments,omitempty"`
}

func (x *ImportRequest) Reset() {
	*x = ImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportRequest) ProtoMessage() {}

func (x *ImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportRequest.ProtoReflect.Descriptor instead.
func (*ImportRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{77}
}

func (x *ImportRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ImportRequest) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *ImportRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ImportRequest) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ImportRequest) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *ImportRequest) GetVchannels() []string {
	if x != nil {
		return x.Vchannels
	}
	return nil
}

func (x *ImportRequest) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ImportRequest) GetFiles() []*internalpb.ImportFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ImportRequest) GetOptions() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ImportRequest) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ImportRequest) GetAutoIDRange() *AutoIDRange {
	if x != nil {
		return x.AutoIDRange
	}
	return nil
}

func (x *ImportRequest) GetRequestSegments() []*ImportRequestSegment {
	if x != nil {
		return x.RequestSegments
	}
	return nil
}

type QueryPreImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	JobID     int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID    int64  `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *QueryPreImportRequest) Reset() {
	*x = QueryPreImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreImportRequest) ProtoMessage() {}

func (x *QueryPreImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreImportRequest.ProtoReflect.Descriptor instead.
func (*QueryPreImportRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{78}
}

func (x *QueryPreImportRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *QueryPreImportRequest) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *QueryPreImportRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type PartitionImportStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionRows     map[int64]int64 `protobuf:"bytes,1,rep,name=partition_rows,json=partitionRows,proto3" json:"partition_rows,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`               // partitionID -> numRows
	PartitionDataSize map[int64]int64 `protobuf:"bytes,2,rep,name=partition_data_size,json=partitionDataSize,proto3" json:"partition_data_size,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // partitionID -> dataSize
}

func (x *PartitionImportStats) Reset() {
	*x = PartitionImportStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionImportStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionImportStats) ProtoMessage() {}

func (x *PartitionImportStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionImportStats.ProtoReflect.Descriptor instead.
func (*PartitionImportStats) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{79}
}

func (x *PartitionImportStats) GetPartitionRows() map[int64]int64 {
	if x != nil {
		return x.PartitionRows
	}
	return nil
}

func (x *PartitionImportStats) GetPartitionDataSize() map[int64]int64 {
	if x != nil {
		return x.PartitionDataSize
	}
	return nil
}

type ImportFileStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportFile      *internalpb.ImportFile           `protobuf:"bytes,1,opt,name=import_file,json=importFile,proto3" json:"import_file,omitempty"`
	FileSize        int64                            `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	TotalRows       int64                            `protobuf:"varint,3,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	TotalMemorySize int64                            `protobuf:"varint,4,opt,name=total_memory_size,json=totalMemorySize,proto3" json:"total_memory_size,omitempty"`
	HashedStats     map[string]*PartitionImportStats `protobuf:"bytes,5,rep,name=hashed_stats,json=hashedStats,proto3" json:"hashed_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // channel -> PartitionImportStats
}

func (x *ImportFileStats) Reset() {
	*x = ImportFileStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportFileStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportFileStats) ProtoMessage() {}

func (x *ImportFileStats) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportFileStats.ProtoReflect.Descriptor instead.
func (*ImportFileStats) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{80}
}

func (x *ImportFileStats) GetImportFile() *internalpb.ImportFile {
	if x != nil {
		return x.ImportFile
	}
	return nil
}

func (x *ImportFileStats) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ImportFileStats) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *ImportFileStats) GetTotalMemorySize() int64 {
	if x != nil {
		return x.TotalMemorySize
	}
	return 0
}

func (x *ImportFileStats) GetHashedStats() map[string]*PartitionImportStats {
	if x != nil {
		return x.HashedStats
	}
	return nil
}

type QueryPreImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *commonpb.Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TaskID    int64              `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	State     ImportTaskStateV2  `protobuf:"varint,3,opt,name=state,proto3,enum=milvus.protov2.data.ImportTaskStateV2" json:"state,omitempty"`
	Reason    string             `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Slots     int64              `protobuf:"varint,5,opt,name=slots,proto3" json:"slots,omitempty"`
	FileStats []*ImportFileStats `protobuf:"bytes,6,rep,name=file_stats,json=fileStats,proto3" json:"file_stats,omitempty"`
}

func (x *QueryPreImportResponse) Reset() {
	*x = QueryPreImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPreImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPreImportResponse) ProtoMessage() {}

func (x *QueryPreImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPreImportResponse.ProtoReflect.Descriptor instead.
func (*QueryPreImportResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{81}
}

func (x *QueryPreImportResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryPreImportResponse) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *QueryPreImportResponse) GetState() ImportTaskStateV2 {
	if x != nil {
		return x.State
	}
	return ImportTaskStateV2_None
}

func (x *QueryPreImportResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryPreImportResponse) GetSlots() int64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *QueryPreImportResponse) GetFileStats() []*ImportFileStats {
	if x != nil {
		return x.FileStats
	}
	return nil
}

type QueryImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	JobID     int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID    int64  `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
	QuerySlot bool   `protobuf:"varint,4,opt,name=querySlot,proto3" json:"querySlot,omitempty"`
}

func (x *QueryImportRequest) Reset() {
	*x = QueryImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImportRequest) ProtoMessage() {}

func (x *QueryImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImportRequest.ProtoReflect.Descriptor instead.
func (*QueryImportRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{82}
}

func (x *QueryImportRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *QueryImportRequest) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *QueryImportRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *QueryImportRequest) GetQuerySlot() bool {
	if x != nil {
		return x.QuerySlot
	}
	return false
}

type ImportSegmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID    int64          `protobuf:"varint,1,opt,name=segmentID,proto3" json:"segmentID,omitempty"`
	ImportedRows int64          `protobuf:"varint,2,opt,name=imported_rows,json=importedRows,proto3" json:"imported_rows,omitempty"`
	Binlogs      []*FieldBinlog `protobuf:"bytes,3,rep,name=binlogs,proto3" json:"binlogs,omitempty"`
	Statslogs    []*FieldBinlog `protobuf:"bytes,4,rep,name=statslogs,proto3" json:"statslogs,omitempty"`
	Deltalogs    []*FieldBinlog `protobuf:"bytes,5,rep,name=deltalogs,proto3" json:"deltalogs,omitempty"`
}

func (x *ImportSegmentInfo) Reset() {
	*x = ImportSegmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSegmentInfo) ProtoMessage() {}

func (x *ImportSegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSegmentInfo.ProtoReflect.Descriptor instead.
func (*ImportSegmentInfo) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{83}
}

func (x *ImportSegmentInfo) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *ImportSegmentInfo) GetImportedRows() int64 {
	if x != nil {
		return x.ImportedRows
	}
	return 0
}

func (x *ImportSegmentInfo) GetBinlogs() []*FieldBinlog {
	if x != nil {
		return x.Binlogs
	}
	return nil
}

func (x *ImportSegmentInfo) GetStatslogs() []*FieldBinlog {
	if x != nil {
		return x.Statslogs
	}
	return nil
}

func (x *ImportSegmentInfo) GetDeltalogs() []*FieldBinlog {
	if x != nil {
		return x.Deltalogs
	}
	return nil
}

type QueryImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *commonpb.Status     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TaskID             int64                `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	State              ImportTaskStateV2    `protobuf:"varint,3,opt,name=state,proto3,enum=milvus.protov2.data.ImportTaskStateV2" json:"state,omitempty"`
	Reason             string               `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Slots              int64                `protobuf:"varint,5,opt,name=slots,proto3" json:"slots,omitempty"`
	ImportSegmentsInfo []*ImportSegmentInfo `protobuf:"bytes,6,rep,name=import_segments_info,json=importSegmentsInfo,proto3" json:"import_segments_info,omitempty"`
}

func (x *QueryImportResponse) Reset() {
	*x = QueryImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryImportResponse) ProtoMessage() {}

func (x *QueryImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryImportResponse.ProtoReflect.Descriptor instead.
func (*QueryImportResponse) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{84}
}

func (x *QueryImportResponse) GetStatus() *commonpb.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryImportResponse) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *QueryImportResponse) GetState() ImportTaskStateV2 {
	if x != nil {
		return x.State
	}
	return ImportTaskStateV2_None
}

func (x *QueryImportResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *QueryImportResponse) GetSlots() int64 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *QueryImportResponse) GetImportSegmentsInfo() []*ImportSegmentInfo {
	if x != nil {
		return x.ImportSegmentsInfo
	}
	return nil
}

type DropImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterID string `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	JobID     int64  `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID    int64  `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *DropImportRequest) Reset() {
	*x = DropImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropImportRequest) ProtoMessage() {}

func (x *DropImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropImportRequest.ProtoReflect.Descriptor instead.
func (*DropImportRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{85}
}

func (x *DropImportRequest) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *DropImportRequest) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *DropImportRequest) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type ImportJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID             int64                      `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	DbID              int64                      `protobuf:"varint,2,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionID      int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	CollectionName    string                     `protobuf:"bytes,4,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionIDs      []int64                    `protobuf:"varint,5,rep,packed,name=partitionIDs,proto3" json:"partitionIDs,omitempty"`
	Vchannels         []string                   `protobuf:"bytes,6,rep,name=vchannels,proto3" json:"vchannels,omitempty"`
	Schema            *schemapb.CollectionSchema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	TimeoutTs         uint64                     `protobuf:"varint,8,opt,name=timeout_ts,json=timeoutTs,proto3" json:"timeout_ts,omitempty"`
	CleanupTs         uint64                     `protobuf:"varint,9,opt,name=cleanup_ts,json=cleanupTs,proto3" json:"cleanup_ts,omitempty"`
	RequestedDiskSize int64                      `protobuf:"varint,10,opt,name=requestedDiskSize,proto3" json:"requestedDiskSize,omitempty"`
	State             internalpb.ImportJobState  `protobuf:"varint,11,opt,name=state,proto3,enum=milvus.protov2.internal.ImportJobState" json:"state,omitempty"`
	Reason            string                     `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"`
	CompleteTime      string                     `protobuf:"bytes,13,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	Files             []*internalpb.ImportFile   `protobuf:"bytes,14,rep,name=files,proto3" json:"files,omitempty"`
	Options           []*commonpb.KeyValuePair   `protobuf:"bytes,15,rep,name=options,proto3" json:"options,omitempty"`
	StartTime         string                     `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *ImportJob) Reset() {
	*x = ImportJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportJob) ProtoMessage() {}

func (x *ImportJob) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportJob.ProtoReflect.Descriptor instead.
func (*ImportJob) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{86}
}

func (x *ImportJob) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *ImportJob) GetDbID() int64 {
	if x != nil {
		return x.DbID
	}
	return 0
}

func (x *ImportJob) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ImportJob) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ImportJob) GetPartitionIDs() []int64 {
	if x != nil {
		return x.PartitionIDs
	}
	return nil
}

func (x *ImportJob) GetVchannels() []string {
	if x != nil {
		return x.Vchannels
	}
	return nil
}

func (x *ImportJob) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ImportJob) GetTimeoutTs() uint64 {
	if x != nil {
		return x.TimeoutTs
	}
	return 0
}

func (x *ImportJob) GetCleanupTs() uint64 {
	if x != nil {
		return x.CleanupTs
	}
	return 0
}

func (x *ImportJob) GetRequestedDiskSize() int64 {
	if x != nil {
		return x.RequestedDiskSize
	}
	return 0
}

func (x *ImportJob) GetState() internalpb.ImportJobState {
	if x != nil {
		return x.State
	}
	return internalpb.ImportJobState_None
}

func (x *ImportJob) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ImportJob) GetCompleteTime() string {
	if x != nil {
		return x.CompleteTime
	}
	return ""
}

func (x *ImportJob) GetFiles() []*internalpb.ImportFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ImportJob) GetOptions() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ImportJob) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type PreImportTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID        int64              `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID       int64              `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CollectionID int64              `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	NodeID       int64              `protobuf:"varint,6,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	State        ImportTaskStateV2  `protobuf:"varint,7,opt,name=state,proto3,enum=milvus.protov2.data.ImportTaskStateV2" json:"state,omitempty"`
	Reason       string             `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	FileStats    []*ImportFileStats `protobuf:"bytes,10,rep,name=file_stats,json=fileStats,proto3" json:"file_stats,omitempty"`
}

func (x *PreImportTask) Reset() {
	*x = PreImportTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreImportTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreImportTask) ProtoMessage() {}

func (x *PreImportTask) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreImportTask.ProtoReflect.Descriptor instead.
func (*PreImportTask) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{87}
}

func (x *PreImportTask) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *PreImportTask) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *PreImportTask) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *PreImportTask) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *PreImportTask) GetState() ImportTaskStateV2 {
	if x != nil {
		return x.State
	}
	return ImportTaskStateV2_None
}

func (x *PreImportTask) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PreImportTask) GetFileStats() []*ImportFileStats {
	if x != nil {
		return x.FileStats
	}
	return nil
}

type ImportTaskV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID           int64              `protobuf:"varint,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	TaskID          int64              `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CollectionID    int64              `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	SegmentIDs      []int64            `protobuf:"varint,4,rep,packed,name=segmentIDs,proto3" json:"segmentIDs,omitempty"`
	NodeID          int64              `protobuf:"varint,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	State           ImportTaskStateV2  `protobuf:"varint,6,opt,name=state,proto3,enum=milvus.protov2.data.ImportTaskStateV2" json:"state,omitempty"`
	Reason          string             `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	CompleteTime    string             `protobuf:"bytes,8,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	FileStats       []*ImportFileStats `protobuf:"bytes,9,rep,name=file_stats,json=fileStats,proto3" json:"file_stats,omitempty"`
	StatsSegmentIDs []int64            `protobuf:"varint,10,rep,packed,name=stats_segmentIDs,json=statsSegmentIDs,proto3" json:"stats_segmentIDs,omitempty"`
}

func (x *ImportTaskV2) Reset() {
	*x = ImportTaskV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportTaskV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportTaskV2) ProtoMessage() {}

func (x *ImportTaskV2) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportTaskV2.ProtoReflect.Descriptor instead.
func (*ImportTaskV2) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{88}
}

func (x *ImportTaskV2) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *ImportTaskV2) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ImportTaskV2) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *ImportTaskV2) GetSegmentIDs() []int64 {
	if x != nil {
		return x.SegmentIDs
	}
	return nil
}

func (x *ImportTaskV2) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *ImportTaskV2) GetState() ImportTaskStateV2 {
	if x != nil {
		return x.State
	}
	return ImportTaskStateV2_None
}

func (x *ImportTaskV2) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ImportTaskV2) GetCompleteTime() string {
	if x != nil {
		return x.CompleteTime
	}
	return ""
}

func (x *ImportTaskV2) GetFileStats() []*ImportFileStats {
	if x != nil {
		return x.FileStats
	}
	return nil
}

func (x *ImportTaskV2) GetStatsSegmentIDs() []int64 {
	if x != nil {
		return x.StatsSegmentIDs
	}
	return nil
}

type GcControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *commonpb.MsgBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Command GcCommand                `protobuf:"varint,2,opt,name=command,proto3,enum=milvus.protov2.data.GcCommand" json:"command,omitempty"`
	Params  []*commonpb.KeyValuePair `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *GcControlRequest) Reset() {
	*x = GcControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcControlRequest) ProtoMessage() {}

func (x *GcControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcControlRequest.ProtoReflect.Descriptor instead.
func (*GcControlRequest) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{89}
}

func (x *GcControlRequest) GetBase() *commonpb.MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *GcControlRequest) GetCommand() GcCommand {
	if x != nil {
		return x.Command
	}
	return GcCommand__
}

func (x *GcControlRequest) GetParams() []*commonpb.KeyValuePair {
	if x != nil {
		return x.Params
	}
	return nil
}

type CompactionTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanID             int64                      `protobuf:"varint,1,opt,name=planID,proto3" json:"planID,omitempty"`
	TriggerID          int64                      `protobuf:"varint,2,opt,name=triggerID,proto3" json:"triggerID,omitempty"`
	CollectionID       int64                      `protobuf:"varint,3,opt,name=collectionID,proto3" json:"collectionID,omitempty"`
	PartitionID        int64                      `protobuf:"varint,4,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Channel            string                     `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Type               CompactionType             `protobuf:"varint,6,opt,name=type,proto3,enum=milvus.protov2.data.CompactionType" json:"type,omitempty"`
	State              CompactionTaskState        `protobuf:"varint,7,opt,name=state,proto3,enum=milvus.protov2.data.CompactionTaskState" json:"state,omitempty"`
	FailReason         string                     `protobuf:"bytes,8,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason,omitempty"`
	StartTime          int64                      `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64                      `protobuf:"varint,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TimeoutInSeconds   int32                      `protobuf:"varint,11,opt,name=timeout_in_seconds,json=timeoutInSeconds,proto3" json:"timeout_in_seconds,omitempty"`
	RetryTimes         int32                      `protobuf:"varint,12,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`
	CollectionTtl      int64                      `protobuf:"varint,13,opt,name=collection_ttl,json=collectionTtl,proto3" json:"collection_ttl,omitempty"`
	TotalRows          int64                      `protobuf:"varint,14,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	InputSegments      []int64                    `protobuf:"varint,15,rep,packed,name=inputSegments,proto3" json:"inputSegments,omitempty"`
	ResultSegments     []int64                    `protobuf:"varint,16,rep,packed,name=resultSegments,proto3" json:"resultSegments,omitempty"`
	Pos                *msgpb.MsgPosition         `protobuf:"bytes,17,opt,name=pos,proto3" json:"pos,omitempty"`
	NodeID             int64                      `protobuf:"varint,18,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Schema             *schemapb.CollectionSchema `protobuf:"bytes,19,opt,name=schema,proto3" json:"schema,omitempty"`
	ClusteringKeyField *schemapb.FieldSchema      `protobuf:"bytes,20,opt,name=clustering_key_field,json=clusteringKeyField,proto3" json:"clustering_key_field,omitempty"`
	MaxSegmentRows     int64                      `protobuf:"varint,21,opt,name=max_segment_rows,json=maxSegmentRows,proto3" json:"max_segment_rows,omitempty"`
	PreferSegmentRows  int64                      `protobuf:"varint,22,opt,name=prefer_segment_rows,json=preferSegmentRows,proto3" json:"prefer_segment_rows,omitempty"`
	AnalyzeTaskID      int64                      `protobuf:"varint,23,opt,name=analyzeTaskID,proto3" json:"analyzeTaskID,omitempty"`
	AnalyzeVersion     int64                      `protobuf:"varint,24,opt,name=analyzeVersion,proto3" json:"analyzeVersion,omitempty"`
}

func (x *CompactionTask) Reset() {
	*x = CompactionTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_coord_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionTask) ProtoMessage() {}

func (x *CompactionTask) ProtoReflect() protoreflect.Message {
	mi := &file_data_coord_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionTask.ProtoReflect.Descriptor instead.
func (*CompactionTask) Descriptor() ([]byte, []int) {
	return file_data_coord_proto_rawDescGZIP(), []int{90}
}

func (x *CompactionTask) GetPlanID() int64 {
	if x != nil {
		return x.PlanID
	}
	return 0
}

func (x *CompactionTask) GetTriggerID() int64 {
	if x != nil {
		return x.TriggerID
	}
	return 0
}

func (x *CompactionTask) GetCollectionID() int64 {
	if x != nil {
		return x.CollectionID
	}
	return 0
}

func (x *CompactionTask) GetPartitionID() int64 {
	if x != nil {
		return x.PartitionID
	}
	return 0
}

func (x *CompactionTask) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CompactionTask) GetType() CompactionType {
	if x != nil {
		return x.Type
	}
	return CompactionType_UndefinedCompaction
}

func (x *CompactionTask) GetState() CompactionTaskState {
	if x != nil {
		return x.State
	}
	return CompactionTaskState_unknown
}

func (x *CompactionTask) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

func (x *CompactionTask) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CompactionTask) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CompactionTask) GetTimeoutInSeconds() int32 {
	if x != nil {
		return x.TimeoutInSeconds
	}
	return 0
}

func (x *CompactionTask) GetRetryTimes() int32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *CompactionTask) GetCollectionTtl() int64 {
	if x != nil {
		return x.CollectionTtl
	}
	return 0
}

func (x *CompactionTask) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *CompactionTask) GetInputSegments() []int64 {
	if x != nil {
		return x.InputSegments
	}
	return nil
}

func (x *CompactionTask) GetResultSegments() []int64 {
	if x != nil {
		return x.ResultSegments
	}
	return nil
}

func (x *CompactionTask) GetPos() *msgpb.MsgPosition {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *CompactionTask) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *CompactionTask) GetSchema() *schemapb.CollectionSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CompactionTask) GetClusteringKeyField() *schemapb.FieldSchema {
	if x != nil {
		return x.ClusteringKeyField
	}
	return nil
}

func (x *CompactionTask) GetMaxSegmentRows() int64 {
	if x != nil {
		return x.MaxSegmentRows
	}
	return 0
}

func (x *CompactionTask) GetPreferSegmentRows() int64 {
	if x != nil {
		return x.PreferSegmentRows
	}
	return 0
}

func (x *CompactionTask) GetAnalyzeTaskID() int64 {
	if x != nil {
		return x.AnalyzeTaskID
	}
	return 0
}

func (x *CompactionTask) GetAnalyzeVersion() int64 {
	if x != nil {
		return x.AnalyzeVersion
	}
	return 0
}

var File_data_coord_proto protoreflect.FileDescriptor

var file_data_coord_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xb8, 0x03, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x70, 0x73, 0x1a, 0x5e, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa2, 0x01,
	0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x53, 0x0a,
	0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x67, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x49, 0x44, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x65, 0x67, 0x49, 0x44, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22,
	0xae, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0xe1, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x65, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x73, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x93, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x07,
	0x0a, 0x0c, 0x56, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65,
	0x65, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x75, 0x6e,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x75, 0x6e, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x13, 0x75, 0x6e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x11, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x77, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x1b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x56, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c,
	0x0a, 0x0a, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x0e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22,
	0xae, 0x01, 0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x22, 0xed, 0x0c, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x6d,
	0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x6d, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x07, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6b,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x61, 0x6b, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x6d, 0x32, 0x35, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x0d, 0x62, 0x6d, 0x32,
	0x35, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x65, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x11,
	0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x7c, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xff,
	0x05, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x4e, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x32, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74, 0x61, 0x74, 0x73, 0x6c,
	0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52,
	0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x87, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x82, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x0c,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3e, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x5e, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x07,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xcf, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x32, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x70, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xc1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x22, 0x6f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x54, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0xc3, 0x02, 0x0a,
	0x13, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12,
	0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74, 0x61, 0x74, 0x73, 0x6c,
	0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xc8, 0x05,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x0e, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x52,
	0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x53, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x85, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x4e, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x44, 0x72, 0x6f, 0x70, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe7, 0x03, 0x0a, 0x19, 0x44, 0x72, 0x6f, 0x70,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x53, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x6f, 0x77,
	0x73, 0x22, 0x53, 0x0a, 0x1a, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x1a, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0x71, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x66, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x16, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x4b,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x47, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x11, 0x47, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x63,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x67, 0x63, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x74, 0x4d, 0x73, 0x67,
	0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x57, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x46, 0x0a, 0x0c, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x44, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x72, 0x0a, 0x14, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xa7, 0x04,
	0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x49, 0x44, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x44, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x44, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xf5, 0x02, 0x0a,
	0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x70, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x40, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44,
	0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x03, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x69, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x02, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x3a, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x58,
	0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x86, 0x05, 0x0a, 0x09, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x0c, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x10, 0x47, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xe7, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x74, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x54, 0x0a, 0x14, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x12, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x32, 0x0a, 0x0c, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x30, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x31, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x32, 0x10, 0x03, 0x2a, 0x99, 0x01,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07, 0x2a, 0xcd, 0x01, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x69,
	0x78, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x30, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x08, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0x55, 0x0a, 0x11, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x2a, 0x29, 0x0a, 0x09, 0x47, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x05, 0x0a,
	0x01, 0x5f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x02, 0x2a, 0xa3, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x69,
	0x6e, 0x67, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x10,
	0x09, 0x32, 0xa6, 0x29, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12,
	0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x05, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x42, 0x69,
	0x6e, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x32, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x30, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x44, 0x72,
	0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x33,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x1a, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x28, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0a,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x09, 0x44,
	0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x09, 0x47, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x74,
	0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09,
	0x47, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x32, 0x12, 0x2e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x27, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x2c, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc8, 0x0e, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x29, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x35,
	0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x32, 0x12, 0x22, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2a, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x2e, 0x6d,
	0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_data_coord_proto_rawDescOnce sync.Once
	file_data_coord_proto_rawDescData = file_data_coord_proto_rawDesc
)

func file_data_coord_proto_rawDescGZIP() []byte {
	file_data_coord_proto_rawDescOnce.Do(func() {
		file_data_coord_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_coord_proto_rawDescData)
	})
	return file_data_coord_proto_rawDescData
}

var file_data_coord_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_data_coord_proto_msgTypes = make([]protoimpl.MessageInfo, 99)
var file_data_coord_proto_goTypes = []interface{}{
	(SegmentType)(0),                               // 0: milvus.protov2.data.SegmentType
	(SegmentLevel)(0),                              // 1: milvus.protov2.data.SegmentLevel
	(ChannelWatchState)(0),                         // 2: milvus.protov2.data.ChannelWatchState
	(CompactionType)(0),                            // 3: milvus.protov2.data.CompactionType
	(ImportTaskStateV2)(0),                         // 4: milvus.protov2.data.ImportTaskStateV2
	(GcCommand)(0),                                 // 5: milvus.protov2.data.GcCommand
	(CompactionTaskState)(0),                       // 6: milvus.protov2.data.CompactionTaskState
	(*Empty)(nil),                                  // 7: milvus.protov2.data.Empty
	(*FlushRequest)(nil),                           // 8: milvus.protov2.data.FlushRequest
	(*FlushResponse)(nil),                          // 9: milvus.protov2.data.FlushResponse
	(*FlushChannelsRequest)(nil),                   // 10: milvus.protov2.data.FlushChannelsRequest
	(*SegmentIDRequest)(nil),                       // 11: milvus.protov2.data.SegmentIDRequest
	(*AssignSegmentIDRequest)(nil),                 // 12: milvus.protov2.data.AssignSegmentIDRequest
	(*SegmentIDAssignment)(nil),                    // 13: milvus.protov2.data.SegmentIDAssignment
	(*AssignSegmentIDResponse)(nil),                // 14: milvus.protov2.data.AssignSegmentIDResponse
	(*GetSegmentStatesRequest)(nil),                // 15: milvus.protov2.data.GetSegmentStatesRequest
	(*SegmentStateInfo)(nil),                       // 16: milvus.protov2.data.SegmentStateInfo
	(*GetSegmentStatesResponse)(nil),               // 17: milvus.protov2.data.GetSegmentStatesResponse
	(*GetSegmentInfoRequest)(nil),                  // 18: milvus.protov2.data.GetSegmentInfoRequest
	(*GetSegmentInfoResponse)(nil),                 // 19: milvus.protov2.data.GetSegmentInfoResponse
	(*GetInsertBinlogPathsRequest)(nil),            // 20: milvus.protov2.data.GetInsertBinlogPathsRequest
	(*GetInsertBinlogPathsResponse)(nil),           // 21: milvus.protov2.data.GetInsertBinlogPathsResponse
	(*GetCollectionStatisticsRequest)(nil),         // 22: milvus.protov2.data.GetCollectionStatisticsRequest
	(*GetCollectionStatisticsResponse)(nil),        // 23: milvus.protov2.data.GetCollectionStatisticsResponse
	(*GetPartitionStatisticsRequest)(nil),          // 24: milvus.protov2.data.GetPartitionStatisticsRequest
	(*GetPartitionStatisticsResponse)(nil),         // 25: milvus.protov2.data.GetPartitionStatisticsResponse
	(*GetSegmentInfoChannelRequest)(nil),           // 26: milvus.protov2.data.GetSegmentInfoChannelRequest
	(*VchannelInfo)(nil),                           // 27: milvus.protov2.data.VchannelInfo
	(*WatchDmChannelsRequest)(nil),                 // 28: milvus.protov2.data.WatchDmChannelsRequest
	(*FlushSegmentsRequest)(nil),                   // 29: milvus.protov2.data.FlushSegmentsRequest
	(*SegmentMsg)(nil),                             // 30: milvus.protov2.data.SegmentMsg
	(*TextIndexStats)(nil),                         // 31: milvus.protov2.data.TextIndexStats
	(*JsonKeyStats)(nil),                           // 32: milvus.protov2.data.JsonKeyStats
	(*SegmentInfo)(nil),                            // 33: milvus.protov2.data.SegmentInfo
	(*SegmentStartPosition)(nil),                   // 34: milvus.protov2.data.SegmentStartPosition
	(*SaveBinlogPathsRequest)(nil),                 // 35: milvus.protov2.data.SaveBinlogPathsRequest
	(*CheckPoint)(nil),                             // 36: milvus.protov2.data.CheckPoint
	(*DeltaLogInfo)(nil),                           // 37: milvus.protov2.data.DeltaLogInfo
	(*ChannelStatus)(nil),                          // 38: milvus.protov2.data.ChannelStatus
	(*DataNodeInfo)(nil),                           // 39: milvus.protov2.data.DataNodeInfo
	(*SegmentBinlogs)(nil),                         // 40: milvus.protov2.data.SegmentBinlogs
	(*FieldBinlog)(nil),                            // 41: milvus.protov2.data.FieldBinlog
	(*Binlog)(nil),                                 // 42: milvus.protov2.data.Binlog
	(*GetRecoveryInfoResponse)(nil),                // 43: milvus.protov2.data.GetRecoveryInfoResponse
	(*GetRecoveryInfoRequest)(nil),                 // 44: milvus.protov2.data.GetRecoveryInfoRequest
	(*GetRecoveryInfoResponseV2)(nil),              // 45: milvus.protov2.data.GetRecoveryInfoResponseV2
	(*GetRecoveryInfoRequestV2)(nil),               // 46: milvus.protov2.data.GetRecoveryInfoRequestV2
	(*GetSegmentsByStatesRequest)(nil),             // 47: milvus.protov2.data.GetSegmentsByStatesRequest
	(*GetSegmentsByStatesResponse)(nil),            // 48: milvus.protov2.data.GetSegmentsByStatesResponse
	(*GetFlushedSegmentsRequest)(nil),              // 49: milvus.protov2.data.GetFlushedSegmentsRequest
	(*GetFlushedSegmentsResponse)(nil),             // 50: milvus.protov2.data.GetFlushedSegmentsResponse
	(*SegmentFlushCompletedMsg)(nil),               // 51: milvus.protov2.data.SegmentFlushCompletedMsg
	(*ChannelWatchInfo)(nil),                       // 52: milvus.protov2.data.ChannelWatchInfo
	(*CompactionStateRequest)(nil),                 // 53: milvus.protov2.data.CompactionStateRequest
	(*SyncSegmentsRequest)(nil),                    // 54: milvus.protov2.data.SyncSegmentsRequest
	(*CompactionSegmentBinlogs)(nil),               // 55: milvus.protov2.data.CompactionSegmentBinlogs
	(*CompactionPlan)(nil),                         // 56: milvus.protov2.data.CompactionPlan
	(*CompactionSegment)(nil),                      // 57: milvus.protov2.data.CompactionSegment
	(*CompactionPlanResult)(nil),                   // 58: milvus.protov2.data.CompactionPlanResult
	(*CompactionStateResponse)(nil),                // 59: milvus.protov2.data.CompactionStateResponse
	(*SegmentFieldBinlogMeta)(nil),                 // 60: milvus.protov2.data.SegmentFieldBinlogMeta
	(*WatchChannelsRequest)(nil),                   // 61: milvus.protov2.data.WatchChannelsRequest
	(*WatchChannelsResponse)(nil),                  // 62: milvus.protov2.data.WatchChannelsResponse
	(*SetSegmentStateRequest)(nil),                 // 63: milvus.protov2.data.SetSegmentStateRequest
	(*SetSegmentStateResponse)(nil),                // 64: milvus.protov2.data.SetSegmentStateResponse
	(*DropVirtualChannelRequest)(nil),              // 65: milvus.protov2.data.DropVirtualChannelRequest
	(*DropVirtualChannelSegment)(nil),              // 66: milvus.protov2.data.DropVirtualChannelSegment
	(*DropVirtualChannelResponse)(nil),             // 67: milvus.protov2.data.DropVirtualChannelResponse
	(*UpdateSegmentStatisticsRequest)(nil),         // 68: milvus.protov2.data.UpdateSegmentStatisticsRequest
	(*UpdateChannelCheckpointRequest)(nil),         // 69: milvus.protov2.data.UpdateChannelCheckpointRequest
	(*ResendSegmentStatsRequest)(nil),              // 70: milvus.protov2.data.ResendSegmentStatsRequest
	(*ResendSegmentStatsResponse)(nil),             // 71: milvus.protov2.data.ResendSegmentStatsResponse
	(*MarkSegmentsDroppedRequest)(nil),             // 72: milvus.protov2.data.MarkSegmentsDroppedRequest
	(*SegmentReferenceLock)(nil),                   // 73: milvus.protov2.data.SegmentReferenceLock
	(*AlterCollectionRequest)(nil),                 // 74: milvus.protov2.data.AlterCollectionRequest
	(*GcConfirmRequest)(nil),                       // 75: milvus.protov2.data.GcConfirmRequest
	(*GcConfirmResponse)(nil),                      // 76: milvus.protov2.data.GcConfirmResponse
	(*ReportDataNodeTtMsgsRequest)(nil),            // 77: milvus.protov2.data.ReportDataNodeTtMsgsRequest
	(*GetFlushStateRequest)(nil),                   // 78: milvus.protov2.data.GetFlushStateRequest
	(*ChannelOperationsRequest)(nil),               // 79: milvus.protov2.data.ChannelOperationsRequest
	(*ChannelOperationProgressResponse)(nil),       // 80: milvus.protov2.data.ChannelOperationProgressResponse
	(*PreImportRequest)(nil),                       // 81: milvus.protov2.data.PreImportRequest
	(*AutoIDRange)(nil),                            // 82: milvus.protov2.data.autoIDRange
	(*ImportRequestSegment)(nil),                   // 83: milvus.protov2.data.ImportRequestSegment
	(*ImportRequest)(nil),                          // 84: milvus.protov2.data.ImportRequest
	(*QueryPreImportRequest)(nil),                  // 85: milvus.protov2.data.QueryPreImportRequest
	(*PartitionImportStats)(nil),                   // 86: milvus.protov2.data.PartitionImportStats
	(*ImportFileStats)(nil),                        // 87: milvus.protov2.data.ImportFileStats
	(*QueryPreImportResponse)(nil),                 // 88: milvus.protov2.data.QueryPreImportResponse
	(*QueryImportRequest)(nil),                     // 89: milvus.protov2.data.QueryImportRequest
	(*ImportSegmentInfo)(nil),                      // 90: milvus.protov2.data.ImportSegmentInfo
	(*QueryImportResponse)(nil),                    // 91: milvus.protov2.data.QueryImportResponse
	(*DropImportRequest)(nil),                      // 92: milvus.protov2.data.DropImportRequest
	(*ImportJob)(nil),                              // 93: milvus.protov2.data.ImportJob
	(*PreImportTask)(nil),                          // 94: milvus.protov2.data.PreImportTask
	(*ImportTaskV2)(nil),                           // 95: milvus.protov2.data.ImportTaskV2
	(*GcControlRequest)(nil),                       // 96: milvus.protov2.data.GcControlRequest
	(*CompactionTask)(nil),                         // 97: milvus.protov2.data.CompactionTask
	nil,                                            // 98: milvus.protov2.data.FlushResponse.ChannelCpsEntry
	nil,                                            // 99: milvus.protov2.data.GetSegmentInfoResponse.ChannelCheckpointEntry
	nil,                                            // 100: milvus.protov2.data.VchannelInfo.PartitionStatsVersionsEntry
	nil,                                            // 101: milvus.protov2.data.SegmentInfo.TextStatsLogsEntry
	nil,                                            // 102: milvus.protov2.data.SegmentInfo.JsonKeyStatsEntry
	nil,                                            // 103: milvus.protov2.data.PartitionImportStats.PartitionRowsEntry
	nil,                                            // 104: milvus.protov2.data.PartitionImportStats.PartitionDataSizeEntry
	nil,                                            // 105: milvus.protov2.data.ImportFileStats.HashedStatsEntry
	(*commonpb.MsgBase)(nil),                       // 106: milvus.protov2.common.MsgBase
	(*commonpb.Status)(nil),                        // 107: milvus.protov2.common.Status
	(commonpb.SegmentState)(0),                     // 108: milvus.protov2.common.SegmentState
	(*msgpb.MsgPosition)(nil),                      // 109: milvus.protov2.msg.MsgPosition
	(*internalpb.StringList)(nil),                  // 110: milvus.protov2.internal.StringList
	(*commonpb.KeyValuePair)(nil),                  // 111: milvus.protov2.common.KeyValuePair
	(*schemapb.CollectionSchema)(nil),              // 112: milvus.protov2.schema.CollectionSchema
	(*commonpb.KeyDataPair)(nil),                   // 113: milvus.protov2.common.KeyDataPair
	(*commonpb.SegmentStats)(nil),                  // 114: milvus.protov2.common.SegmentStats
	(*msgpb.DataNodeTtMsg)(nil),                    // 115: milvus.protov2.msg.DataNodeTtMsg
	(*internalpb.ImportFile)(nil),                  // 116: milvus.protov2.internal.ImportFile
	(internalpb.ImportJobState)(0),                 // 117: milvus.protov2.internal.ImportJobState
	(*schemapb.FieldSchema)(nil),                   // 118: milvus.protov2.schema.FieldSchema
	(*milvuspb.GetComponentStatesRequest)(nil),     // 119: milvus.protov2.milvus.GetComponentStatesRequest
	(*internalpb.GetTimeTickChannelRequest)(nil),   // 120: milvus.protov2.internal.GetTimeTickChannelRequest
	(*internalpb.GetStatisticsChannelRequest)(nil), // 121: milvus.protov2.internal.GetStatisticsChannelRequest
	(*milvuspb.GetFlushAllStateRequest)(nil),       // 122: milvus.protov2.milvus.GetFlushAllStateRequest
	(*internalpb.ShowConfigurationsRequest)(nil),   // 123: milvus.protov2.internal.ShowConfigurationsRequest
	(*milvuspb.GetMetricsRequest)(nil),             // 124: milvus.protov2.milvus.GetMetricsRequest
	(*milvuspb.ManualCompactionRequest)(nil),       // 125: milvus.protov2.milvus.ManualCompactionRequest
	(*milvuspb.GetCompactionStateRequest)(nil),     // 126: milvus.protov2.milvus.GetCompactionStateRequest
	(*milvuspb.GetCompactionPlansRequest)(nil),     // 127: milvus.protov2.milvus.GetCompactionPlansRequest
	(*milvuspb.CheckHealthRequest)(nil),            // 128: milvus.protov2.milvus.CheckHealthRequest
	(*indexpb.CreateIndexRequest)(nil),             // 129: milvus.protov2.index.CreateIndexRequest
	(*indexpb.AlterIndexRequest)(nil),              // 130: milvus.protov2.index.AlterIndexRequest
	(*indexpb.GetIndexStateRequest)(nil),           // 131: milvus.protov2.index.GetIndexStateRequest
	(*indexpb.GetSegmentIndexStateRequest)(nil),    // 132: milvus.protov2.index.GetSegmentIndexStateRequest
	(*indexpb.GetIndexInfoRequest)(nil),            // 133: milvus.protov2.index.GetIndexInfoRequest
	(*indexpb.DropIndexRequest)(nil),               // 134: milvus.protov2.index.DropIndexRequest
	(*indexpb.DescribeIndexRequest)(nil),           // 135: milvus.protov2.index.DescribeIndexRequest
	(*indexpb.GetIndexStatisticsRequest)(nil),      // 136: milvus.protov2.index.GetIndexStatisticsRequest
	(*indexpb.GetIndexBuildProgressRequest)(nil),   // 137: milvus.protov2.index.GetIndexBuildProgressRequest
	(*indexpb.ListIndexesRequest)(nil),             // 138: milvus.protov2.index.ListIndexesRequest
	(*internalpb.ImportRequestInternal)(nil),       // 139: milvus.protov2.internal.ImportRequestInternal
	(*internalpb.GetImportProgressRequest)(nil),    // 140: milvus.protov2.internal.GetImportProgressRequest
	(*internalpb.ListImportsRequestInternal)(nil),  // 141: milvus.protov2.internal.ListImportsRequestInternal
	(*milvuspb.ComponentStates)(nil),               // 142: milvus.protov2.milvus.ComponentStates
	(*milvuspb.StringResponse)(nil),                // 143: milvus.protov2.milvus.StringResponse
	(*milvuspb.GetFlushAllStateResponse)(nil),      // 144: milvus.protov2.milvus.GetFlushAllStateResponse
	(*internalpb.ShowConfigurationsResponse)(nil),  // 145: milvus.protov2.internal.ShowConfigurationsResponse
	(*milvuspb.GetMetricsResponse)(nil),            // 146: milvus.protov2.milvus.GetMetricsResponse
	(*milvuspb.ManualCompactionResponse)(nil),      // 147: milvus.protov2.milvus.ManualCompactionResponse
	(*milvuspb.GetCompactionStateResponse)(nil),    // 148: milvus.protov2.milvus.GetCompactionStateResponse
	(*milvuspb.GetCompactionPlansResponse)(nil),    // 149: milvus.protov2.milvus.GetCompactionPlansResponse
	(*milvuspb.GetFlushStateResponse)(nil),         // 150: milvus.protov2.milvus.GetFlushStateResponse
	(*milvuspb.CheckHealthResponse)(nil),           // 151: milvus.protov2.milvus.CheckHealthResponse
	(*indexpb.GetIndexStateResponse)(nil),          // 152: milvus.protov2.index.GetIndexStateResponse
	(*indexpb.GetSegmentIndexStateResponse)(nil),   // 153: milvus.protov2.index.GetSegmentIndexStateResponse
	(*indexpb.GetIndexInfoResponse)(nil),           // 154: milvus.protov2.index.GetIndexInfoResponse
	(*indexpb.DescribeIndexResponse)(nil),          // 155: milvus.protov2.index.DescribeIndexResponse
	(*indexpb.GetIndexStatisticsResponse)(nil),     // 156: milvus.protov2.index.GetIndexStatisticsResponse
	(*indexpb.GetIndexBuildProgressResponse)(nil),  // 157: milvus.protov2.index.GetIndexBuildProgressResponse
	(*indexpb.ListIndexesResponse)(nil),            // 158: milvus.protov2.index.ListIndexesResponse
	(*internalpb.ImportResponse)(nil),              // 159: milvus.protov2.internal.ImportResponse
	(*internalpb.GetImportProgressResponse)(nil),   // 160: milvus.protov2.internal.GetImportProgressResponse
	(*internalpb.ListImportsResponse)(nil),         // 161: milvus.protov2.internal.ListImportsResponse
}
var file_data_coord_proto_depIdxs = []int32{
	106, // 0: milvus.protov2.data.FlushRequest.base:type_name -> milvus.protov2.common.MsgBase
	107, // 1: milvus.protov2.data.FlushResponse.status:type_name -> milvus.protov2.common.Status
	98,  // 2: milvus.protov2.data.FlushResponse.channel_cps:type_name -> milvus.protov2.data.FlushResponse.ChannelCpsEntry
	106, // 3: milvus.protov2.data.FlushChannelsRequest.base:type_name -> milvus.protov2.common.MsgBase
	1,   // 4: milvus.protov2.data.SegmentIDRequest.level:type_name -> milvus.protov2.data.SegmentLevel
	11,  // 5: milvus.protov2.data.AssignSegmentIDRequest.segmentIDRequests:type_name -> milvus.protov2.data.SegmentIDRequest
	107, // 6: milvus.protov2.data.SegmentIDAssignment.status:type_name -> milvus.protov2.common.Status
	13,  // 7: milvus.protov2.data.AssignSegmentIDResponse.segIDAssignments:type_name -> milvus.protov2.data.SegmentIDAssignment
	107, // 8: milvus.protov2.data.AssignSegmentIDResponse.status:type_name -> milvus.protov2.common.Status
	106, // 9: milvus.protov2.data.GetSegmentStatesRequest.base:type_name -> milvus.protov2.common.MsgBase
	108, // 10: milvus.protov2.data.SegmentStateInfo.state:type_name -> milvus.protov2.common.SegmentState
	109, // 11: milvus.protov2.data.SegmentStateInfo.start_position:type_name -> milvus.protov2.msg.MsgPosition
	109, // 12: milvus.protov2.data.SegmentStateInfo.end_position:type_name -> milvus.protov2.msg.MsgPosition
	107, // 13: milvus.protov2.data.SegmentStateInfo.status:type_name -> milvus.protov2.common.Status
	107, // 14: milvus.protov2.data.GetSegmentStatesResponse.status:type_name -> milvus.protov2.common.Status
	16,  // 15: milvus.protov2.data.GetSegmentStatesResponse.states:type_name -> milvus.protov2.data.SegmentStateInfo
	106, // 16: milvus.protov2.data.GetSegmentInfoRequest.base:type_name -> milvus.protov2.common.MsgBase
	107, // 17: milvus.protov2.data.GetSegmentInfoResponse.status:type_name -> milvus.protov2.common.Status
	33,  // 18: milvus.protov2.data.GetSegmentInfoResponse.infos:type_name -> milvus.protov2.data.SegmentInfo
	99,  // 19: milvus.protov2.data.GetSegmentInfoResponse.channel_checkpoint:type_name -> milvus.protov2.data.GetSegmentInfoResponse.ChannelCheckpointEntry
	106, // 20: milvus.protov2.data.GetInsertBinlogPathsRequest.base:type_name -> milvus.protov2.common.MsgBase
	110, // 21: milvus.protov2.data.GetInsertBinlogPathsResponse.paths:type_name -> milvus.protov2.internal.StringList
	107, // 22: milvus.protov2.data.GetInsertBinlogPathsResponse.status:type_name -> milvus.protov2.common.Status
	106, // 23: milvus.protov2.data.GetCollectionStatisticsRequest.base:type_name -> milvus.protov2.common.MsgBase
	111, // 24: milvus.protov2.data.GetCollectionStatisticsResponse.stats:type_name -> milvus.protov2.common.KeyValuePair
	107, // 25: milvus.protov2.data.GetCollectionStatisticsResponse.status:type_name -> milvus.protov2.common.Status
	106, // 26: milvus.protov2.data.GetPartitionStatisticsRequest.base:type_name -> milvus.protov2.common.MsgBase
	111, // 27: milvus.protov2.data.GetPartitionStatisticsResponse.stats:type_name -> milvus.protov2.common.KeyValuePair
	107, // 28: milvus.protov2.data.GetPartitionStatisticsResponse.status:type_name -> milvus.protov2.common.Status
	109, // 29: milvus.protov2.data.VchannelInfo.seek_position:type_name -> milvus.protov2.msg.MsgPosition
	33,  // 30: milvus.protov2.data.VchannelInfo.unflushedSegments:type_name -> milvus.protov2.data.SegmentInfo
	33,  // 31: milvus.protov2.data.VchannelInfo.flushedSegments:type_name -> milvus.protov2.data.SegmentInfo
	33,  // 32: milvus.protov2.data.VchannelInfo.dropped_segments:type_name -> milvus.protov2.data.SegmentInfo
	33,  // 33: milvus.protov2.data.VchannelInfo.indexed_segments:type_name -> milvus.protov2.data.SegmentInfo
	100, // 34: milvus.protov2.data.VchannelInfo.partition_stats_versions:type_name -> milvus.protov2.data.VchannelInfo.PartitionStatsVersionsEntry
	106, // 35: milvus.protov2.data.WatchDmChannelsRequest.base:type_name -> milvus.protov2.common.MsgBase
	27,  // 36: milvus.protov2.data.WatchDmChannelsRequest.vchannels:type_name -> milvus.protov2.data.VchannelInfo
	106, // 37: milvus.protov2.data.FlushSegmentsRequest.base:type_name -> milvus.protov2.common.MsgBase
	106, // 38: milvus.protov2.data.SegmentMsg.base:type_name -> milvus.protov2.common.MsgBase
	33,  // 39: milvus.protov2.data.SegmentMsg.segment:type_name -> milvus.protov2.data.SegmentInfo
	108, // 40: milvus.protov2.data.SegmentInfo.state:type_name -> milvus.protov2.common.SegmentState
	109, // 41: milvus.protov2.data.SegmentInfo.start_position:type_name -> milvus.protov2.msg.MsgPosition
	109, // 42: milvus.protov2.data.SegmentInfo.dml_position:type_name -> milvus.protov2.msg.MsgPosition
	41,  // 43: milvus.protov2.data.SegmentInfo.binlogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 44: milvus.protov2.data.SegmentInfo.statslogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 45: milvus.protov2.data.SegmentInfo.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	1,   // 46: milvus.protov2.data.SegmentInfo.level:type_name -> milvus.protov2.data.SegmentLevel
	1,   // 47: milvus.protov2.data.SegmentInfo.last_level:type_name -> milvus.protov2.data.SegmentLevel
	101, // 48: milvus.protov2.data.SegmentInfo.textStatsLogs:type_name -> milvus.protov2.data.SegmentInfo.TextStatsLogsEntry
	41,  // 49: milvus.protov2.data.SegmentInfo.bm25statslogs:type_name -> milvus.protov2.data.FieldBinlog
	102, // 50: milvus.protov2.data.SegmentInfo.jsonKeyStats:type_name -> milvus.protov2.data.SegmentInfo.JsonKeyStatsEntry
	109, // 51: milvus.protov2.data.SegmentStartPosition.start_position:type_name -> milvus.protov2.msg.MsgPosition
	106, // 52: milvus.protov2.data.SaveBinlogPathsRequest.base:type_name -> milvus.protov2.common.MsgBase
	41,  // 53: milvus.protov2.data.SaveBinlogPathsRequest.field2BinlogPaths:type_name -> milvus.protov2.data.FieldBinlog
	36,  // 54: milvus.protov2.data.SaveBinlogPathsRequest.checkPoints:type_name -> milvus.protov2.data.CheckPoint
	34,  // 55: milvus.protov2.data.SaveBinlogPathsRequest.start_positions:type_name -> milvus.protov2.data.SegmentStartPosition
	41,  // 56: milvus.protov2.data.SaveBinlogPathsRequest.field2StatslogPaths:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 57: milvus.protov2.data.SaveBinlogPathsRequest.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	1,   // 58: milvus.protov2.data.SaveBinlogPathsRequest.seg_level:type_name -> milvus.protov2.data.SegmentLevel
	109, // 59: milvus.protov2.data.CheckPoint.position:type_name -> milvus.protov2.msg.MsgPosition
	2,   // 60: milvus.protov2.data.ChannelStatus.state:type_name -> milvus.protov2.data.ChannelWatchState
	38,  // 61: milvus.protov2.data.DataNodeInfo.channels:type_name -> milvus.protov2.data.ChannelStatus
	41,  // 62: milvus.protov2.data.SegmentBinlogs.fieldBinlogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 63: milvus.protov2.data.SegmentBinlogs.statslogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 64: milvus.protov2.data.SegmentBinlogs.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	42,  // 65: milvus.protov2.data.FieldBinlog.binlogs:type_name -> milvus.protov2.data.Binlog
	107, // 66: milvus.protov2.data.GetRecoveryInfoResponse.status:type_name -> milvus.protov2.common.Status
	27,  // 67: milvus.protov2.data.GetRecoveryInfoResponse.channels:type_name -> milvus.protov2.data.VchannelInfo
	40,  // 68: milvus.protov2.data.GetRecoveryInfoResponse.binlogs:type_name -> milvus.protov2.data.SegmentBinlogs
	106, // 69: milvus.protov2.data.GetRecoveryInfoRequest.base:type_name -> milvus.protov2.common.MsgBase
	107, // 70: milvus.protov2.data.GetRecoveryInfoResponseV2.status:type_name -> milvus.protov2.common.Status
	27,  // 71: milvus.protov2.data.GetRecoveryInfoResponseV2.channels:type_name -> milvus.protov2.data.VchannelInfo
	33,  // 72: milvus.protov2.data.GetRecoveryInfoResponseV2.segments:type_name -> milvus.protov2.data.SegmentInfo
	106, // 73: milvus.protov2.data.GetRecoveryInfoRequestV2.base:type_name -> milvus.protov2.common.MsgBase
	106, // 74: milvus.protov2.data.GetSegmentsByStatesRequest.base:type_name -> milvus.protov2.common.MsgBase
	108, // 75: milvus.protov2.data.GetSegmentsByStatesRequest.states:type_name -> milvus.protov2.common.SegmentState
	107, // 76: milvus.protov2.data.GetSegmentsByStatesResponse.status:type_name -> milvus.protov2.common.Status
	106, // 77: milvus.protov2.data.GetFlushedSegmentsRequest.base:type_name -> milvus.protov2.common.MsgBase
	107, // 78: milvus.protov2.data.GetFlushedSegmentsResponse.status:type_name -> milvus.protov2.common.Status
	106, // 79: milvus.protov2.data.SegmentFlushCompletedMsg.base:type_name -> milvus.protov2.common.MsgBase
	33,  // 80: milvus.protov2.data.SegmentFlushCompletedMsg.segment:type_name -> milvus.protov2.data.SegmentInfo
	27,  // 81: milvus.protov2.data.ChannelWatchInfo.vchan:type_name -> milvus.protov2.data.VchannelInfo
	2,   // 82: milvus.protov2.data.ChannelWatchInfo.state:type_name -> milvus.protov2.data.ChannelWatchState
	112, // 83: milvus.protov2.data.ChannelWatchInfo.schema:type_name -> milvus.protov2.schema.CollectionSchema
	106, // 84: milvus.protov2.data.CompactionStateRequest.base:type_name -> milvus.protov2.common.MsgBase
	41,  // 85: milvus.protov2.data.SyncSegmentsRequest.stats_logs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 86: milvus.protov2.data.CompactionSegmentBinlogs.fieldBinlogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 87: milvus.protov2.data.CompactionSegmentBinlogs.field2StatslogPaths:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 88: milvus.protov2.data.CompactionSegmentBinlogs.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	1,   // 89: milvus.protov2.data.CompactionSegmentBinlogs.level:type_name -> milvus.protov2.data.SegmentLevel
	55,  // 90: milvus.protov2.data.CompactionPlan.segmentBinlogs:type_name -> milvus.protov2.data.CompactionSegmentBinlogs
	3,   // 91: milvus.protov2.data.CompactionPlan.type:type_name -> milvus.protov2.data.CompactionType
	112, // 92: milvus.protov2.data.CompactionPlan.schema:type_name -> milvus.protov2.schema.CollectionSchema
	41,  // 93: milvus.protov2.data.CompactionSegment.insert_logs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 94: milvus.protov2.data.CompactionSegment.field2StatslogPaths:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 95: milvus.protov2.data.CompactionSegment.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	6,   // 96: milvus.protov2.data.CompactionPlanResult.state:type_name -> milvus.protov2.data.CompactionTaskState
	57,  // 97: milvus.protov2.data.CompactionPlanResult.segments:type_name -> milvus.protov2.data.CompactionSegment
	3,   // 98: milvus.protov2.data.CompactionPlanResult.type:type_name -> milvus.protov2.data.CompactionType
	107, // 99: milvus.protov2.data.CompactionStateResponse.status:type_name -> milvus.protov2.common.Status
	58,  // 100: milvus.protov2.data.CompactionStateResponse.results:type_name -> milvus.protov2.data.CompactionPlanResult
	113, // 101: milvus.protov2.data.WatchChannelsRequest.start_positions:type_name -> milvus.protov2.common.KeyDataPair
	112, // 102: milvus.protov2.data.WatchChannelsRequest.schema:type_name -> milvus.protov2.schema.CollectionSchema
	107, // 103: milvus.protov2.data.WatchChannelsResponse.status:type_name -> milvus.protov2.common.Status
	106, // 104: milvus.protov2.data.SetSegmentStateRequest.base:type_name -> milvus.protov2.common.MsgBase
	108, // 105: milvus.protov2.data.SetSegmentStateRequest.new_state:type_name -> milvus.protov2.common.SegmentState
	107, // 106: milvus.protov2.data.SetSegmentStateResponse.status:type_name -> milvus.protov2.common.Status
	106, // 107: milvus.protov2.data.DropVirtualChannelRequest.base:type_name -> milvus.protov2.common.MsgBase
	66,  // 108: milvus.protov2.data.DropVirtualChannelRequest.segments:type_name -> milvus.protov2.data.DropVirtualChannelSegment
	41,  // 109: milvus.protov2.data.DropVirtualChannelSegment.field2BinlogPaths:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 110: milvus.protov2.data.DropVirtualChannelSegment.field2StatslogPaths:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 111: milvus.protov2.data.DropVirtualChannelSegment.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	109, // 112: milvus.protov2.data.DropVirtualChannelSegment.startPosition:type_name -> milvus.protov2.msg.MsgPosition
	109, // 113: milvus.protov2.data.DropVirtualChannelSegment.checkPoint:type_name -> milvus.protov2.msg.MsgPosition
	107, // 114: milvus.protov2.data.DropVirtualChannelResponse.status:type_name -> milvus.protov2.common.Status
	106, // 115: milvus.protov2.data.UpdateSegmentStatisticsRequest.base:type_name -> milvus.protov2.common.MsgBase
	114, // 116: milvus.protov2.data.UpdateSegmentStatisticsRequest.stats:type_name -> milvus.protov2.common.SegmentStats
	106, // 117: milvus.protov2.data.UpdateChannelCheckpointRequest.base:type_name -> milvus.protov2.common.MsgBase
	109, // 118: milvus.protov2.data.UpdateChannelCheckpointRequest.position:type_name -> milvus.protov2.msg.MsgPosition
	109, // 119: milvus.protov2.data.UpdateChannelCheckpointRequest.channel_checkpoints:type_name -> milvus.protov2.msg.MsgPosition
	106, // 120: milvus.protov2.data.ResendSegmentStatsRequest.base:type_name -> milvus.protov2.common.MsgBase
	107, // 121: milvus.protov2.data.ResendSegmentStatsResponse.status:type_name -> milvus.protov2.common.Status
	106, // 122: milvus.protov2.data.MarkSegmentsDroppedRequest.base:type_name -> milvus.protov2.common.MsgBase
	112, // 123: milvus.protov2.data.AlterCollectionRequest.schema:type_name -> milvus.protov2.schema.CollectionSchema
	113, // 124: milvus.protov2.data.AlterCollectionRequest.start_positions:type_name -> milvus.protov2.common.KeyDataPair
	111, // 125: milvus.protov2.data.AlterCollectionRequest.properties:type_name -> milvus.protov2.common.KeyValuePair
	107, // 126: milvus.protov2.data.GcConfirmResponse.status:type_name -> milvus.protov2.common.Status
	106, // 127: milvus.protov2.data.ReportDataNodeTtMsgsRequest.base:type_name -> milvus.protov2.common.MsgBase
	115, // 128: milvus.protov2.data.ReportDataNodeTtMsgsRequest.msgs:type_name -> milvus.protov2.msg.DataNodeTtMsg
	52,  // 129: milvus.protov2.data.ChannelOperationsRequest.infos:type_name -> milvus.protov2.data.ChannelWatchInfo
	107, // 130: milvus.protov2.data.ChannelOperationProgressResponse.status:type_name -> milvus.protov2.common.Status
	2,   // 131: milvus.protov2.data.ChannelOperationProgressResponse.state:type_name -> milvus.protov2.data.ChannelWatchState
	112, // 132: milvus.protov2.data.PreImportRequest.schema:type_name -> milvus.protov2.schema.CollectionSchema
	116, // 133: milvus.protov2.data.PreImportRequest.import_files:type_name -> milvus.protov2.internal.ImportFile
	111, // 134: milvus.protov2.data.PreImportRequest.options:type_name -> milvus.protov2.common.KeyValuePair
	112, // 135: milvus.protov2.data.ImportRequest.schema:type_name -> milvus.protov2.schema.CollectionSchema
	116, // 136: milvus.protov2.data.ImportRequest.files:type_name -> milvus.protov2.internal.ImportFile
	111, // 137: milvus.protov2.data.ImportRequest.options:type_name -> milvus.protov2.common.KeyValuePair
	82,  // 138: milvus.protov2.data.ImportRequest.autoID_range:type_name -> milvus.protov2.data.autoIDRange
	83,  // 139: milvus.protov2.data.ImportRequest.request_segments:type_name -> milvus.protov2.data.ImportRequestSegment
	103, // 140: milvus.protov2.data.PartitionImportStats.partition_rows:type_name -> milvus.protov2.data.PartitionImportStats.PartitionRowsEntry
	104, // 141: milvus.protov2.data.PartitionImportStats.partition_data_size:type_name -> milvus.protov2.data.PartitionImportStats.PartitionDataSizeEntry
	116, // 142: milvus.protov2.data.ImportFileStats.import_file:type_name -> milvus.protov2.internal.ImportFile
	105, // 143: milvus.protov2.data.ImportFileStats.hashed_stats:type_name -> milvus.protov2.data.ImportFileStats.HashedStatsEntry
	107, // 144: milvus.protov2.data.QueryPreImportResponse.status:type_name -> milvus.protov2.common.Status
	4,   // 145: milvus.protov2.data.QueryPreImportResponse.state:type_name -> milvus.protov2.data.ImportTaskStateV2
	87,  // 146: milvus.protov2.data.QueryPreImportResponse.file_stats:type_name -> milvus.protov2.data.ImportFileStats
	41,  // 147: milvus.protov2.data.ImportSegmentInfo.binlogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 148: milvus.protov2.data.ImportSegmentInfo.statslogs:type_name -> milvus.protov2.data.FieldBinlog
	41,  // 149: milvus.protov2.data.ImportSegmentInfo.deltalogs:type_name -> milvus.protov2.data.FieldBinlog
	107, // 150: milvus.protov2.data.QueryImportResponse.status:type_name -> milvus.protov2.common.Status
	4,   // 151: milvus.protov2.data.QueryImportResponse.state:type_name -> milvus.protov2.data.ImportTaskStateV2
	90,  // 152: milvus.protov2.data.QueryImportResponse.import_segments_info:type_name -> milvus.protov2.data.ImportSegmentInfo
	112, // 153: milvus.protov2.data.ImportJob.schema:type_name -> milvus.protov2.schema.CollectionSchema
	117, // 154: milvus.protov2.data.ImportJob.state:type_name -> milvus.protov2.internal.ImportJobState
	116, // 155: milvus.protov2.data.ImportJob.files:type_name -> milvus.protov2.internal.ImportFile
	111, // 156: milvus.protov2.data.ImportJob.options:type_name -> milvus.protov2.common.KeyValuePair
	4,   // 157: milvus.protov2.data.PreImportTask.state:type_name -> milvus.protov2.data.ImportTaskStateV2
	87,  // 158: milvus.protov2.data.PreImportTask.file_stats:type_name -> milvus.protov2.data.ImportFileStats
	4,   // 159: milvus.protov2.data.ImportTaskV2.state:type_name -> milvus.protov2.data.ImportTaskStateV2
	87,  // 160: milvus.protov2.data.ImportTaskV2.file_stats:type_name -> milvus.protov2.data.ImportFileStats
	106, // 161: milvus.protov2.data.GcControlRequest.base:type_name -> milvus.protov2.common.MsgBase
	5,   // 162: milvus.protov2.data.GcControlRequest.command:type_name -> milvus.protov2.data.GcCommand
	111, // 163: milvus.protov2.data.GcControlRequest.params:type_name -> milvus.protov2.common.KeyValuePair
	3,   // 164: milvus.protov2.data.CompactionTask.type:type_name -> milvus.protov2.data.CompactionType
	6,   // 165: milvus.protov2.data.CompactionTask.state:type_name -> milvus.protov2.data.CompactionTaskState
	109, // 166: milvus.protov2.data.CompactionTask.pos:type_name -> milvus.protov2.msg.MsgPosition
	112, // 167: milvus.protov2.data.CompactionTask.schema:type_name -> milvus.protov2.schema.CollectionSchema
	118, // 168: milvus.protov2.data.CompactionTask.clustering_key_field:type_name -> milvus.protov2.schema.FieldSchema
	109, // 169: milvus.protov2.data.FlushResponse.ChannelCpsEntry.value:type_name -> milvus.protov2.msg.MsgPosition
	109, // 170: milvus.protov2.data.GetSegmentInfoResponse.ChannelCheckpointEntry.value:type_name -> milvus.protov2.msg.MsgPosition
	31,  // 171: milvus.protov2.data.SegmentInfo.TextStatsLogsEntry.value:type_name -> milvus.protov2.data.TextIndexStats
	32,  // 172: milvus.protov2.data.SegmentInfo.JsonKeyStatsEntry.value:type_name -> milvus.protov2.data.JsonKeyStats
	86,  // 173: milvus.protov2.data.ImportFileStats.HashedStatsEntry.value:type_name -> milvus.protov2.data.PartitionImportStats
	119, // 174: milvus.protov2.data.DataCoord.GetComponentStates:input_type -> milvus.protov2.milvus.GetComponentStatesRequest
	120, // 175: milvus.protov2.data.DataCoord.GetTimeTickChannel:input_type -> milvus.protov2.internal.GetTimeTickChannelRequest
	121, // 176: milvus.protov2.data.DataCoord.GetStatisticsChannel:input_type -> milvus.protov2.internal.GetStatisticsChannelRequest
	8,   // 177: milvus.protov2.data.DataCoord.Flush:input_type -> milvus.protov2.data.FlushRequest
	12,  // 178: milvus.protov2.data.DataCoord.AssignSegmentID:input_type -> milvus.protov2.data.AssignSegmentIDRequest
	18,  // 179: milvus.protov2.data.DataCoord.GetSegmentInfo:input_type -> milvus.protov2.data.GetSegmentInfoRequest
	15,  // 180: milvus.protov2.data.DataCoord.GetSegmentStates:input_type -> milvus.protov2.data.GetSegmentStatesRequest
	20,  // 181: milvus.protov2.data.DataCoord.GetInsertBinlogPaths:input_type -> milvus.protov2.data.GetInsertBinlogPathsRequest
	22,  // 182: milvus.protov2.data.DataCoord.GetCollectionStatistics:input_type -> milvus.protov2.data.GetCollectionStatisticsRequest
	24,  // 183: milvus.protov2.data.DataCoord.GetPartitionStatistics:input_type -> milvus.protov2.data.GetPartitionStatisticsRequest
	26,  // 184: milvus.protov2.data.DataCoord.GetSegmentInfoChannel:input_type -> milvus.protov2.data.GetSegmentInfoChannelRequest
	35,  // 185: milvus.protov2.data.DataCoord.SaveBinlogPaths:input_type -> milvus.protov2.data.SaveBinlogPathsRequest
	44,  // 186: milvus.protov2.data.DataCoord.GetRecoveryInfo:input_type -> milvus.protov2.data.GetRecoveryInfoRequest
	46,  // 187: milvus.protov2.data.DataCoord.GetRecoveryInfoV2:input_type -> milvus.protov2.data.GetRecoveryInfoRequestV2
	49,  // 188: milvus.protov2.data.DataCoord.GetFlushedSegments:input_type -> milvus.protov2.data.GetFlushedSegmentsRequest
	47,  // 189: milvus.protov2.data.DataCoord.GetSegmentsByStates:input_type -> milvus.protov2.data.GetSegmentsByStatesRequest
	122, // 190: milvus.protov2.data.DataCoord.GetFlushAllState:input_type -> milvus.protov2.milvus.GetFlushAllStateRequest
	123, // 191: milvus.protov2.data.DataCoord.ShowConfigurations:input_type -> milvus.protov2.internal.ShowConfigurationsRequest
	124, // 192: milvus.protov2.data.DataCoord.GetMetrics:input_type -> milvus.protov2.milvus.GetMetricsRequest
	125, // 193: milvus.protov2.data.DataCoord.ManualCompaction:input_type -> milvus.protov2.milvus.ManualCompactionRequest
	126, // 194: milvus.protov2.data.DataCoord.GetCompactionState:input_type -> milvus.protov2.milvus.GetCompactionStateRequest
	127, // 195: milvus.protov2.data.DataCoord.GetCompactionStateWithPlans:input_type -> milvus.protov2.milvus.GetCompactionPlansRequest
	61,  // 196: milvus.protov2.data.DataCoord.WatchChannels:input_type -> milvus.protov2.data.WatchChannelsRequest
	78,  // 197: milvus.protov2.data.DataCoord.GetFlushState:input_type -> milvus.protov2.data.GetFlushStateRequest
	65,  // 198: milvus.protov2.data.DataCoord.DropVirtualChannel:input_type -> milvus.protov2.data.DropVirtualChannelRequest
	63,  // 199: milvus.protov2.data.DataCoord.SetSegmentState:input_type -> milvus.protov2.data.SetSegmentStateRequest
	68,  // 200: milvus.protov2.data.DataCoord.UpdateSegmentStatistics:input_type -> milvus.protov2.data.UpdateSegmentStatisticsRequest
	69,  // 201: milvus.protov2.data.DataCoord.UpdateChannelCheckpoint:input_type -> milvus.protov2.data.UpdateChannelCheckpointRequest
	72,  // 202: milvus.protov2.data.DataCoord.MarkSegmentsDropped:input_type -> milvus.protov2.data.MarkSegmentsDroppedRequest
	74,  // 203: milvus.protov2.data.DataCoord.BroadcastAlteredCollection:input_type -> milvus.protov2.data.AlterCollectionRequest
	128, // 204: milvus.protov2.data.DataCoord.CheckHealth:input_type -> milvus.protov2.milvus.CheckHealthRequest
	129, // 205: milvus.protov2.data.DataCoord.CreateIndex:input_type -> milvus.protov2.index.CreateIndexRequest
	130, // 206: milvus.protov2.data.DataCoord.AlterIndex:input_type -> milvus.protov2.index.AlterIndexRequest
	131, // 207: milvus.protov2.data.DataCoord.GetIndexState:input_type -> milvus.protov2.index.GetIndexStateRequest
	132, // 208: milvus.protov2.data.DataCoord.GetSegmentIndexState:input_type -> milvus.protov2.index.GetSegmentIndexStateRequest
	133, // 209: milvus.protov2.data.DataCoord.GetIndexInfos:input_type -> milvus.protov2.index.GetIndexInfoRequest
	134, // 210: milvus.protov2.data.DataCoord.DropIndex:input_type -> milvus.protov2.index.DropIndexRequest
	135, // 211: milvus.protov2.data.DataCoord.DescribeIndex:input_type -> milvus.protov2.index.DescribeIndexRequest
	136, // 212: milvus.protov2.data.DataCoord.GetIndexStatistics:input_type -> milvus.protov2.index.GetIndexStatisticsRequest
	137, // 213: milvus.protov2.data.DataCoord.GetIndexBuildProgress:input_type -> milvus.protov2.index.GetIndexBuildProgressRequest
	138, // 214: milvus.protov2.data.DataCoord.ListIndexes:input_type -> milvus.protov2.index.ListIndexesRequest
	75,  // 215: milvus.protov2.data.DataCoord.GcConfirm:input_type -> milvus.protov2.data.GcConfirmRequest
	77,  // 216: milvus.protov2.data.DataCoord.ReportDataNodeTtMsgs:input_type -> milvus.protov2.data.ReportDataNodeTtMsgsRequest
	96,  // 217: milvus.protov2.data.DataCoord.GcControl:input_type -> milvus.protov2.data.GcControlRequest
	139, // 218: milvus.protov2.data.DataCoord.ImportV2:input_type -> milvus.protov2.internal.ImportRequestInternal
	140, // 219: milvus.protov2.data.DataCoord.GetImportProgress:input_type -> milvus.protov2.internal.GetImportProgressRequest
	141, // 220: milvus.protov2.data.DataCoord.ListImports:input_type -> milvus.protov2.internal.ListImportsRequestInternal
	119, // 221: milvus.protov2.data.DataNode.GetComponentStates:input_type -> milvus.protov2.milvus.GetComponentStatesRequest
	121, // 222: milvus.protov2.data.DataNode.GetStatisticsChannel:input_type -> milvus.protov2.internal.GetStatisticsChannelRequest
	28,  // 223: milvus.protov2.data.DataNode.WatchDmChannels:input_type -> milvus.protov2.data.WatchDmChannelsRequest
	29,  // 224: milvus.protov2.data.DataNode.FlushSegments:input_type -> milvus.protov2.data.FlushSegmentsRequest
	123, // 225: milvus.protov2.data.DataNode.ShowConfigurations:input_type -> milvus.protov2.internal.ShowConfigurationsRequest
	124, // 226: milvus.protov2.data.DataNode.GetMetrics:input_type -> milvus.protov2.milvus.GetMetricsRequest
	56,  // 227: milvus.protov2.data.DataNode.Compaction:input_type -> milvus.protov2.data.CompactionPlan
	53,  // 228: milvus.protov2.data.DataNode.GetCompactionState:input_type -> milvus.protov2.data.CompactionStateRequest
	54,  // 229: milvus.protov2.data.DataNode.SyncSegments:input_type -> milvus.protov2.data.SyncSegmentsRequest
	70,  // 230: milvus.protov2.data.DataNode.ResendSegmentStats:input_type -> milvus.protov2.data.ResendSegmentStatsRequest
	10,  // 231: milvus.protov2.data.DataNode.FlushChannels:input_type -> milvus.protov2.data.FlushChannelsRequest
	79,  // 232: milvus.protov2.data.DataNode.NotifyChannelOperation:input_type -> milvus.protov2.data.ChannelOperationsRequest
	52,  // 233: milvus.protov2.data.DataNode.CheckChannelOperationProgress:input_type -> milvus.protov2.data.ChannelWatchInfo
	81,  // 234: milvus.protov2.data.DataNode.PreImport:input_type -> milvus.protov2.data.PreImportRequest
	84,  // 235: milvus.protov2.data.DataNode.ImportV2:input_type -> milvus.protov2.data.ImportRequest
	85,  // 236: milvus.protov2.data.DataNode.QueryPreImport:input_type -> milvus.protov2.data.QueryPreImportRequest
	89,  // 237: milvus.protov2.data.DataNode.QueryImport:input_type -> milvus.protov2.data.QueryImportRequest
	92,  // 238: milvus.protov2.data.DataNode.DropImport:input_type -> milvus.protov2.data.DropImportRequest
	142, // 239: milvus.protov2.data.DataCoord.GetComponentStates:output_type -> milvus.protov2.milvus.ComponentStates
	143, // 240: milvus.protov2.data.DataCoord.GetTimeTickChannel:output_type -> milvus.protov2.milvus.StringResponse
	143, // 241: milvus.protov2.data.DataCoord.GetStatisticsChannel:output_type -> milvus.protov2.milvus.StringResponse
	9,   // 242: milvus.protov2.data.DataCoord.Flush:output_type -> milvus.protov2.data.FlushResponse
	14,  // 243: milvus.protov2.data.DataCoord.AssignSegmentID:output_type -> milvus.protov2.data.AssignSegmentIDResponse
	19,  // 244: milvus.protov2.data.DataCoord.GetSegmentInfo:output_type -> milvus.protov2.data.GetSegmentInfoResponse
	17,  // 245: milvus.protov2.data.DataCoord.GetSegmentStates:output_type -> milvus.protov2.data.GetSegmentStatesResponse
	21,  // 246: milvus.protov2.data.DataCoord.GetInsertBinlogPaths:output_type -> milvus.protov2.data.GetInsertBinlogPathsResponse
	23,  // 247: milvus.protov2.data.DataCoord.GetCollectionStatistics:output_type -> milvus.protov2.data.GetCollectionStatisticsResponse
	25,  // 248: milvus.protov2.data.DataCoord.GetPartitionStatistics:output_type -> milvus.protov2.data.GetPartitionStatisticsResponse
	143, // 249: milvus.protov2.data.DataCoord.GetSegmentInfoChannel:output_type -> milvus.protov2.milvus.StringResponse
	107, // 250: milvus.protov2.data.DataCoord.SaveBinlogPaths:output_type -> milvus.protov2.common.Status
	43,  // 251: milvus.protov2.data.DataCoord.GetRecoveryInfo:output_type -> milvus.protov2.data.GetRecoveryInfoResponse
	45,  // 252: milvus.protov2.data.DataCoord.GetRecoveryInfoV2:output_type -> milvus.protov2.data.GetRecoveryInfoResponseV2
	50,  // 253: milvus.protov2.data.DataCoord.GetFlushedSegments:output_type -> milvus.protov2.data.GetFlushedSegmentsResponse
	48,  // 254: milvus.protov2.data.DataCoord.GetSegmentsByStates:output_type -> milvus.protov2.data.GetSegmentsByStatesResponse
	144, // 255: milvus.protov2.data.DataCoord.GetFlushAllState:output_type -> milvus.protov2.milvus.GetFlushAllStateResponse
	145, // 256: milvus.protov2.data.DataCoord.ShowConfigurations:output_type -> milvus.protov2.internal.ShowConfigurationsResponse
	146, // 257: milvus.protov2.data.DataCoord.GetMetrics:output_type -> milvus.protov2.milvus.GetMetricsResponse
	147, // 258: milvus.protov2.data.DataCoord.ManualCompaction:output_type -> milvus.protov2.milvus.ManualCompactionResponse
	148, // 259: milvus.protov2.data.DataCoord.GetCompactionState:output_type -> milvus.protov2.milvus.GetCompactionStateResponse
	149, // 260: milvus.protov2.data.DataCoord.GetCompactionStateWithPlans:output_type -> milvus.protov2.milvus.GetCompactionPlansResponse
	62,  // 261: milvus.protov2.data.DataCoord.WatchChannels:output_type -> milvus.protov2.data.WatchChannelsResponse
	150, // 262: milvus.protov2.data.DataCoord.GetFlushState:output_type -> milvus.protov2.milvus.GetFlushStateResponse
	67,  // 263: milvus.protov2.data.DataCoord.DropVirtualChannel:output_type -> milvus.protov2.data.DropVirtualChannelResponse
	64,  // 264: milvus.protov2.data.DataCoord.SetSegmentState:output_type -> milvus.protov2.data.SetSegmentStateResponse
	107, // 265: milvus.protov2.data.DataCoord.UpdateSegmentStatistics:output_type -> milvus.protov2.common.Status
	107, // 266: milvus.protov2.data.DataCoord.UpdateChannelCheckpoint:output_type -> milvus.protov2.common.Status
	107, // 267: milvus.protov2.data.DataCoord.MarkSegmentsDropped:output_type -> milvus.protov2.common.Status
	107, // 268: milvus.protov2.data.DataCoord.BroadcastAlteredCollection:output_type -> milvus.protov2.common.Status
	151, // 269: milvus.protov2.data.DataCoord.CheckHealth:output_type -> milvus.protov2.milvus.CheckHealthResponse
	107, // 270: milvus.protov2.data.DataCoord.CreateIndex:output_type -> milvus.protov2.common.Status
	107, // 271: milvus.protov2.data.DataCoord.AlterIndex:output_type -> milvus.protov2.common.Status
	152, // 272: milvus.protov2.data.DataCoord.GetIndexState:output_type -> milvus.protov2.index.GetIndexStateResponse
	153, // 273: milvus.protov2.data.DataCoord.GetSegmentIndexState:output_type -> milvus.protov2.index.GetSegmentIndexStateResponse
	154, // 274: milvus.protov2.data.DataCoord.GetIndexInfos:output_type -> milvus.protov2.index.GetIndexInfoResponse
	107, // 275: milvus.protov2.data.DataCoord.DropIndex:output_type -> milvus.protov2.common.Status
	155, // 276: milvus.protov2.data.DataCoord.DescribeIndex:output_type -> milvus.protov2.index.DescribeIndexResponse
	156, // 277: milvus.protov2.data.DataCoord.GetIndexStatistics:output_type -> milvus.protov2.index.GetIndexStatisticsResponse
	157, // 278: milvus.protov2.data.DataCoord.GetIndexBuildProgress:output_type -> milvus.protov2.index.GetIndexBuildProgressResponse
	158, // 279: milvus.protov2.data.DataCoord.ListIndexes:output_type -> milvus.protov2.index.ListIndexesResponse
	76,  // 280: milvus.protov2.data.DataCoord.GcConfirm:output_type -> milvus.protov2.data.GcConfirmResponse
	107, // 281: milvus.protov2.data.DataCoord.ReportDataNodeTtMsgs:output_type -> milvus.protov2.common.Status
	107, // 282: milvus.protov2.data.DataCoord.GcControl:output_type -> milvus.protov2.common.Status
	159, // 283: milvus.protov2.data.DataCoord.ImportV2:output_type -> milvus.protov2.internal.ImportResponse
	160, // 284: milvus.protov2.data.DataCoord.GetImportProgress:output_type -> milvus.protov2.internal.GetImportProgressResponse
	161, // 285: milvus.protov2.data.DataCoord.ListImports:output_type -> milvus.protov2.internal.ListImportsResponse
	142, // 286: milvus.protov2.data.DataNode.GetComponentStates:output_type -> milvus.protov2.milvus.ComponentStates
	143, // 287: milvus.protov2.data.DataNode.GetStatisticsChannel:output_type -> milvus.protov2.milvus.StringResponse
	107, // 288: milvus.protov2.data.DataNode.WatchDmChannels:output_type -> milvus.protov2.common.Status
	107, // 289: milvus.protov2.data.DataNode.FlushSegments:output_type -> milvus.protov2.common.Status
	145, // 290: milvus.protov2.data.DataNode.ShowConfigurations:output_type -> milvus.protov2.internal.ShowConfigurationsResponse
	146, // 291: milvus.protov2.data.DataNode.GetMetrics:output_type -> milvus.protov2.milvus.GetMetricsResponse
	107, // 292: milvus.protov2.data.DataNode.Compaction:output_type -> milvus.protov2.common.Status
	59,  // 293: milvus.protov2.data.DataNode.GetCompactionState:output_type -> milvus.protov2.data.CompactionStateResponse
	107, // 294: milvus.protov2.data.DataNode.SyncSegments:output_type -> milvus.protov2.common.Status
	71,  // 295: milvus.protov2.data.DataNode.ResendSegmentStats:output_type -> milvus.protov2.data.ResendSegmentStatsResponse
	107, // 296: milvus.protov2.data.DataNode.FlushChannels:output_type -> milvus.protov2.common.Status
	107, // 297: milvus.protov2.data.DataNode.NotifyChannelOperation:output_type -> milvus.protov2.common.Status
	80,  // 298: milvus.protov2.data.DataNode.CheckChannelOperationProgress:output_type -> milvus.protov2.data.ChannelOperationProgressResponse
	107, // 299: milvus.protov2.data.DataNode.PreImport:output_type -> milvus.protov2.common.Status
	107, // 300: milvus.protov2.data.DataNode.ImportV2:output_type -> milvus.protov2.common.Status
	88,  // 301: milvus.protov2.data.DataNode.QueryPreImport:output_type -> milvus.protov2.data.QueryPreImportResponse
	91,  // 302: milvus.protov2.data.DataNode.QueryImport:output_type -> milvus.protov2.data.QueryImportResponse
	107, // 303: milvus.protov2.data.DataNode.DropImport:output_type -> milvus.protov2.common.Status
	239, // [239:304] is the sub-list for method output_type
	174, // [174:239] is the sub-list for method input_type
	174, // [174:174] is the sub-list for extension type_name
	174, // [174:174] is the sub-list for extension extendee
	0,   // [0:174] is the sub-list for field type_name
}

func init() { file_data_coord_proto_init() }
func file_data_coord_proto_init() {
	if File_data_coord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_coord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignSegmentIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentIDAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignSegmentIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInsertBinlogPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInsertBinlogPathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartitionStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentInfoChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VchannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchDmChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextIndexStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonKeyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentStartPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveBinlogPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentBinlogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldBinlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecoveryInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecoveryInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecoveryInfoResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecoveryInfoRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentsByStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSegmentsByStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlushedSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlushedSegmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentFlushCompletedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelWatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionSegmentBinlogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionPlanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentFieldBinlogMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSegmentStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSegmentStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropVirtualChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropVirtualChannelSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropVirtualChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSegmentStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendSegmentStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendSegmentStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkSegmentsDroppedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentReferenceLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDataNodeTtMsgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlushStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOperationProgressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoIDRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportRequestSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionImportStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportFileStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPreImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSegmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreImportTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportTaskV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_coord_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_coord_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   99,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_data_coord_proto_goTypes,
		DependencyIndexes: file_data_coord_proto_depIdxs,
		EnumInfos:         file_data_coord_proto_enumTypes,
		MessageInfos:      file_data_coord_proto_msgTypes,
	}.Build()
	File_data_coord_proto = out.File
	file_data_coord_proto_rawDesc = nil
	file_data_coord_proto_goTypes = nil
	file_data_coord_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataCoordClient is the client API for DataCoord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataCoordClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	AssignSegmentID(ctx context.Context, in *AssignSegmentIDRequest, opts ...grpc.CallOption) (*AssignSegmentIDResponse, error)
	GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error)
	GetSegmentStates(ctx context.Context, in *GetSegmentStatesRequest, opts ...grpc.CallOption) (*GetSegmentStatesResponse, error)
	GetInsertBinlogPaths(ctx context.Context, in *GetInsertBinlogPathsRequest, opts ...grpc.CallOption) (*GetInsertBinlogPathsResponse, error)
	GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error)
	GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error)
	GetSegmentInfoChannel(ctx context.Context, in *GetSegmentInfoChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	SaveBinlogPaths(ctx context.Context, in *SaveBinlogPathsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetRecoveryInfo(ctx context.Context, in *GetRecoveryInfoRequest, opts ...grpc.CallOption) (*GetRecoveryInfoResponse, error)
	GetRecoveryInfoV2(ctx context.Context, in *GetRecoveryInfoRequestV2, opts ...grpc.CallOption) (*GetRecoveryInfoResponseV2, error)
	GetFlushedSegments(ctx context.Context, in *GetFlushedSegmentsRequest, opts ...grpc.CallOption) (*GetFlushedSegmentsResponse, error)
	GetSegmentsByStates(ctx context.Context, in *GetSegmentsByStatesRequest, opts ...grpc.CallOption) (*GetSegmentsByStatesResponse, error)
	GetFlushAllState(ctx context.Context, in *milvuspb.GetFlushAllStateRequest, opts ...grpc.CallOption) (*milvuspb.GetFlushAllStateResponse, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	ManualCompaction(ctx context.Context, in *milvuspb.ManualCompactionRequest, opts ...grpc.CallOption) (*milvuspb.ManualCompactionResponse, error)
	GetCompactionState(ctx context.Context, in *milvuspb.GetCompactionStateRequest, opts ...grpc.CallOption) (*milvuspb.GetCompactionStateResponse, error)
	GetCompactionStateWithPlans(ctx context.Context, in *milvuspb.GetCompactionPlansRequest, opts ...grpc.CallOption) (*milvuspb.GetCompactionPlansResponse, error)
	WatchChannels(ctx context.Context, in *WatchChannelsRequest, opts ...grpc.CallOption) (*WatchChannelsResponse, error)
	GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*milvuspb.GetFlushStateResponse, error)
	DropVirtualChannel(ctx context.Context, in *DropVirtualChannelRequest, opts ...grpc.CallOption) (*DropVirtualChannelResponse, error)
	SetSegmentState(ctx context.Context, in *SetSegmentStateRequest, opts ...grpc.CallOption) (*SetSegmentStateResponse, error)
	UpdateSegmentStatistics(ctx context.Context, in *UpdateSegmentStatisticsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateChannelCheckpoint(ctx context.Context, in *UpdateChannelCheckpointRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	MarkSegmentsDropped(ctx context.Context, in *MarkSegmentsDroppedRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	BroadcastAlteredCollection(ctx context.Context, in *AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error)
	CreateIndex(ctx context.Context, in *indexpb.CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterIndex(ctx context.Context, in *indexpb.AlterIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// Deprecated: use DescribeIndex instead
	GetIndexState(ctx context.Context, in *indexpb.GetIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStateResponse, error)
	GetSegmentIndexState(ctx context.Context, in *indexpb.GetSegmentIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetSegmentIndexStateResponse, error)
	GetIndexInfos(ctx context.Context, in *indexpb.GetIndexInfoRequest, opts ...grpc.CallOption) (*indexpb.GetIndexInfoResponse, error)
	DropIndex(ctx context.Context, in *indexpb.DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeIndex(ctx context.Context, in *indexpb.DescribeIndexRequest, opts ...grpc.CallOption) (*indexpb.DescribeIndexResponse, error)
	GetIndexStatistics(ctx context.Context, in *indexpb.GetIndexStatisticsRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStatisticsResponse, error)
	// Deprecated: use DescribeIndex instead
	GetIndexBuildProgress(ctx context.Context, in *indexpb.GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*indexpb.GetIndexBuildProgressResponse, error)
	ListIndexes(ctx context.Context, in *indexpb.ListIndexesRequest, opts ...grpc.CallOption) (*indexpb.ListIndexesResponse, error)
	GcConfirm(ctx context.Context, in *GcConfirmRequest, opts ...grpc.CallOption) (*GcConfirmResponse, error)
	ReportDataNodeTtMsgs(ctx context.Context, in *ReportDataNodeTtMsgsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GcControl(ctx context.Context, in *GcControlRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// importV2
	ImportV2(ctx context.Context, in *internalpb.ImportRequestInternal, opts ...grpc.CallOption) (*internalpb.ImportResponse, error)
	GetImportProgress(ctx context.Context, in *internalpb.GetImportProgressRequest, opts ...grpc.CallOption) (*internalpb.GetImportProgressResponse, error)
	ListImports(ctx context.Context, in *internalpb.ListImportsRequestInternal, opts ...grpc.CallOption) (*internalpb.ListImportsResponse, error)
}

type dataCoordClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCoordClient(cc grpc.ClientConnInterface) DataCoordClient {
	return &dataCoordClient{cc}
}

func (c *dataCoordClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetTimeTickChannel(ctx context.Context, in *internalpb.GetTimeTickChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetTimeTickChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) AssignSegmentID(ctx context.Context, in *AssignSegmentIDRequest, opts ...grpc.CallOption) (*AssignSegmentIDResponse, error) {
	out := new(AssignSegmentIDResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/AssignSegmentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetSegmentInfo(ctx context.Context, in *GetSegmentInfoRequest, opts ...grpc.CallOption) (*GetSegmentInfoResponse, error) {
	out := new(GetSegmentInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetSegmentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetSegmentStates(ctx context.Context, in *GetSegmentStatesRequest, opts ...grpc.CallOption) (*GetSegmentStatesResponse, error) {
	out := new(GetSegmentStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetSegmentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetInsertBinlogPaths(ctx context.Context, in *GetInsertBinlogPathsRequest, opts ...grpc.CallOption) (*GetInsertBinlogPathsResponse, error) {
	out := new(GetInsertBinlogPathsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetInsertBinlogPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error) {
	out := new(GetCollectionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetCollectionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error) {
	out := new(GetPartitionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetPartitionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetSegmentInfoChannel(ctx context.Context, in *GetSegmentInfoChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetSegmentInfoChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) SaveBinlogPaths(ctx context.Context, in *SaveBinlogPathsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/SaveBinlogPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetRecoveryInfo(ctx context.Context, in *GetRecoveryInfoRequest, opts ...grpc.CallOption) (*GetRecoveryInfoResponse, error) {
	out := new(GetRecoveryInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetRecoveryInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetRecoveryInfoV2(ctx context.Context, in *GetRecoveryInfoRequestV2, opts ...grpc.CallOption) (*GetRecoveryInfoResponseV2, error) {
	out := new(GetRecoveryInfoResponseV2)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetRecoveryInfoV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetFlushedSegments(ctx context.Context, in *GetFlushedSegmentsRequest, opts ...grpc.CallOption) (*GetFlushedSegmentsResponse, error) {
	out := new(GetFlushedSegmentsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetFlushedSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetSegmentsByStates(ctx context.Context, in *GetSegmentsByStatesRequest, opts ...grpc.CallOption) (*GetSegmentsByStatesResponse, error) {
	out := new(GetSegmentsByStatesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetSegmentsByStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetFlushAllState(ctx context.Context, in *milvuspb.GetFlushAllStateRequest, opts ...grpc.CallOption) (*milvuspb.GetFlushAllStateResponse, error) {
	out := new(milvuspb.GetFlushAllStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetFlushAllState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ShowConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ManualCompaction(ctx context.Context, in *milvuspb.ManualCompactionRequest, opts ...grpc.CallOption) (*milvuspb.ManualCompactionResponse, error) {
	out := new(milvuspb.ManualCompactionResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ManualCompaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetCompactionState(ctx context.Context, in *milvuspb.GetCompactionStateRequest, opts ...grpc.CallOption) (*milvuspb.GetCompactionStateResponse, error) {
	out := new(milvuspb.GetCompactionStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetCompactionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetCompactionStateWithPlans(ctx context.Context, in *milvuspb.GetCompactionPlansRequest, opts ...grpc.CallOption) (*milvuspb.GetCompactionPlansResponse, error) {
	out := new(milvuspb.GetCompactionPlansResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetCompactionStateWithPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) WatchChannels(ctx context.Context, in *WatchChannelsRequest, opts ...grpc.CallOption) (*WatchChannelsResponse, error) {
	out := new(WatchChannelsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/WatchChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*milvuspb.GetFlushStateResponse, error) {
	out := new(milvuspb.GetFlushStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetFlushState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) DropVirtualChannel(ctx context.Context, in *DropVirtualChannelRequest, opts ...grpc.CallOption) (*DropVirtualChannelResponse, error) {
	out := new(DropVirtualChannelResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/DropVirtualChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) SetSegmentState(ctx context.Context, in *SetSegmentStateRequest, opts ...grpc.CallOption) (*SetSegmentStateResponse, error) {
	out := new(SetSegmentStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/SetSegmentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) UpdateSegmentStatistics(ctx context.Context, in *UpdateSegmentStatisticsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/UpdateSegmentStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) UpdateChannelCheckpoint(ctx context.Context, in *UpdateChannelCheckpointRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/UpdateChannelCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) MarkSegmentsDropped(ctx context.Context, in *MarkSegmentsDroppedRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/MarkSegmentsDropped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) BroadcastAlteredCollection(ctx context.Context, in *AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/BroadcastAlteredCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) CheckHealth(ctx context.Context, in *milvuspb.CheckHealthRequest, opts ...grpc.CallOption) (*milvuspb.CheckHealthResponse, error) {
	out := new(milvuspb.CheckHealthResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) CreateIndex(ctx context.Context, in *indexpb.CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) AlterIndex(ctx context.Context, in *indexpb.AlterIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/AlterIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetIndexState(ctx context.Context, in *indexpb.GetIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStateResponse, error) {
	out := new(indexpb.GetIndexStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetIndexState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetSegmentIndexState(ctx context.Context, in *indexpb.GetSegmentIndexStateRequest, opts ...grpc.CallOption) (*indexpb.GetSegmentIndexStateResponse, error) {
	out := new(indexpb.GetSegmentIndexStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetSegmentIndexState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetIndexInfos(ctx context.Context, in *indexpb.GetIndexInfoRequest, opts ...grpc.CallOption) (*indexpb.GetIndexInfoResponse, error) {
	out := new(indexpb.GetIndexInfoResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetIndexInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) DropIndex(ctx context.Context, in *indexpb.DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) DescribeIndex(ctx context.Context, in *indexpb.DescribeIndexRequest, opts ...grpc.CallOption) (*indexpb.DescribeIndexResponse, error) {
	out := new(indexpb.DescribeIndexResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetIndexStatistics(ctx context.Context, in *indexpb.GetIndexStatisticsRequest, opts ...grpc.CallOption) (*indexpb.GetIndexStatisticsResponse, error) {
	out := new(indexpb.GetIndexStatisticsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetIndexStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetIndexBuildProgress(ctx context.Context, in *indexpb.GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*indexpb.GetIndexBuildProgressResponse, error) {
	out := new(indexpb.GetIndexBuildProgressResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetIndexBuildProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ListIndexes(ctx context.Context, in *indexpb.ListIndexesRequest, opts ...grpc.CallOption) (*indexpb.ListIndexesResponse, error) {
	out := new(indexpb.ListIndexesResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ListIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GcConfirm(ctx context.Context, in *GcConfirmRequest, opts ...grpc.CallOption) (*GcConfirmResponse, error) {
	out := new(GcConfirmResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GcConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ReportDataNodeTtMsgs(ctx context.Context, in *ReportDataNodeTtMsgsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ReportDataNodeTtMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GcControl(ctx context.Context, in *GcControlRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GcControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ImportV2(ctx context.Context, in *internalpb.ImportRequestInternal, opts ...grpc.CallOption) (*internalpb.ImportResponse, error) {
	out := new(internalpb.ImportResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ImportV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) GetImportProgress(ctx context.Context, in *internalpb.GetImportProgressRequest, opts ...grpc.CallOption) (*internalpb.GetImportProgressResponse, error) {
	out := new(internalpb.GetImportProgressResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/GetImportProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCoordClient) ListImports(ctx context.Context, in *internalpb.ListImportsRequestInternal, opts ...grpc.CallOption) (*internalpb.ListImportsResponse, error) {
	out := new(internalpb.ListImportsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataCoord/ListImports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCoordServer is the server API for DataCoord service.
type DataCoordServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	AssignSegmentID(context.Context, *AssignSegmentIDRequest) (*AssignSegmentIDResponse, error)
	GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error)
	GetSegmentStates(context.Context, *GetSegmentStatesRequest) (*GetSegmentStatesResponse, error)
	GetInsertBinlogPaths(context.Context, *GetInsertBinlogPathsRequest) (*GetInsertBinlogPathsResponse, error)
	GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error)
	GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error)
	GetSegmentInfoChannel(context.Context, *GetSegmentInfoChannelRequest) (*milvuspb.StringResponse, error)
	SaveBinlogPaths(context.Context, *SaveBinlogPathsRequest) (*commonpb.Status, error)
	GetRecoveryInfo(context.Context, *GetRecoveryInfoRequest) (*GetRecoveryInfoResponse, error)
	GetRecoveryInfoV2(context.Context, *GetRecoveryInfoRequestV2) (*GetRecoveryInfoResponseV2, error)
	GetFlushedSegments(context.Context, *GetFlushedSegmentsRequest) (*GetFlushedSegmentsResponse, error)
	GetSegmentsByStates(context.Context, *GetSegmentsByStatesRequest) (*GetSegmentsByStatesResponse, error)
	GetFlushAllState(context.Context, *milvuspb.GetFlushAllStateRequest) (*milvuspb.GetFlushAllStateResponse, error)
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	ManualCompaction(context.Context, *milvuspb.ManualCompactionRequest) (*milvuspb.ManualCompactionResponse, error)
	GetCompactionState(context.Context, *milvuspb.GetCompactionStateRequest) (*milvuspb.GetCompactionStateResponse, error)
	GetCompactionStateWithPlans(context.Context, *milvuspb.GetCompactionPlansRequest) (*milvuspb.GetCompactionPlansResponse, error)
	WatchChannels(context.Context, *WatchChannelsRequest) (*WatchChannelsResponse, error)
	GetFlushState(context.Context, *GetFlushStateRequest) (*milvuspb.GetFlushStateResponse, error)
	DropVirtualChannel(context.Context, *DropVirtualChannelRequest) (*DropVirtualChannelResponse, error)
	SetSegmentState(context.Context, *SetSegmentStateRequest) (*SetSegmentStateResponse, error)
	UpdateSegmentStatistics(context.Context, *UpdateSegmentStatisticsRequest) (*commonpb.Status, error)
	UpdateChannelCheckpoint(context.Context, *UpdateChannelCheckpointRequest) (*commonpb.Status, error)
	MarkSegmentsDropped(context.Context, *MarkSegmentsDroppedRequest) (*commonpb.Status, error)
	BroadcastAlteredCollection(context.Context, *AlterCollectionRequest) (*commonpb.Status, error)
	CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error)
	CreateIndex(context.Context, *indexpb.CreateIndexRequest) (*commonpb.Status, error)
	AlterIndex(context.Context, *indexpb.AlterIndexRequest) (*commonpb.Status, error)
	// Deprecated: use DescribeIndex instead
	GetIndexState(context.Context, *indexpb.GetIndexStateRequest) (*indexpb.GetIndexStateResponse, error)
	GetSegmentIndexState(context.Context, *indexpb.GetSegmentIndexStateRequest) (*indexpb.GetSegmentIndexStateResponse, error)
	GetIndexInfos(context.Context, *indexpb.GetIndexInfoRequest) (*indexpb.GetIndexInfoResponse, error)
	DropIndex(context.Context, *indexpb.DropIndexRequest) (*commonpb.Status, error)
	DescribeIndex(context.Context, *indexpb.DescribeIndexRequest) (*indexpb.DescribeIndexResponse, error)
	GetIndexStatistics(context.Context, *indexpb.GetIndexStatisticsRequest) (*indexpb.GetIndexStatisticsResponse, error)
	// Deprecated: use DescribeIndex instead
	GetIndexBuildProgress(context.Context, *indexpb.GetIndexBuildProgressRequest) (*indexpb.GetIndexBuildProgressResponse, error)
	ListIndexes(context.Context, *indexpb.ListIndexesRequest) (*indexpb.ListIndexesResponse, error)
	GcConfirm(context.Context, *GcConfirmRequest) (*GcConfirmResponse, error)
	ReportDataNodeTtMsgs(context.Context, *ReportDataNodeTtMsgsRequest) (*commonpb.Status, error)
	GcControl(context.Context, *GcControlRequest) (*commonpb.Status, error)
	// importV2
	ImportV2(context.Context, *internalpb.ImportRequestInternal) (*internalpb.ImportResponse, error)
	GetImportProgress(context.Context, *internalpb.GetImportProgressRequest) (*internalpb.GetImportProgressResponse, error)
	ListImports(context.Context, *internalpb.ListImportsRequestInternal) (*internalpb.ListImportsResponse, error)
}

// UnimplementedDataCoordServer can be embedded to have forward compatible implementations.
type UnimplementedDataCoordServer struct {
}

func (*UnimplementedDataCoordServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedDataCoordServer) GetTimeTickChannel(context.Context, *internalpb.GetTimeTickChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeTickChannel not implemented")
}
func (*UnimplementedDataCoordServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedDataCoordServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedDataCoordServer) AssignSegmentID(context.Context, *AssignSegmentIDRequest) (*AssignSegmentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignSegmentID not implemented")
}
func (*UnimplementedDataCoordServer) GetSegmentInfo(context.Context, *GetSegmentInfoRequest) (*GetSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfo not implemented")
}
func (*UnimplementedDataCoordServer) GetSegmentStates(context.Context, *GetSegmentStatesRequest) (*GetSegmentStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentStates not implemented")
}
func (*UnimplementedDataCoordServer) GetInsertBinlogPaths(context.Context, *GetInsertBinlogPathsRequest) (*GetInsertBinlogPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsertBinlogPaths not implemented")
}
func (*UnimplementedDataCoordServer) GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionStatistics not implemented")
}
func (*UnimplementedDataCoordServer) GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStatistics not implemented")
}
func (*UnimplementedDataCoordServer) GetSegmentInfoChannel(context.Context, *GetSegmentInfoChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentInfoChannel not implemented")
}
func (*UnimplementedDataCoordServer) SaveBinlogPaths(context.Context, *SaveBinlogPathsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBinlogPaths not implemented")
}
func (*UnimplementedDataCoordServer) GetRecoveryInfo(context.Context, *GetRecoveryInfoRequest) (*GetRecoveryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecoveryInfo not implemented")
}
func (*UnimplementedDataCoordServer) GetRecoveryInfoV2(context.Context, *GetRecoveryInfoRequestV2) (*GetRecoveryInfoResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecoveryInfoV2 not implemented")
}
func (*UnimplementedDataCoordServer) GetFlushedSegments(context.Context, *GetFlushedSegmentsRequest) (*GetFlushedSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushedSegments not implemented")
}
func (*UnimplementedDataCoordServer) GetSegmentsByStates(context.Context, *GetSegmentsByStatesRequest) (*GetSegmentsByStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentsByStates not implemented")
}
func (*UnimplementedDataCoordServer) GetFlushAllState(context.Context, *milvuspb.GetFlushAllStateRequest) (*milvuspb.GetFlushAllStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushAllState not implemented")
}
func (*UnimplementedDataCoordServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (*UnimplementedDataCoordServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedDataCoordServer) ManualCompaction(context.Context, *milvuspb.ManualCompactionRequest) (*milvuspb.ManualCompactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualCompaction not implemented")
}
func (*UnimplementedDataCoordServer) GetCompactionState(context.Context, *milvuspb.GetCompactionStateRequest) (*milvuspb.GetCompactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionState not implemented")
}
func (*UnimplementedDataCoordServer) GetCompactionStateWithPlans(context.Context, *milvuspb.GetCompactionPlansRequest) (*milvuspb.GetCompactionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionStateWithPlans not implemented")
}
func (*UnimplementedDataCoordServer) WatchChannels(context.Context, *WatchChannelsRequest) (*WatchChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchChannels not implemented")
}
func (*UnimplementedDataCoordServer) GetFlushState(context.Context, *GetFlushStateRequest) (*milvuspb.GetFlushStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushState not implemented")
}
func (*UnimplementedDataCoordServer) DropVirtualChannel(context.Context, *DropVirtualChannelRequest) (*DropVirtualChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropVirtualChannel not implemented")
}
func (*UnimplementedDataCoordServer) SetSegmentState(context.Context, *SetSegmentStateRequest) (*SetSegmentStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSegmentState not implemented")
}
func (*UnimplementedDataCoordServer) UpdateSegmentStatistics(context.Context, *UpdateSegmentStatisticsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegmentStatistics not implemented")
}
func (*UnimplementedDataCoordServer) UpdateChannelCheckpoint(context.Context, *UpdateChannelCheckpointRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelCheckpoint not implemented")
}
func (*UnimplementedDataCoordServer) MarkSegmentsDropped(context.Context, *MarkSegmentsDroppedRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkSegmentsDropped not implemented")
}
func (*UnimplementedDataCoordServer) BroadcastAlteredCollection(context.Context, *AlterCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastAlteredCollection not implemented")
}
func (*UnimplementedDataCoordServer) CheckHealth(context.Context, *milvuspb.CheckHealthRequest) (*milvuspb.CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (*UnimplementedDataCoordServer) CreateIndex(context.Context, *indexpb.CreateIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedDataCoordServer) AlterIndex(context.Context, *indexpb.AlterIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterIndex not implemented")
}
func (*UnimplementedDataCoordServer) GetIndexState(context.Context, *indexpb.GetIndexStateRequest) (*indexpb.GetIndexStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexState not implemented")
}
func (*UnimplementedDataCoordServer) GetSegmentIndexState(context.Context, *indexpb.GetSegmentIndexStateRequest) (*indexpb.GetSegmentIndexStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentIndexState not implemented")
}
func (*UnimplementedDataCoordServer) GetIndexInfos(context.Context, *indexpb.GetIndexInfoRequest) (*indexpb.GetIndexInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexInfos not implemented")
}
func (*UnimplementedDataCoordServer) DropIndex(context.Context, *indexpb.DropIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedDataCoordServer) DescribeIndex(context.Context, *indexpb.DescribeIndexRequest) (*indexpb.DescribeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedDataCoordServer) GetIndexStatistics(context.Context, *indexpb.GetIndexStatisticsRequest) (*indexpb.GetIndexStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexStatistics not implemented")
}
func (*UnimplementedDataCoordServer) GetIndexBuildProgress(context.Context, *indexpb.GetIndexBuildProgressRequest) (*indexpb.GetIndexBuildProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexBuildProgress not implemented")
}
func (*UnimplementedDataCoordServer) ListIndexes(context.Context, *indexpb.ListIndexesRequest) (*indexpb.ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (*UnimplementedDataCoordServer) GcConfirm(context.Context, *GcConfirmRequest) (*GcConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GcConfirm not implemented")
}
func (*UnimplementedDataCoordServer) ReportDataNodeTtMsgs(context.Context, *ReportDataNodeTtMsgsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDataNodeTtMsgs not implemented")
}
func (*UnimplementedDataCoordServer) GcControl(context.Context, *GcControlRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GcControl not implemented")
}
func (*UnimplementedDataCoordServer) ImportV2(context.Context, *internalpb.ImportRequestInternal) (*internalpb.ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportV2 not implemented")
}
func (*UnimplementedDataCoordServer) GetImportProgress(context.Context, *internalpb.GetImportProgressRequest) (*internalpb.GetImportProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportProgress not implemented")
}
func (*UnimplementedDataCoordServer) ListImports(context.Context, *internalpb.ListImportsRequestInternal) (*internalpb.ListImportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImports not implemented")
}

func RegisterDataCoordServer(s *grpc.Server, srv DataCoordServer) {
	s.RegisterService(&_DataCoord_serviceDesc, srv)
}

func _DataCoord_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetTimeTickChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetTimeTickChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetTimeTickChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetTimeTickChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetTimeTickChannel(ctx, req.(*internalpb.GetTimeTickChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_AssignSegmentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignSegmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).AssignSegmentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/AssignSegmentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).AssignSegmentID(ctx, req.(*AssignSegmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetSegmentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetSegmentInfo(ctx, req.(*GetSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetSegmentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetSegmentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetSegmentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetSegmentStates(ctx, req.(*GetSegmentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetInsertBinlogPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsertBinlogPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetInsertBinlogPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetInsertBinlogPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetInsertBinlogPaths(ctx, req.(*GetInsertBinlogPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetCollectionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetCollectionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetCollectionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetCollectionStatistics(ctx, req.(*GetCollectionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetPartitionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetPartitionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetPartitionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetPartitionStatistics(ctx, req.(*GetPartitionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetSegmentInfoChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentInfoChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetSegmentInfoChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetSegmentInfoChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetSegmentInfoChannel(ctx, req.(*GetSegmentInfoChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_SaveBinlogPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBinlogPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).SaveBinlogPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/SaveBinlogPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).SaveBinlogPaths(ctx, req.(*SaveBinlogPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetRecoveryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecoveryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetRecoveryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetRecoveryInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetRecoveryInfo(ctx, req.(*GetRecoveryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetRecoveryInfoV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecoveryInfoRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetRecoveryInfoV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetRecoveryInfoV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetRecoveryInfoV2(ctx, req.(*GetRecoveryInfoRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetFlushedSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlushedSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetFlushedSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetFlushedSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetFlushedSegments(ctx, req.(*GetFlushedSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetSegmentsByStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentsByStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetSegmentsByStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetSegmentsByStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetSegmentsByStates(ctx, req.(*GetSegmentsByStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetFlushAllState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetFlushAllStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetFlushAllState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetFlushAllState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetFlushAllState(ctx, req.(*milvuspb.GetFlushAllStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ShowConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ManualCompaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.ManualCompactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ManualCompaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ManualCompaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ManualCompaction(ctx, req.(*milvuspb.ManualCompactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetCompactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetCompactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetCompactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetCompactionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetCompactionState(ctx, req.(*milvuspb.GetCompactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetCompactionStateWithPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetCompactionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetCompactionStateWithPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetCompactionStateWithPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetCompactionStateWithPlans(ctx, req.(*milvuspb.GetCompactionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_WatchChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).WatchChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/WatchChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).WatchChannels(ctx, req.(*WatchChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetFlushState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlushStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetFlushState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetFlushState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetFlushState(ctx, req.(*GetFlushStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_DropVirtualChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropVirtualChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).DropVirtualChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/DropVirtualChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).DropVirtualChannel(ctx, req.(*DropVirtualChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_SetSegmentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSegmentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).SetSegmentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/SetSegmentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).SetSegmentState(ctx, req.(*SetSegmentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_UpdateSegmentStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).UpdateSegmentStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/UpdateSegmentStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).UpdateSegmentStatistics(ctx, req.(*UpdateSegmentStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_UpdateChannelCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).UpdateChannelCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/UpdateChannelCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).UpdateChannelCheckpoint(ctx, req.(*UpdateChannelCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_MarkSegmentsDropped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkSegmentsDroppedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).MarkSegmentsDropped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/MarkSegmentsDropped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).MarkSegmentsDropped(ctx, req.(*MarkSegmentsDroppedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_BroadcastAlteredCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).BroadcastAlteredCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/BroadcastAlteredCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).BroadcastAlteredCollection(ctx, req.(*AlterCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).CheckHealth(ctx, req.(*milvuspb.CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).CreateIndex(ctx, req.(*indexpb.CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_AlterIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.AlterIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).AlterIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/AlterIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).AlterIndex(ctx, req.(*indexpb.AlterIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetIndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.GetIndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetIndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetIndexState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetIndexState(ctx, req.(*indexpb.GetIndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetSegmentIndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.GetSegmentIndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetSegmentIndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetSegmentIndexState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetSegmentIndexState(ctx, req.(*indexpb.GetSegmentIndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetIndexInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.GetIndexInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetIndexInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetIndexInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetIndexInfos(ctx, req.(*indexpb.GetIndexInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).DropIndex(ctx, req.(*indexpb.DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.DescribeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).DescribeIndex(ctx, req.(*indexpb.DescribeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetIndexStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.GetIndexStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetIndexStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetIndexStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetIndexStatistics(ctx, req.(*indexpb.GetIndexStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetIndexBuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.GetIndexBuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetIndexBuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetIndexBuildProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetIndexBuildProgress(ctx, req.(*indexpb.GetIndexBuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(indexpb.ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ListIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ListIndexes(ctx, req.(*indexpb.ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GcConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GcConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GcConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GcConfirm(ctx, req.(*GcConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ReportDataNodeTtMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDataNodeTtMsgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ReportDataNodeTtMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ReportDataNodeTtMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ReportDataNodeTtMsgs(ctx, req.(*ReportDataNodeTtMsgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GcControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GcControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GcControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GcControl(ctx, req.(*GcControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ImportV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ImportRequestInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ImportV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ImportV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ImportV2(ctx, req.(*internalpb.ImportRequestInternal))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_GetImportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetImportProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).GetImportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/GetImportProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).GetImportProgress(ctx, req.(*internalpb.GetImportProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCoord_ListImports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ListImportsRequestInternal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCoordServer).ListImports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataCoord/ListImports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCoordServer).ListImports(ctx, req.(*internalpb.ListImportsRequestInternal))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataCoord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.protov2.data.DataCoord",
	HandlerType: (*DataCoordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _DataCoord_GetComponentStates_Handler,
		},
		{
			MethodName: "GetTimeTickChannel",
			Handler:    _DataCoord_GetTimeTickChannel_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _DataCoord_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _DataCoord_Flush_Handler,
		},
		{
			MethodName: "AssignSegmentID",
			Handler:    _DataCoord_AssignSegmentID_Handler,
		},
		{
			MethodName: "GetSegmentInfo",
			Handler:    _DataCoord_GetSegmentInfo_Handler,
		},
		{
			MethodName: "GetSegmentStates",
			Handler:    _DataCoord_GetSegmentStates_Handler,
		},
		{
			MethodName: "GetInsertBinlogPaths",
			Handler:    _DataCoord_GetInsertBinlogPaths_Handler,
		},
		{
			MethodName: "GetCollectionStatistics",
			Handler:    _DataCoord_GetCollectionStatistics_Handler,
		},
		{
			MethodName: "GetPartitionStatistics",
			Handler:    _DataCoord_GetPartitionStatistics_Handler,
		},
		{
			MethodName: "GetSegmentInfoChannel",
			Handler:    _DataCoord_GetSegmentInfoChannel_Handler,
		},
		{
			MethodName: "SaveBinlogPaths",
			Handler:    _DataCoord_SaveBinlogPaths_Handler,
		},
		{
			MethodName: "GetRecoveryInfo",
			Handler:    _DataCoord_GetRecoveryInfo_Handler,
		},
		{
			MethodName: "GetRecoveryInfoV2",
			Handler:    _DataCoord_GetRecoveryInfoV2_Handler,
		},
		{
			MethodName: "GetFlushedSegments",
			Handler:    _DataCoord_GetFlushedSegments_Handler,
		},
		{
			MethodName: "GetSegmentsByStates",
			Handler:    _DataCoord_GetSegmentsByStates_Handler,
		},
		{
			MethodName: "GetFlushAllState",
			Handler:    _DataCoord_GetFlushAllState_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _DataCoord_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _DataCoord_GetMetrics_Handler,
		},
		{
			MethodName: "ManualCompaction",
			Handler:    _DataCoord_ManualCompaction_Handler,
		},
		{
			MethodName: "GetCompactionState",
			Handler:    _DataCoord_GetCompactionState_Handler,
		},
		{
			MethodName: "GetCompactionStateWithPlans",
			Handler:    _DataCoord_GetCompactionStateWithPlans_Handler,
		},
		{
			MethodName: "WatchChannels",
			Handler:    _DataCoord_WatchChannels_Handler,
		},
		{
			MethodName: "GetFlushState",
			Handler:    _DataCoord_GetFlushState_Handler,
		},
		{
			MethodName: "DropVirtualChannel",
			Handler:    _DataCoord_DropVirtualChannel_Handler,
		},
		{
			MethodName: "SetSegmentState",
			Handler:    _DataCoord_SetSegmentState_Handler,
		},
		{
			MethodName: "UpdateSegmentStatistics",
			Handler:    _DataCoord_UpdateSegmentStatistics_Handler,
		},
		{
			MethodName: "UpdateChannelCheckpoint",
			Handler:    _DataCoord_UpdateChannelCheckpoint_Handler,
		},
		{
			MethodName: "MarkSegmentsDropped",
			Handler:    _DataCoord_MarkSegmentsDropped_Handler,
		},
		{
			MethodName: "BroadcastAlteredCollection",
			Handler:    _DataCoord_BroadcastAlteredCollection_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _DataCoord_CheckHealth_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _DataCoord_CreateIndex_Handler,
		},
		{
			MethodName: "AlterIndex",
			Handler:    _DataCoord_AlterIndex_Handler,
		},
		{
			MethodName: "GetIndexState",
			Handler:    _DataCoord_GetIndexState_Handler,
		},
		{
			MethodName: "GetSegmentIndexState",
			Handler:    _DataCoord_GetSegmentIndexState_Handler,
		},
		{
			MethodName: "GetIndexInfos",
			Handler:    _DataCoord_GetIndexInfos_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _DataCoord_DropIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _DataCoord_DescribeIndex_Handler,
		},
		{
			MethodName: "GetIndexStatistics",
			Handler:    _DataCoord_GetIndexStatistics_Handler,
		},
		{
			MethodName: "GetIndexBuildProgress",
			Handler:    _DataCoord_GetIndexBuildProgress_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _DataCoord_ListIndexes_Handler,
		},
		{
			MethodName: "GcConfirm",
			Handler:    _DataCoord_GcConfirm_Handler,
		},
		{
			MethodName: "ReportDataNodeTtMsgs",
			Handler:    _DataCoord_ReportDataNodeTtMsgs_Handler,
		},
		{
			MethodName: "GcControl",
			Handler:    _DataCoord_GcControl_Handler,
		},
		{
			MethodName: "ImportV2",
			Handler:    _DataCoord_ImportV2_Handler,
		},
		{
			MethodName: "GetImportProgress",
			Handler:    _DataCoord_GetImportProgress_Handler,
		},
		{
			MethodName: "ListImports",
			Handler:    _DataCoord_ListImports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_coord.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataNodeClient interface {
	GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error)
	GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error)
	WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	FlushSegments(ctx context.Context, in *FlushSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)
	Compaction(ctx context.Context, in *CompactionPlan, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetCompactionState(ctx context.Context, in *CompactionStateRequest, opts ...grpc.CallOption) (*CompactionStateResponse, error)
	SyncSegments(ctx context.Context, in *SyncSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	// Deprecated
	ResendSegmentStats(ctx context.Context, in *ResendSegmentStatsRequest, opts ...grpc.CallOption) (*ResendSegmentStatsResponse, error)
	FlushChannels(ctx context.Context, in *FlushChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	NotifyChannelOperation(ctx context.Context, in *ChannelOperationsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CheckChannelOperationProgress(ctx context.Context, in *ChannelWatchInfo, opts ...grpc.CallOption) (*ChannelOperationProgressResponse, error)
	// import v2
	PreImport(ctx context.Context, in *PreImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ImportV2(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	QueryPreImport(ctx context.Context, in *QueryPreImportRequest, opts ...grpc.CallOption) (*QueryPreImportResponse, error)
	QueryImport(ctx context.Context, in *QueryImportRequest, opts ...grpc.CallOption) (*QueryImportResponse, error)
	DropImport(ctx context.Context, in *DropImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) GetComponentStates(ctx context.Context, in *milvuspb.GetComponentStatesRequest, opts ...grpc.CallOption) (*milvuspb.ComponentStates, error) {
	out := new(milvuspb.ComponentStates)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/GetComponentStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) GetStatisticsChannel(ctx context.Context, in *internalpb.GetStatisticsChannelRequest, opts ...grpc.CallOption) (*milvuspb.StringResponse, error) {
	out := new(milvuspb.StringResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/GetStatisticsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) WatchDmChannels(ctx context.Context, in *WatchDmChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/WatchDmChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) FlushSegments(ctx context.Context, in *FlushSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/FlushSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ShowConfigurations(ctx context.Context, in *internalpb.ShowConfigurationsRequest, opts ...grpc.CallOption) (*internalpb.ShowConfigurationsResponse, error) {
	out := new(internalpb.ShowConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/ShowConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) GetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error) {
	out := new(milvuspb.GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) Compaction(ctx context.Context, in *CompactionPlan, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/Compaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) GetCompactionState(ctx context.Context, in *CompactionStateRequest, opts ...grpc.CallOption) (*CompactionStateResponse, error) {
	out := new(CompactionStateResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/GetCompactionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) SyncSegments(ctx context.Context, in *SyncSegmentsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/SyncSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ResendSegmentStats(ctx context.Context, in *ResendSegmentStatsRequest, opts ...grpc.CallOption) (*ResendSegmentStatsResponse, error) {
	out := new(ResendSegmentStatsResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/ResendSegmentStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) FlushChannels(ctx context.Context, in *FlushChannelsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/FlushChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) NotifyChannelOperation(ctx context.Context, in *ChannelOperationsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/NotifyChannelOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) CheckChannelOperationProgress(ctx context.Context, in *ChannelWatchInfo, opts ...grpc.CallOption) (*ChannelOperationProgressResponse, error) {
	out := new(ChannelOperationProgressResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/CheckChannelOperationProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) PreImport(ctx context.Context, in *PreImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/PreImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) ImportV2(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/ImportV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) QueryPreImport(ctx context.Context, in *QueryPreImportRequest, opts ...grpc.CallOption) (*QueryPreImportResponse, error) {
	out := new(QueryPreImportResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/QueryPreImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) QueryImport(ctx context.Context, in *QueryImportRequest, opts ...grpc.CallOption) (*QueryImportResponse, error) {
	out := new(QueryImportResponse)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/QueryImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) DropImport(ctx context.Context, in *DropImportRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, "/milvus.proto.data.DataNode/DropImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
type DataNodeServer interface {
	GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error)
	GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error)
	WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error)
	FlushSegments(context.Context, *FlushSegmentsRequest) (*commonpb.Status, error)
	ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)
	Compaction(context.Context, *CompactionPlan) (*commonpb.Status, error)
	GetCompactionState(context.Context, *CompactionStateRequest) (*CompactionStateResponse, error)
	SyncSegments(context.Context, *SyncSegmentsRequest) (*commonpb.Status, error)
	// Deprecated
	ResendSegmentStats(context.Context, *ResendSegmentStatsRequest) (*ResendSegmentStatsResponse, error)
	FlushChannels(context.Context, *FlushChannelsRequest) (*commonpb.Status, error)
	NotifyChannelOperation(context.Context, *ChannelOperationsRequest) (*commonpb.Status, error)
	CheckChannelOperationProgress(context.Context, *ChannelWatchInfo) (*ChannelOperationProgressResponse, error)
	// import v2
	PreImport(context.Context, *PreImportRequest) (*commonpb.Status, error)
	ImportV2(context.Context, *ImportRequest) (*commonpb.Status, error)
	QueryPreImport(context.Context, *QueryPreImportRequest) (*QueryPreImportResponse, error)
	QueryImport(context.Context, *QueryImportRequest) (*QueryImportResponse, error)
	DropImport(context.Context, *DropImportRequest) (*commonpb.Status, error)
}

// UnimplementedDataNodeServer can be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (*UnimplementedDataNodeServer) GetComponentStates(context.Context, *milvuspb.GetComponentStatesRequest) (*milvuspb.ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (*UnimplementedDataNodeServer) GetStatisticsChannel(context.Context, *internalpb.GetStatisticsChannelRequest) (*milvuspb.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsChannel not implemented")
}
func (*UnimplementedDataNodeServer) WatchDmChannels(context.Context, *WatchDmChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDmChannels not implemented")
}
func (*UnimplementedDataNodeServer) FlushSegments(context.Context, *FlushSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushSegments not implemented")
}
func (*UnimplementedDataNodeServer) ShowConfigurations(context.Context, *internalpb.ShowConfigurationsRequest) (*internalpb.ShowConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowConfigurations not implemented")
}
func (*UnimplementedDataNodeServer) GetMetrics(context.Context, *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (*UnimplementedDataNodeServer) Compaction(context.Context, *CompactionPlan) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compaction not implemented")
}
func (*UnimplementedDataNodeServer) GetCompactionState(context.Context, *CompactionStateRequest) (*CompactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionState not implemented")
}
func (*UnimplementedDataNodeServer) SyncSegments(context.Context, *SyncSegmentsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSegments not implemented")
}
func (*UnimplementedDataNodeServer) ResendSegmentStats(context.Context, *ResendSegmentStatsRequest) (*ResendSegmentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendSegmentStats not implemented")
}
func (*UnimplementedDataNodeServer) FlushChannels(context.Context, *FlushChannelsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushChannels not implemented")
}
func (*UnimplementedDataNodeServer) NotifyChannelOperation(context.Context, *ChannelOperationsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelOperation not implemented")
}
func (*UnimplementedDataNodeServer) CheckChannelOperationProgress(context.Context, *ChannelWatchInfo) (*ChannelOperationProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChannelOperationProgress not implemented")
}
func (*UnimplementedDataNodeServer) PreImport(context.Context, *PreImportRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreImport not implemented")
}
func (*UnimplementedDataNodeServer) ImportV2(context.Context, *ImportRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportV2 not implemented")
}
func (*UnimplementedDataNodeServer) QueryPreImport(context.Context, *QueryPreImportRequest) (*QueryPreImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPreImport not implemented")
}
func (*UnimplementedDataNodeServer) QueryImport(context.Context, *QueryImportRequest) (*QueryImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryImport not implemented")
}
func (*UnimplementedDataNodeServer) DropImport(context.Context, *DropImportRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropImport not implemented")
}

func RegisterDataNodeServer(s *grpc.Server, srv DataNodeServer) {
	s.RegisterService(&_DataNode_serviceDesc, srv)
}

func _DataNode_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/GetComponentStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GetComponentStates(ctx, req.(*milvuspb.GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_GetStatisticsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.GetStatisticsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GetStatisticsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/GetStatisticsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GetStatisticsChannel(ctx, req.(*internalpb.GetStatisticsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_WatchDmChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDmChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).WatchDmChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/WatchDmChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).WatchDmChannels(ctx, req.(*WatchDmChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_FlushSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).FlushSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/FlushSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).FlushSegments(ctx, req.(*FlushSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ShowConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(internalpb.ShowConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ShowConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/ShowConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ShowConfigurations(ctx, req.(*internalpb.ShowConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(milvuspb.GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GetMetrics(ctx, req.(*milvuspb.GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_Compaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactionPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).Compaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/Compaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).Compaction(ctx, req.(*CompactionPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_GetCompactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).GetCompactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/GetCompactionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).GetCompactionState(ctx, req.(*CompactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_SyncSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).SyncSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/SyncSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).SyncSegments(ctx, req.(*SyncSegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ResendSegmentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendSegmentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ResendSegmentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/ResendSegmentStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ResendSegmentStats(ctx, req.(*ResendSegmentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_FlushChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).FlushChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/FlushChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).FlushChannels(ctx, req.(*FlushChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_NotifyChannelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).NotifyChannelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/NotifyChannelOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).NotifyChannelOperation(ctx, req.(*ChannelOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_CheckChannelOperationProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelWatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).CheckChannelOperationProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/CheckChannelOperationProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).CheckChannelOperationProgress(ctx, req.(*ChannelWatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_PreImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).PreImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/PreImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).PreImport(ctx, req.(*PreImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_ImportV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ImportV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/ImportV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ImportV2(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_QueryPreImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).QueryPreImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/QueryPreImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).QueryPreImport(ctx, req.(*QueryPreImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_QueryImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).QueryImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/QueryImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).QueryImport(ctx, req.(*QueryImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_DropImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).DropImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.proto.data.DataNode/DropImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).DropImport(ctx, req.(*DropImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.protov2.data.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComponentStates",
			Handler:    _DataNode_GetComponentStates_Handler,
		},
		{
			MethodName: "GetStatisticsChannel",
			Handler:    _DataNode_GetStatisticsChannel_Handler,
		},
		{
			MethodName: "WatchDmChannels",
			Handler:    _DataNode_WatchDmChannels_Handler,
		},
		{
			MethodName: "FlushSegments",
			Handler:    _DataNode_FlushSegments_Handler,
		},
		{
			MethodName: "ShowConfigurations",
			Handler:    _DataNode_ShowConfigurations_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _DataNode_GetMetrics_Handler,
		},
		{
			MethodName: "Compaction",
			Handler:    _DataNode_Compaction_Handler,
		},
		{
			MethodName: "GetCompactionState",
			Handler:    _DataNode_GetCompactionState_Handler,
		},
		{
			MethodName: "SyncSegments",
			Handler:    _DataNode_SyncSegments_Handler,
		},
		{
			MethodName: "ResendSegmentStats",
			Handler:    _DataNode_ResendSegmentStats_Handler,
		},
		{
			MethodName: "FlushChannels",
			Handler:    _DataNode_FlushChannels_Handler,
		},
		{
			MethodName: "NotifyChannelOperation",
			Handler:    _DataNode_NotifyChannelOperation_Handler,
		},
		{
			MethodName: "CheckChannelOperationProgress",
			Handler:    _DataNode_CheckChannelOperationProgress_Handler,
		},
		{
			MethodName: "PreImport",
			Handler:    _DataNode_PreImport_Handler,
		},
		{
			MethodName: "ImportV2",
			Handler:    _DataNode_ImportV2_Handler,
		},
		{
			MethodName: "QueryPreImport",
			Handler:    _DataNode_QueryPreImport_Handler,
		},
		{
			MethodName: "QueryImport",
			Handler:    _DataNode_QueryImport_Handler,
		},
		{
			MethodName: "DropImport",
			Handler:    _DataNode_DropImport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_coord.proto",
}
