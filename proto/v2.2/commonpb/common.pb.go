// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.21.4
// source: common.proto

package commonpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Deprecated
//
// Deprecated: Do not use.
type ErrorCode int32

const (
	ErrorCode_Success                       ErrorCode = 0
	ErrorCode_UnexpectedError               ErrorCode = 1
	ErrorCode_ConnectFailed                 ErrorCode = 2
	ErrorCode_PermissionDenied              ErrorCode = 3
	ErrorCode_CollectionNotExists           ErrorCode = 4
	ErrorCode_IllegalArgument               ErrorCode = 5
	ErrorCode_IllegalDimension              ErrorCode = 7
	ErrorCode_IllegalIndexType              ErrorCode = 8
	ErrorCode_IllegalCollectionName         ErrorCode = 9
	ErrorCode_IllegalTOPK                   ErrorCode = 10
	ErrorCode_IllegalRowRecord              ErrorCode = 11
	ErrorCode_IllegalVectorID               ErrorCode = 12
	ErrorCode_IllegalSearchResult           ErrorCode = 13
	ErrorCode_FileNotFound                  ErrorCode = 14
	ErrorCode_MetaFailed                    ErrorCode = 15
	ErrorCode_CacheFailed                   ErrorCode = 16
	ErrorCode_CannotCreateFolder            ErrorCode = 17
	ErrorCode_CannotCreateFile              ErrorCode = 18
	ErrorCode_CannotDeleteFolder            ErrorCode = 19
	ErrorCode_CannotDeleteFile              ErrorCode = 20
	ErrorCode_BuildIndexError               ErrorCode = 21
	ErrorCode_IllegalNLIST                  ErrorCode = 22
	ErrorCode_IllegalMetricType             ErrorCode = 23
	ErrorCode_OutOfMemory                   ErrorCode = 24
	ErrorCode_IndexNotExist                 ErrorCode = 25
	ErrorCode_EmptyCollection               ErrorCode = 26
	ErrorCode_UpdateImportTaskFailure       ErrorCode = 27
	ErrorCode_CollectionNameNotFound        ErrorCode = 28
	ErrorCode_CreateCredentialFailure       ErrorCode = 29
	ErrorCode_UpdateCredentialFailure       ErrorCode = 30
	ErrorCode_DeleteCredentialFailure       ErrorCode = 31
	ErrorCode_GetCredentialFailure          ErrorCode = 32
	ErrorCode_ListCredUsersFailure          ErrorCode = 33
	ErrorCode_GetUserFailure                ErrorCode = 34
	ErrorCode_CreateRoleFailure             ErrorCode = 35
	ErrorCode_DropRoleFailure               ErrorCode = 36
	ErrorCode_OperateUserRoleFailure        ErrorCode = 37
	ErrorCode_SelectRoleFailure             ErrorCode = 38
	ErrorCode_SelectUserFailure             ErrorCode = 39
	ErrorCode_SelectResourceFailure         ErrorCode = 40
	ErrorCode_OperatePrivilegeFailure       ErrorCode = 41
	ErrorCode_SelectGrantFailure            ErrorCode = 42
	ErrorCode_RefreshPolicyInfoCacheFailure ErrorCode = 43
	ErrorCode_ListPolicyFailure             ErrorCode = 44
	ErrorCode_NotShardLeader                ErrorCode = 45
	ErrorCode_NoReplicaAvailable            ErrorCode = 46
	ErrorCode_SegmentNotFound               ErrorCode = 47
	ErrorCode_ForceDeny                     ErrorCode = 48
	ErrorCode_RateLimit                     ErrorCode = 49
	ErrorCode_NodeIDNotMatch                ErrorCode = 50
	ErrorCode_UpsertAutoIDTrue              ErrorCode = 51
	ErrorCode_InsufficientMemoryToLoad      ErrorCode = 52
	ErrorCode_MemoryQuotaExhausted          ErrorCode = 53
	ErrorCode_DiskQuotaExhausted            ErrorCode = 54
	ErrorCode_TimeTickLongDelay             ErrorCode = 55
	ErrorCode_NotReadyServe                 ErrorCode = 56
	// Coord is switching from standby mode to active mode
	ErrorCode_NotReadyCoordActivating ErrorCode = 57
	// Service availability.
	// NA: Not Available.
	ErrorCode_DataCoordNA ErrorCode = 100
	// internal error code.
	ErrorCode_DDRequestRace ErrorCode = 1000
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:    "Success",
		1:    "UnexpectedError",
		2:    "ConnectFailed",
		3:    "PermissionDenied",
		4:    "CollectionNotExists",
		5:    "IllegalArgument",
		7:    "IllegalDimension",
		8:    "IllegalIndexType",
		9:    "IllegalCollectionName",
		10:   "IllegalTOPK",
		11:   "IllegalRowRecord",
		12:   "IllegalVectorID",
		13:   "IllegalSearchResult",
		14:   "FileNotFound",
		15:   "MetaFailed",
		16:   "CacheFailed",
		17:   "CannotCreateFolder",
		18:   "CannotCreateFile",
		19:   "CannotDeleteFolder",
		20:   "CannotDeleteFile",
		21:   "BuildIndexError",
		22:   "IllegalNLIST",
		23:   "IllegalMetricType",
		24:   "OutOfMemory",
		25:   "IndexNotExist",
		26:   "EmptyCollection",
		27:   "UpdateImportTaskFailure",
		28:   "CollectionNameNotFound",
		29:   "CreateCredentialFailure",
		30:   "UpdateCredentialFailure",
		31:   "DeleteCredentialFailure",
		32:   "GetCredentialFailure",
		33:   "ListCredUsersFailure",
		34:   "GetUserFailure",
		35:   "CreateRoleFailure",
		36:   "DropRoleFailure",
		37:   "OperateUserRoleFailure",
		38:   "SelectRoleFailure",
		39:   "SelectUserFailure",
		40:   "SelectResourceFailure",
		41:   "OperatePrivilegeFailure",
		42:   "SelectGrantFailure",
		43:   "RefreshPolicyInfoCacheFailure",
		44:   "ListPolicyFailure",
		45:   "NotShardLeader",
		46:   "NoReplicaAvailable",
		47:   "SegmentNotFound",
		48:   "ForceDeny",
		49:   "RateLimit",
		50:   "NodeIDNotMatch",
		51:   "UpsertAutoIDTrue",
		52:   "InsufficientMemoryToLoad",
		53:   "MemoryQuotaExhausted",
		54:   "DiskQuotaExhausted",
		55:   "TimeTickLongDelay",
		56:   "NotReadyServe",
		57:   "NotReadyCoordActivating",
		100:  "DataCoordNA",
		1000: "DDRequestRace",
	}
	ErrorCode_value = map[string]int32{
		"Success":                       0,
		"UnexpectedError":               1,
		"ConnectFailed":                 2,
		"PermissionDenied":              3,
		"CollectionNotExists":           4,
		"IllegalArgument":               5,
		"IllegalDimension":              7,
		"IllegalIndexType":              8,
		"IllegalCollectionName":         9,
		"IllegalTOPK":                   10,
		"IllegalRowRecord":              11,
		"IllegalVectorID":               12,
		"IllegalSearchResult":           13,
		"FileNotFound":                  14,
		"MetaFailed":                    15,
		"CacheFailed":                   16,
		"CannotCreateFolder":            17,
		"CannotCreateFile":              18,
		"CannotDeleteFolder":            19,
		"CannotDeleteFile":              20,
		"BuildIndexError":               21,
		"IllegalNLIST":                  22,
		"IllegalMetricType":             23,
		"OutOfMemory":                   24,
		"IndexNotExist":                 25,
		"EmptyCollection":               26,
		"UpdateImportTaskFailure":       27,
		"CollectionNameNotFound":        28,
		"CreateCredentialFailure":       29,
		"UpdateCredentialFailure":       30,
		"DeleteCredentialFailure":       31,
		"GetCredentialFailure":          32,
		"ListCredUsersFailure":          33,
		"GetUserFailure":                34,
		"CreateRoleFailure":             35,
		"DropRoleFailure":               36,
		"OperateUserRoleFailure":        37,
		"SelectRoleFailure":             38,
		"SelectUserFailure":             39,
		"SelectResourceFailure":         40,
		"OperatePrivilegeFailure":       41,
		"SelectGrantFailure":            42,
		"RefreshPolicyInfoCacheFailure": 43,
		"ListPolicyFailure":             44,
		"NotShardLeader":                45,
		"NoReplicaAvailable":            46,
		"SegmentNotFound":               47,
		"ForceDeny":                     48,
		"RateLimit":                     49,
		"NodeIDNotMatch":                50,
		"UpsertAutoIDTrue":              51,
		"InsufficientMemoryToLoad":      52,
		"MemoryQuotaExhausted":          53,
		"DiskQuotaExhausted":            54,
		"TimeTickLongDelay":             55,
		"NotReadyServe":                 56,
		"NotReadyCoordActivating":       57,
		"DataCoordNA":                   100,
		"DDRequestRace":                 1000,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type IndexState int32

const (
	IndexState_IndexStateNone IndexState = 0
	IndexState_Unissued       IndexState = 1
	IndexState_InProgress     IndexState = 2
	IndexState_Finished       IndexState = 3
	IndexState_Failed         IndexState = 4
	IndexState_Retry          IndexState = 5
)

// Enum value maps for IndexState.
var (
	IndexState_name = map[int32]string{
		0: "IndexStateNone",
		1: "Unissued",
		2: "InProgress",
		3: "Finished",
		4: "Failed",
		5: "Retry",
	}
	IndexState_value = map[string]int32{
		"IndexStateNone": 0,
		"Unissued":       1,
		"InProgress":     2,
		"Finished":       3,
		"Failed":         4,
		"Retry":          5,
	}
)

func (x IndexState) Enum() *IndexState {
	p := new(IndexState)
	*p = x
	return p
}

func (x IndexState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (IndexState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x IndexState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexState.Descriptor instead.
func (IndexState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type SegmentState int32

const (
	SegmentState_SegmentStateNone SegmentState = 0
	SegmentState_NotExist         SegmentState = 1
	SegmentState_Growing          SegmentState = 2
	SegmentState_Sealed           SegmentState = 3
	SegmentState_Flushed          SegmentState = 4
	SegmentState_Flushing         SegmentState = 5
	SegmentState_Dropped          SegmentState = 6
	SegmentState_Importing        SegmentState = 7
)

// Enum value maps for SegmentState.
var (
	SegmentState_name = map[int32]string{
		0: "SegmentStateNone",
		1: "NotExist",
		2: "Growing",
		3: "Sealed",
		4: "Flushed",
		5: "Flushing",
		6: "Dropped",
		7: "Importing",
	}
	SegmentState_value = map[string]int32{
		"SegmentStateNone": 0,
		"NotExist":         1,
		"Growing":          2,
		"Sealed":           3,
		"Flushed":          4,
		"Flushing":         5,
		"Dropped":          6,
		"Importing":        7,
	}
)

func (x SegmentState) Enum() *SegmentState {
	p := new(SegmentState)
	*p = x
	return p
}

func (x SegmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (SegmentState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x SegmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentState.Descriptor instead.
func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type PlaceholderType int32

const (
	PlaceholderType_None              PlaceholderType = 0
	PlaceholderType_BinaryVector      PlaceholderType = 100
	PlaceholderType_FloatVector       PlaceholderType = 101
	PlaceholderType_Float16Vector     PlaceholderType = 102
	PlaceholderType_BFloat16Vector    PlaceholderType = 103
	PlaceholderType_SparseFloatVector PlaceholderType = 104
	PlaceholderType_Int64             PlaceholderType = 5
	PlaceholderType_VarChar           PlaceholderType = 21
)

// Enum value maps for PlaceholderType.
var (
	PlaceholderType_name = map[int32]string{
		0:   "None",
		100: "BinaryVector",
		101: "FloatVector",
		102: "Float16Vector",
		103: "BFloat16Vector",
		104: "SparseFloatVector",
		5:   "Int64",
		21:  "VarChar",
	}
	PlaceholderType_value = map[string]int32{
		"None":              0,
		"BinaryVector":      100,
		"FloatVector":       101,
		"Float16Vector":     102,
		"BFloat16Vector":    103,
		"SparseFloatVector": 104,
		"Int64":             5,
		"VarChar":           21,
	}
)

func (x PlaceholderType) Enum() *PlaceholderType {
	p := new(PlaceholderType)
	*p = x
	return p
}

func (x PlaceholderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceholderType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (PlaceholderType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x PlaceholderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceholderType.Descriptor instead.
func (PlaceholderType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type MsgType int32

const (
	MsgType_Undefined MsgType = 0
	// DEFINITION REQUESTS: COLLECTION
	MsgType_CreateCollection   MsgType = 100
	MsgType_DropCollection     MsgType = 101
	MsgType_HasCollection      MsgType = 102
	MsgType_DescribeCollection MsgType = 103
	MsgType_ShowCollections    MsgType = 104
	MsgType_GetSystemConfigs   MsgType = 105
	MsgType_LoadCollection     MsgType = 106
	MsgType_ReleaseCollection  MsgType = 107
	MsgType_CreateAlias        MsgType = 108
	MsgType_DropAlias          MsgType = 109
	MsgType_AlterAlias         MsgType = 110
	MsgType_AlterCollection    MsgType = 111
	MsgType_RenameCollection   MsgType = 112
	MsgType_DescribeAlias      MsgType = 113
	MsgType_ListAliases        MsgType = 114
	// DEFINITION REQUESTS: PARTITION
	MsgType_CreatePartition   MsgType = 200
	MsgType_DropPartition     MsgType = 201
	MsgType_HasPartition      MsgType = 202
	MsgType_DescribePartition MsgType = 203
	MsgType_ShowPartitions    MsgType = 204
	MsgType_LoadPartitions    MsgType = 205
	MsgType_ReleasePartitions MsgType = 206
	// DEFINE REQUESTS: SEGMENT
	MsgType_ShowSegments                  MsgType = 250
	MsgType_DescribeSegment               MsgType = 251
	MsgType_LoadSegments                  MsgType = 252
	MsgType_ReleaseSegments               MsgType = 253
	MsgType_HandoffSegments               MsgType = 254
	MsgType_LoadBalanceSegments           MsgType = 255
	MsgType_DescribeSegments              MsgType = 256
	MsgType_FederListIndexedSegment       MsgType = 257
	MsgType_FederDescribeSegmentIndexData MsgType = 258
	// DEFINITION REQUESTS: INDEX
	MsgType_CreateIndex        MsgType = 300
	MsgType_DescribeIndex      MsgType = 301
	MsgType_DropIndex          MsgType = 302
	MsgType_GetIndexStatistics MsgType = 303
	MsgType_AlterIndex         MsgType = 304
	// MANIPULATION REQUESTS
	MsgType_Insert             MsgType = 400
	MsgType_Delete             MsgType = 401
	MsgType_Flush              MsgType = 402
	MsgType_ResendSegmentStats MsgType = 403
	MsgType_Upsert             MsgType = 404
	// QUERY
	MsgType_Search                   MsgType = 500
	MsgType_SearchResult             MsgType = 501
	MsgType_GetIndexState            MsgType = 502
	MsgType_GetIndexBuildProgress    MsgType = 503
	MsgType_GetCollectionStatistics  MsgType = 504
	MsgType_GetPartitionStatistics   MsgType = 505
	MsgType_Retrieve                 MsgType = 506
	MsgType_RetrieveResult           MsgType = 507
	MsgType_WatchDmChannels          MsgType = 508
	MsgType_RemoveDmChannels         MsgType = 509
	MsgType_WatchQueryChannels       MsgType = 510
	MsgType_RemoveQueryChannels      MsgType = 511
	MsgType_SealedSegmentsChangeInfo MsgType = 512
	MsgType_WatchDeltaChannels       MsgType = 513
	MsgType_GetShardLeaders          MsgType = 514
	MsgType_GetReplicas              MsgType = 515
	MsgType_UnsubDmChannel           MsgType = 516
	MsgType_GetDistribution          MsgType = 517
	MsgType_SyncDistribution         MsgType = 518
	// DATA SERVICE
	MsgType_SegmentInfo     MsgType = 600
	MsgType_SystemInfo      MsgType = 601
	MsgType_GetRecoveryInfo MsgType = 602
	MsgType_GetSegmentState MsgType = 603
	// SYSTEM CONTROL
	MsgType_TimeTick          MsgType = 1200
	MsgType_QueryNodeStats    MsgType = 1201 // GOOSE TODO: Remove kQueryNodeStats
	MsgType_LoadIndex         MsgType = 1202
	MsgType_RequestID         MsgType = 1203
	MsgType_RequestTSO        MsgType = 1204
	MsgType_AllocateSegment   MsgType = 1205
	MsgType_SegmentStatistics MsgType = 1206
	MsgType_SegmentFlushDone  MsgType = 1207
	MsgType_DataNodeTt        MsgType = 1208
	MsgType_Connect           MsgType = 1209
	MsgType_ListClientInfos   MsgType = 1210
	MsgType_AllocTimestamp    MsgType = 1211
	// Credential
	MsgType_CreateCredential  MsgType = 1500
	MsgType_GetCredential     MsgType = 1501
	MsgType_DeleteCredential  MsgType = 1502
	MsgType_UpdateCredential  MsgType = 1503
	MsgType_ListCredUsernames MsgType = 1504
	// RBAC
	MsgType_CreateRole             MsgType = 1600
	MsgType_DropRole               MsgType = 1601
	MsgType_OperateUserRole        MsgType = 1602
	MsgType_SelectRole             MsgType = 1603
	MsgType_SelectUser             MsgType = 1604
	MsgType_SelectResource         MsgType = 1605
	MsgType_OperatePrivilege       MsgType = 1606
	MsgType_SelectGrant            MsgType = 1607
	MsgType_RefreshPolicyInfoCache MsgType = 1608
	MsgType_ListPolicy             MsgType = 1609
	// Resource group
	MsgType_CreateResourceGroup   MsgType = 1700
	MsgType_DropResourceGroup     MsgType = 1701
	MsgType_ListResourceGroups    MsgType = 1702
	MsgType_DescribeResourceGroup MsgType = 1703
	MsgType_TransferNode          MsgType = 1704
	MsgType_TransferReplica       MsgType = 1705
	MsgType_UpdateResourceGroups  MsgType = 1706
	// Database group
	MsgType_CreateDatabase MsgType = 1801
	MsgType_DropDatabase   MsgType = 1802
	MsgType_ListDatabases  MsgType = 1803
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:    "Undefined",
		100:  "CreateCollection",
		101:  "DropCollection",
		102:  "HasCollection",
		103:  "DescribeCollection",
		104:  "ShowCollections",
		105:  "GetSystemConfigs",
		106:  "LoadCollection",
		107:  "ReleaseCollection",
		108:  "CreateAlias",
		109:  "DropAlias",
		110:  "AlterAlias",
		111:  "AlterCollection",
		112:  "RenameCollection",
		113:  "DescribeAlias",
		114:  "ListAliases",
		200:  "CreatePartition",
		201:  "DropPartition",
		202:  "HasPartition",
		203:  "DescribePartition",
		204:  "ShowPartitions",
		205:  "LoadPartitions",
		206:  "ReleasePartitions",
		250:  "ShowSegments",
		251:  "DescribeSegment",
		252:  "LoadSegments",
		253:  "ReleaseSegments",
		254:  "HandoffSegments",
		255:  "LoadBalanceSegments",
		256:  "DescribeSegments",
		257:  "FederListIndexedSegment",
		258:  "FederDescribeSegmentIndexData",
		300:  "CreateIndex",
		301:  "DescribeIndex",
		302:  "DropIndex",
		303:  "GetIndexStatistics",
		304:  "AlterIndex",
		400:  "Insert",
		401:  "Delete",
		402:  "Flush",
		403:  "ResendSegmentStats",
		404:  "Upsert",
		500:  "Search",
		501:  "SearchResult",
		502:  "GetIndexState",
		503:  "GetIndexBuildProgress",
		504:  "GetCollectionStatistics",
		505:  "GetPartitionStatistics",
		506:  "Retrieve",
		507:  "RetrieveResult",
		508:  "WatchDmChannels",
		509:  "RemoveDmChannels",
		510:  "WatchQueryChannels",
		511:  "RemoveQueryChannels",
		512:  "SealedSegmentsChangeInfo",
		513:  "WatchDeltaChannels",
		514:  "GetShardLeaders",
		515:  "GetReplicas",
		516:  "UnsubDmChannel",
		517:  "GetDistribution",
		518:  "SyncDistribution",
		600:  "SegmentInfo",
		601:  "SystemInfo",
		602:  "GetRecoveryInfo",
		603:  "GetSegmentState",
		1200: "TimeTick",
		1201: "QueryNodeStats",
		1202: "LoadIndex",
		1203: "RequestID",
		1204: "RequestTSO",
		1205: "AllocateSegment",
		1206: "SegmentStatistics",
		1207: "SegmentFlushDone",
		1208: "DataNodeTt",
		1209: "Connect",
		1210: "ListClientInfos",
		1211: "AllocTimestamp",
		1500: "CreateCredential",
		1501: "GetCredential",
		1502: "DeleteCredential",
		1503: "UpdateCredential",
		1504: "ListCredUsernames",
		1600: "CreateRole",
		1601: "DropRole",
		1602: "OperateUserRole",
		1603: "SelectRole",
		1604: "SelectUser",
		1605: "SelectResource",
		1606: "OperatePrivilege",
		1607: "SelectGrant",
		1608: "RefreshPolicyInfoCache",
		1609: "ListPolicy",
		1700: "CreateResourceGroup",
		1701: "DropResourceGroup",
		1702: "ListResourceGroups",
		1703: "DescribeResourceGroup",
		1704: "TransferNode",
		1705: "TransferReplica",
		1706: "UpdateResourceGroups",
		1801: "CreateDatabase",
		1802: "DropDatabase",
		1803: "ListDatabases",
	}
	MsgType_value = map[string]int32{
		"Undefined":                     0,
		"CreateCollection":              100,
		"DropCollection":                101,
		"HasCollection":                 102,
		"DescribeCollection":            103,
		"ShowCollections":               104,
		"GetSystemConfigs":              105,
		"LoadCollection":                106,
		"ReleaseCollection":             107,
		"CreateAlias":                   108,
		"DropAlias":                     109,
		"AlterAlias":                    110,
		"AlterCollection":               111,
		"RenameCollection":              112,
		"DescribeAlias":                 113,
		"ListAliases":                   114,
		"CreatePartition":               200,
		"DropPartition":                 201,
		"HasPartition":                  202,
		"DescribePartition":             203,
		"ShowPartitions":                204,
		"LoadPartitions":                205,
		"ReleasePartitions":             206,
		"ShowSegments":                  250,
		"DescribeSegment":               251,
		"LoadSegments":                  252,
		"ReleaseSegments":               253,
		"HandoffSegments":               254,
		"LoadBalanceSegments":           255,
		"DescribeSegments":              256,
		"FederListIndexedSegment":       257,
		"FederDescribeSegmentIndexData": 258,
		"CreateIndex":                   300,
		"DescribeIndex":                 301,
		"DropIndex":                     302,
		"GetIndexStatistics":            303,
		"AlterIndex":                    304,
		"Insert":                        400,
		"Delete":                        401,
		"Flush":                         402,
		"ResendSegmentStats":            403,
		"Upsert":                        404,
		"Search":                        500,
		"SearchResult":                  501,
		"GetIndexState":                 502,
		"GetIndexBuildProgress":         503,
		"GetCollectionStatistics":       504,
		"GetPartitionStatistics":        505,
		"Retrieve":                      506,
		"RetrieveResult":                507,
		"WatchDmChannels":               508,
		"RemoveDmChannels":              509,
		"WatchQueryChannels":            510,
		"RemoveQueryChannels":           511,
		"SealedSegmentsChangeInfo":      512,
		"WatchDeltaChannels":            513,
		"GetShardLeaders":               514,
		"GetReplicas":                   515,
		"UnsubDmChannel":                516,
		"GetDistribution":               517,
		"SyncDistribution":              518,
		"SegmentInfo":                   600,
		"SystemInfo":                    601,
		"GetRecoveryInfo":               602,
		"GetSegmentState":               603,
		"TimeTick":                      1200,
		"QueryNodeStats":                1201,
		"LoadIndex":                     1202,
		"RequestID":                     1203,
		"RequestTSO":                    1204,
		"AllocateSegment":               1205,
		"SegmentStatistics":             1206,
		"SegmentFlushDone":              1207,
		"DataNodeTt":                    1208,
		"Connect":                       1209,
		"ListClientInfos":               1210,
		"AllocTimestamp":                1211,
		"CreateCredential":              1500,
		"GetCredential":                 1501,
		"DeleteCredential":              1502,
		"UpdateCredential":              1503,
		"ListCredUsernames":             1504,
		"CreateRole":                    1600,
		"DropRole":                      1601,
		"OperateUserRole":               1602,
		"SelectRole":                    1603,
		"SelectUser":                    1604,
		"SelectResource":                1605,
		"OperatePrivilege":              1606,
		"SelectGrant":                   1607,
		"RefreshPolicyInfoCache":        1608,
		"ListPolicy":                    1609,
		"CreateResourceGroup":           1700,
		"DropResourceGroup":             1701,
		"ListResourceGroups":            1702,
		"DescribeResourceGroup":         1703,
		"TransferNode":                  1704,
		"TransferReplica":               1705,
		"UpdateResourceGroups":          1706,
		"CreateDatabase":                1801,
		"DropDatabase":                  1802,
		"ListDatabases":                 1803,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type DslType int32

const (
	DslType_Dsl        DslType = 0
	DslType_BoolExprV1 DslType = 1
)

// Enum value maps for DslType.
var (
	DslType_name = map[int32]string{
		0: "Dsl",
		1: "BoolExprV1",
	}
	DslType_value = map[string]int32{
		"Dsl":        0,
		"BoolExprV1": 1,
	}
)

func (x DslType) Enum() *DslType {
	p := new(DslType)
	*p = x
	return p
}

func (x DslType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DslType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (DslType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x DslType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DslType.Descriptor instead.
func (DslType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type CompactionState int32

const (
	CompactionState_UndefiedState CompactionState = 0
	CompactionState_Executing     CompactionState = 1
	CompactionState_Completed     CompactionState = 2
)

// Enum value maps for CompactionState.
var (
	CompactionState_name = map[int32]string{
		0: "UndefiedState",
		1: "Executing",
		2: "Completed",
	}
	CompactionState_value = map[string]int32{
		"UndefiedState": 0,
		"Executing":     1,
		"Completed":     2,
	}
)

func (x CompactionState) Enum() *CompactionState {
	p := new(CompactionState)
	*p = x
	return p
}

func (x CompactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (CompactionState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x CompactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompactionState.Descriptor instead.
func (CompactionState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type ConsistencyLevel int32

const (
	ConsistencyLevel_Strong     ConsistencyLevel = 0
	ConsistencyLevel_Session    ConsistencyLevel = 1 // default in PyMilvus
	ConsistencyLevel_Bounded    ConsistencyLevel = 2
	ConsistencyLevel_Eventually ConsistencyLevel = 3
	ConsistencyLevel_Customized ConsistencyLevel = 4 // Users pass their own `guarantee_timestamp`.
)

// Enum value maps for ConsistencyLevel.
var (
	ConsistencyLevel_name = map[int32]string{
		0: "Strong",
		1: "Session",
		2: "Bounded",
		3: "Eventually",
		4: "Customized",
	}
	ConsistencyLevel_value = map[string]int32{
		"Strong":     0,
		"Session":    1,
		"Bounded":    2,
		"Eventually": 3,
		"Customized": 4,
	}
)

func (x ConsistencyLevel) Enum() *ConsistencyLevel {
	p := new(ConsistencyLevel)
	*p = x
	return p
}

func (x ConsistencyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (ConsistencyLevel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x ConsistencyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyLevel.Descriptor instead.
func (ConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type ImportState int32

const (
	ImportState_ImportPending          ImportState = 0 // the task in in pending list of rootCoord, waiting to be executed
	ImportState_ImportFailed           ImportState = 1 // the task failed for some reason, get detail reason from GetImportStateResponse.infos
	ImportState_ImportStarted          ImportState = 2 // the task has been sent to datanode to execute
	ImportState_ImportPersisted        ImportState = 5 // all data files have been parsed and all meta data already persisted, ready to be flushed.
	ImportState_ImportFlushed          ImportState = 8 // all segments are successfully flushed.
	ImportState_ImportCompleted        ImportState = 6 // all indexes are successfully built and segments are able to be compacted as normal.
	ImportState_ImportFailedAndCleaned ImportState = 7 // the task failed and all segments it generated are cleaned up.
)

// Enum value maps for ImportState.
var (
	ImportState_name = map[int32]string{
		0: "ImportPending",
		1: "ImportFailed",
		2: "ImportStarted",
		5: "ImportPersisted",
		8: "ImportFlushed",
		6: "ImportCompleted",
		7: "ImportFailedAndCleaned",
	}
	ImportState_value = map[string]int32{
		"ImportPending":          0,
		"ImportFailed":           1,
		"ImportStarted":          2,
		"ImportPersisted":        5,
		"ImportFlushed":          8,
		"ImportCompleted":        6,
		"ImportFailedAndCleaned": 7,
	}
)

func (x ImportState) Enum() *ImportState {
	p := new(ImportState)
	*p = x
	return p
}

func (x ImportState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (ImportState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x ImportState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportState.Descriptor instead.
func (ImportState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type ObjectType int32

const (
	ObjectType_Collection ObjectType = 0
	ObjectType_Global     ObjectType = 1
	ObjectType_User       ObjectType = 2
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0: "Collection",
		1: "Global",
		2: "User",
	}
	ObjectType_value = map[string]int32{
		"Collection": 0,
		"Global":     1,
		"User":       2,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type ObjectPrivilege int32

const (
	ObjectPrivilege_PrivilegeAll                   ObjectPrivilege = 0
	ObjectPrivilege_PrivilegeCreateCollection      ObjectPrivilege = 1
	ObjectPrivilege_PrivilegeDropCollection        ObjectPrivilege = 2
	ObjectPrivilege_PrivilegeDescribeCollection    ObjectPrivilege = 3
	ObjectPrivilege_PrivilegeShowCollections       ObjectPrivilege = 4
	ObjectPrivilege_PrivilegeLoad                  ObjectPrivilege = 5
	ObjectPrivilege_PrivilegeRelease               ObjectPrivilege = 6
	ObjectPrivilege_PrivilegeCompaction            ObjectPrivilege = 7
	ObjectPrivilege_PrivilegeInsert                ObjectPrivilege = 8
	ObjectPrivilege_PrivilegeDelete                ObjectPrivilege = 9
	ObjectPrivilege_PrivilegeGetStatistics         ObjectPrivilege = 10
	ObjectPrivilege_PrivilegeCreateIndex           ObjectPrivilege = 11
	ObjectPrivilege_PrivilegeIndexDetail           ObjectPrivilege = 12
	ObjectPrivilege_PrivilegeDropIndex             ObjectPrivilege = 13
	ObjectPrivilege_PrivilegeSearch                ObjectPrivilege = 14
	ObjectPrivilege_PrivilegeFlush                 ObjectPrivilege = 15
	ObjectPrivilege_PrivilegeQuery                 ObjectPrivilege = 16
	ObjectPrivilege_PrivilegeLoadBalance           ObjectPrivilege = 17
	ObjectPrivilege_PrivilegeImport                ObjectPrivilege = 18
	ObjectPrivilege_PrivilegeCreateOwnership       ObjectPrivilege = 19
	ObjectPrivilege_PrivilegeUpdateUser            ObjectPrivilege = 20
	ObjectPrivilege_PrivilegeDropOwnership         ObjectPrivilege = 21
	ObjectPrivilege_PrivilegeSelectOwnership       ObjectPrivilege = 22
	ObjectPrivilege_PrivilegeManageOwnership       ObjectPrivilege = 23
	ObjectPrivilege_PrivilegeSelectUser            ObjectPrivilege = 24
	ObjectPrivilege_PrivilegeUpsert                ObjectPrivilege = 25
	ObjectPrivilege_PrivilegeCreateResourceGroup   ObjectPrivilege = 26
	ObjectPrivilege_PrivilegeDropResourceGroup     ObjectPrivilege = 27
	ObjectPrivilege_PrivilegeDescribeResourceGroup ObjectPrivilege = 28
	ObjectPrivilege_PrivilegeListResourceGroups    ObjectPrivilege = 29
	ObjectPrivilege_PrivilegeTransferNode          ObjectPrivilege = 30
	ObjectPrivilege_PrivilegeTransferReplica       ObjectPrivilege = 31
	ObjectPrivilege_PrivilegeGetLoadingProgress    ObjectPrivilege = 32
	ObjectPrivilege_PrivilegeGetLoadState          ObjectPrivilege = 33
	ObjectPrivilege_PrivilegeRenameCollection      ObjectPrivilege = 34
	ObjectPrivilege_PrivilegeCreateDatabase        ObjectPrivilege = 35
	ObjectPrivilege_PrivilegeDropDatabase          ObjectPrivilege = 36
	ObjectPrivilege_PrivilegeListDatabases         ObjectPrivilege = 37
	ObjectPrivilege_PrivilegeFlushAll              ObjectPrivilege = 38
	ObjectPrivilege_PrivilegeCreatePartition       ObjectPrivilege = 39
	ObjectPrivilege_PrivilegeDropPartition         ObjectPrivilege = 40
	ObjectPrivilege_PrivilegeShowPartitions        ObjectPrivilege = 41
	ObjectPrivilege_PrivilegeHasPartition          ObjectPrivilege = 42
	ObjectPrivilege_PrivilegeGetFlushState         ObjectPrivilege = 43
	ObjectPrivilege_PrivilegeCreateAlias           ObjectPrivilege = 44
	ObjectPrivilege_PrivilegeDropAlias             ObjectPrivilege = 45
	ObjectPrivilege_PrivilegeDescribeAlias         ObjectPrivilege = 46
	ObjectPrivilege_PrivilegeListAliases           ObjectPrivilege = 47
	ObjectPrivilege_PrivilegeUpdateResourceGroups  ObjectPrivilege = 48
)

// Enum value maps for ObjectPrivilege.
var (
	ObjectPrivilege_name = map[int32]string{
		0:  "PrivilegeAll",
		1:  "PrivilegeCreateCollection",
		2:  "PrivilegeDropCollection",
		3:  "PrivilegeDescribeCollection",
		4:  "PrivilegeShowCollections",
		5:  "PrivilegeLoad",
		6:  "PrivilegeRelease",
		7:  "PrivilegeCompaction",
		8:  "PrivilegeInsert",
		9:  "PrivilegeDelete",
		10: "PrivilegeGetStatistics",
		11: "PrivilegeCreateIndex",
		12: "PrivilegeIndexDetail",
		13: "PrivilegeDropIndex",
		14: "PrivilegeSearch",
		15: "PrivilegeFlush",
		16: "PrivilegeQuery",
		17: "PrivilegeLoadBalance",
		18: "PrivilegeImport",
		19: "PrivilegeCreateOwnership",
		20: "PrivilegeUpdateUser",
		21: "PrivilegeDropOwnership",
		22: "PrivilegeSelectOwnership",
		23: "PrivilegeManageOwnership",
		24: "PrivilegeSelectUser",
		25: "PrivilegeUpsert",
		26: "PrivilegeCreateResourceGroup",
		27: "PrivilegeDropResourceGroup",
		28: "PrivilegeDescribeResourceGroup",
		29: "PrivilegeListResourceGroups",
		30: "PrivilegeTransferNode",
		31: "PrivilegeTransferReplica",
		32: "PrivilegeGetLoadingProgress",
		33: "PrivilegeGetLoadState",
		34: "PrivilegeRenameCollection",
		35: "PrivilegeCreateDatabase",
		36: "PrivilegeDropDatabase",
		37: "PrivilegeListDatabases",
		38: "PrivilegeFlushAll",
		39: "PrivilegeCreatePartition",
		40: "PrivilegeDropPartition",
		41: "PrivilegeShowPartitions",
		42: "PrivilegeHasPartition",
		43: "PrivilegeGetFlushState",
		44: "PrivilegeCreateAlias",
		45: "PrivilegeDropAlias",
		46: "PrivilegeDescribeAlias",
		47: "PrivilegeListAliases",
		48: "PrivilegeUpdateResourceGroups",
	}
	ObjectPrivilege_value = map[string]int32{
		"PrivilegeAll":                   0,
		"PrivilegeCreateCollection":      1,
		"PrivilegeDropCollection":        2,
		"PrivilegeDescribeCollection":    3,
		"PrivilegeShowCollections":       4,
		"PrivilegeLoad":                  5,
		"PrivilegeRelease":               6,
		"PrivilegeCompaction":            7,
		"PrivilegeInsert":                8,
		"PrivilegeDelete":                9,
		"PrivilegeGetStatistics":         10,
		"PrivilegeCreateIndex":           11,
		"PrivilegeIndexDetail":           12,
		"PrivilegeDropIndex":             13,
		"PrivilegeSearch":                14,
		"PrivilegeFlush":                 15,
		"PrivilegeQuery":                 16,
		"PrivilegeLoadBalance":           17,
		"PrivilegeImport":                18,
		"PrivilegeCreateOwnership":       19,
		"PrivilegeUpdateUser":            20,
		"PrivilegeDropOwnership":         21,
		"PrivilegeSelectOwnership":       22,
		"PrivilegeManageOwnership":       23,
		"PrivilegeSelectUser":            24,
		"PrivilegeUpsert":                25,
		"PrivilegeCreateResourceGroup":   26,
		"PrivilegeDropResourceGroup":     27,
		"PrivilegeDescribeResourceGroup": 28,
		"PrivilegeListResourceGroups":    29,
		"PrivilegeTransferNode":          30,
		"PrivilegeTransferReplica":       31,
		"PrivilegeGetLoadingProgress":    32,
		"PrivilegeGetLoadState":          33,
		"PrivilegeRenameCollection":      34,
		"PrivilegeCreateDatabase":        35,
		"PrivilegeDropDatabase":          36,
		"PrivilegeListDatabases":         37,
		"PrivilegeFlushAll":              38,
		"PrivilegeCreatePartition":       39,
		"PrivilegeDropPartition":         40,
		"PrivilegeShowPartitions":        41,
		"PrivilegeHasPartition":          42,
		"PrivilegeGetFlushState":         43,
		"PrivilegeCreateAlias":           44,
		"PrivilegeDropAlias":             45,
		"PrivilegeDescribeAlias":         46,
		"PrivilegeListAliases":           47,
		"PrivilegeUpdateResourceGroups":  48,
	}
)

func (x ObjectPrivilege) Enum() *ObjectPrivilege {
	p := new(ObjectPrivilege)
	*p = x
	return p
}

func (x ObjectPrivilege) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectPrivilege) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (ObjectPrivilege) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x ObjectPrivilege) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectPrivilege.Descriptor instead.
func (ObjectPrivilege) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type StateCode int32

const (
	StateCode_Initializing StateCode = 0
	StateCode_Healthy      StateCode = 1
	StateCode_Abnormal     StateCode = 2
	StateCode_StandBy      StateCode = 3
	StateCode_Stopping     StateCode = 4
)

// Enum value maps for StateCode.
var (
	StateCode_name = map[int32]string{
		0: "Initializing",
		1: "Healthy",
		2: "Abnormal",
		3: "StandBy",
		4: "Stopping",
	}
	StateCode_value = map[string]int32{
		"Initializing": 0,
		"Healthy":      1,
		"Abnormal":     2,
		"StandBy":      3,
		"Stopping":     4,
	}
)

func (x StateCode) Enum() *StateCode {
	p := new(StateCode)
	*p = x
	return p
}

func (x StateCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateCode) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (StateCode) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x StateCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateCode.Descriptor instead.
func (StateCode) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

type LoadState int32

const (
	LoadState_LoadStateNotExist LoadState = 0
	LoadState_LoadStateNotLoad  LoadState = 1
	LoadState_LoadStateLoading  LoadState = 2
	LoadState_LoadStateLoaded   LoadState = 3
)

// Enum value maps for LoadState.
var (
	LoadState_name = map[int32]string{
		0: "LoadStateNotExist",
		1: "LoadStateNotLoad",
		2: "LoadStateLoading",
		3: "LoadStateLoaded",
	}
	LoadState_value = map[string]int32{
		"LoadStateNotExist": 0,
		"LoadStateNotLoad":  1,
		"LoadStateLoading":  2,
		"LoadStateLoaded":   3,
	}
)

func (x LoadState) Enum() *LoadState {
	p := new(LoadState)
	*p = x
	return p
}

func (x LoadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadState) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (LoadState) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x LoadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadState.Descriptor instead.
func (LoadState) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ErrorCode ErrorCode         `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=milvus.protov2.common.ErrorCode" json:"error_code,omitempty"`
	Reason    string            `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Code      int32             `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Retriable bool              `protobuf:"varint,4,opt,name=retriable,proto3" json:"retriable,omitempty"`
	Detail    string            `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	ExtraInfo map[string]string `protobuf:"bytes,6,rep,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *Status) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_Success
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetRetriable() bool {
	if x != nil {
		return x.Retriable
	}
	return false
}

func (x *Status) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Status) GetExtraInfo() map[string]string {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type KeyDataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KeyDataPair) Reset() {
	*x = KeyDataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDataPair) ProtoMessage() {}

func (x *KeyDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDataPair.ProtoReflect.Descriptor instead.
func (*KeyDataPair) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *KeyDataPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyDataPair) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *Blob) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PlaceholderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type PlaceholderType `protobuf:"varint,2,opt,name=type,proto3,enum=milvus.protov2.common.PlaceholderType" json:"type,omitempty"`
	// values is a 2d-array of nq rows, every row contains a query vector.
	// for dense vector, all rows are of the same length; for sparse vector,
	// the length of each row may vary depending on their number of non-zeros.
	Values [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *PlaceholderValue) Reset() {
	*x = PlaceholderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderValue) ProtoMessage() {}

func (x *PlaceholderValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderValue.ProtoReflect.Descriptor instead.
func (*PlaceholderValue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *PlaceholderValue) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *PlaceholderValue) GetType() PlaceholderType {
	if x != nil {
		return x.Type
	}
	return PlaceholderType_None
}

func (x *PlaceholderValue) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type PlaceholderGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Placeholders []*PlaceholderValue `protobuf:"bytes,1,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
}

func (x *PlaceholderGroup) Reset() {
	*x = PlaceholderGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderGroup) ProtoMessage() {}

func (x *PlaceholderGroup) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderGroup.ProtoReflect.Descriptor instead.
func (*PlaceholderGroup) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *PlaceholderGroup) GetPlaceholders() []*PlaceholderValue {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Address) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Address) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MsgBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType       MsgType           `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=milvus.protov2.common.MsgType" json:"msg_type,omitempty"`
	MsgID         int64             `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	Timestamp     uint64            `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourceID      int64             `protobuf:"varint,4,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	TargetID      int64             `protobuf:"varint,5,opt,name=targetID,proto3" json:"targetID,omitempty"`
	Properties    map[string]string `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReplicateInfo *ReplicateInfo    `protobuf:"bytes,7,opt,name=replicateInfo,proto3" json:"replicateInfo,omitempty"`
}

func (x *MsgBase) Reset() {
	*x = MsgBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBase) ProtoMessage() {}

func (x *MsgBase) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgBase.ProtoReflect.Descriptor instead.
func (*MsgBase) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *MsgBase) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_Undefined
}

func (x *MsgBase) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *MsgBase) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MsgBase) GetSourceID() int64 {
	if x != nil {
		return x.SourceID
	}
	return 0
}

func (x *MsgBase) GetTargetID() int64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *MsgBase) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *MsgBase) GetReplicateInfo() *ReplicateInfo {
	if x != nil {
		return x.ReplicateInfo
	}
	return nil
}

type ReplicateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReplicate  bool   `protobuf:"varint,1,opt,name=isReplicate,proto3" json:"isReplicate,omitempty"`
	MsgTimestamp uint64 `protobuf:"varint,2,opt,name=msgTimestamp,proto3" json:"msgTimestamp,omitempty"`
}

func (x *ReplicateInfo) Reset() {
	*x = ReplicateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateInfo) ProtoMessage() {}

func (x *ReplicateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateInfo.ProtoReflect.Descriptor instead.
func (*ReplicateInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicateInfo) GetIsReplicate() bool {
	if x != nil {
		return x.IsReplicate
	}
	return false
}

func (x *ReplicateInfo) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

// Don't Modify This. @czs
type MsgHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *MsgHeader) Reset() {
	*x = MsgHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeader) ProtoMessage() {}

func (x *MsgHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeader.ProtoReflect.Descriptor instead.
func (*MsgHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *MsgHeader) GetBase() *MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

// Don't Modify This. @czs
type DMLMsgHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ShardName string   `protobuf:"bytes,2,opt,name=shardName,proto3" json:"shardName,omitempty"`
}

func (x *DMLMsgHeader) Reset() {
	*x = DMLMsgHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMLMsgHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMLMsgHeader) ProtoMessage() {}

func (x *DMLMsgHeader) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMLMsgHeader.ProtoReflect.Descriptor instead.
func (*DMLMsgHeader) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *DMLMsgHeader) GetBase() *MsgBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *DMLMsgHeader) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type PrivilegeExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType       ObjectType      `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=milvus.protov2.common.ObjectType" json:"object_type,omitempty"`
	ObjectPrivilege  ObjectPrivilege `protobuf:"varint,2,opt,name=object_privilege,json=objectPrivilege,proto3,enum=milvus.protov2.common.ObjectPrivilege" json:"object_privilege,omitempty"`
	ObjectNameIndex  int32           `protobuf:"varint,3,opt,name=object_name_index,json=objectNameIndex,proto3" json:"object_name_index,omitempty"`
	ObjectNameIndexs int32           `protobuf:"varint,4,opt,name=object_name_indexs,json=objectNameIndexs,proto3" json:"object_name_indexs,omitempty"`
}

func (x *PrivilegeExt) Reset() {
	*x = PrivilegeExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivilegeExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeExt) ProtoMessage() {}

func (x *PrivilegeExt) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeExt.ProtoReflect.Descriptor instead.
func (*PrivilegeExt) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *PrivilegeExt) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_Collection
}

func (x *PrivilegeExt) GetObjectPrivilege() ObjectPrivilege {
	if x != nil {
		return x.ObjectPrivilege
	}
	return ObjectPrivilege_PrivilegeAll
}

func (x *PrivilegeExt) GetObjectNameIndex() int32 {
	if x != nil {
		return x.ObjectNameIndex
	}
	return 0
}

func (x *PrivilegeExt) GetObjectNameIndexs() int32 {
	if x != nil {
		return x.ObjectNameIndexs
	}
	return 0
}

type SegmentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentID int64 `protobuf:"varint,1,opt,name=SegmentID,proto3" json:"SegmentID,omitempty"`
	NumRows   int64 `protobuf:"varint,2,opt,name=NumRows,proto3" json:"NumRows,omitempty"`
}

func (x *SegmentStats) Reset() {
	*x = SegmentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentStats) ProtoMessage() {}

func (x *SegmentStats) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentStats.ProtoReflect.Descriptor instead.
func (*SegmentStats) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *SegmentStats) GetSegmentID() int64 {
	if x != nil {
		return x.SegmentID
	}
	return 0
}

func (x *SegmentStats) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sdk_type can be `python`, `golang`, `nodejs` and etc. It's not proper to make `sdk_type` an
	// enumerate type, since we cannot always update the enum value everytime when newly sdk is supported.
	SdkType    string `protobuf:"bytes,1,opt,name=sdk_type,json=sdkType,proto3" json:"sdk_type,omitempty"`
	SdkVersion string `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	LocalTime  string `protobuf:"bytes,3,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`
	User       string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Host       string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// reserved for newly-added feature if necessary.
	Reserved map[string]string `protobuf:"bytes,6,rep,name=reserved,proto3" json:"reserved,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *ClientInfo) GetSdkType() string {
	if x != nil {
		return x.SdkType
	}
	return ""
}

func (x *ClientInfo) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *ClientInfo) GetLocalTime() string {
	if x != nil {
		return x.LocalTime
	}
	return ""
}

func (x *ClientInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClientInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClientInfo) GetReserved() map[string]string {
	if x != nil {
		return x.Reserved
	}
	return nil
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildTags  string `protobuf:"bytes,1,opt,name=build_tags,json=buildTags,proto3" json:"build_tags,omitempty"`
	BuildTime  string `protobuf:"bytes,2,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	GitCommit  string `protobuf:"bytes,3,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	GoVersion  string `protobuf:"bytes,4,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	DeployMode string `protobuf:"bytes,5,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
	// reserved for newly-added feature if necessary.
	Reserved map[string]string `protobuf:"bytes,6,rep,name=reserved,proto3" json:"reserved,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *ServerInfo) GetBuildTags() string {
	if x != nil {
		return x.BuildTags
	}
	return ""
}

func (x *ServerInfo) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

func (x *ServerInfo) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *ServerInfo) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *ServerInfo) GetDeployMode() string {
	if x != nil {
		return x.DeployMode
	}
	return ""
}

func (x *ServerInfo) GetReserved() map[string]string {
	if x != nil {
		return x.Reserved
	}
	return nil
}

// NodeInfo is used to describe the node information.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID   int64  `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *NodeInfo) GetNodeID() int64 {
	if x != nil {
		return x.NodeID
	}
	return 0
}

func (x *NodeInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

var file_common_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*PrivilegeExt)(nil),
		Field:         1001,
		Name:          "milvus.protov2.common.privilege_ext_obj",
		Tag:           "bytes,1001,opt,name=privilege_ext_obj",
		Filename:      "common.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional milvus.protov2.common.PrivilegeExt privilege_ext_obj = 1001;
	E_PrivilegeExtObj = &file_common_proto_extTypes[0]
)

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x0b,
	0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1c, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x78, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x10, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4b, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x42, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x73,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3f,
	0x0a, 0x09, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x69, 0x6c, 0x76,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x60, 0x0a, 0x0c, 0x44, 0x4d, 0x4c, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xff, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x45,
	0x78, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x64,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x64,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x02, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xc7, 0x0a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6c, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6c,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x54, 0x4f, 0x50, 0x4b, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x10,
	0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x10, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x15, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x1b, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x1f,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x22, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x23, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x10, 0x24, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x25,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x27, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x2a, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10,
	0x2b, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x2d, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x2e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x2f, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6e, 0x79, 0x10, 0x30, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x32, 0x12, 0x14, 0x0a, 0x10, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x44, 0x54, 0x72, 0x75, 0x65, 0x10,
	0x33, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x34, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x78,
	0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x69, 0x73,
	0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x65, 0x64, 0x10,
	0x36, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x4c, 0x6f, 0x6e,
	0x67, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x37, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x39, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4e, 0x41, 0x10, 0x64, 0x12, 0x12, 0x0a, 0x0d, 0x44, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x10, 0xe8, 0x07, 0x1a, 0x02, 0x18,
	0x01, 0x2a, 0x63, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x10, 0x05, 0x2a, 0x82, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x2a, 0x94, 0x01, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x36, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x66, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x36, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x68, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x10, 0x15, 0x2a, 0xe0, 0x10, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x66, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x68, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x10, 0x69, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x6a, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x72, 0x6f,
	0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x6f, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x10, 0x71, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xc9,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0xca, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xcb, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xcc,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x10, 0xcd, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xce, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfa,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0xfb, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xfd, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0xfe, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xff, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0x80, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x81, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x46, 0x65, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x10, 0x82, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xac, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xad, 0x02, 0x12,
	0x0e, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xae, 0x02, 0x12,
	0x17, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0xaf, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xb0, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x10, 0x90, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x91, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x92, 0x03, 0x12,
	0x17, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0x93, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x10, 0x94, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10,
	0xf4, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0xf5, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0xf6, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x10, 0xf7, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x10, 0xf8, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0xf9, 0x03,
	0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x10, 0xfa, 0x03, 0x12,
	0x13, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x10, 0xfb, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xfc, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xfd,
	0x03, 0x12, 0x17, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0xfe, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x10, 0xff, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0x80, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0x81, 0x04, 0x12, 0x14, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x10,
	0x82, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x10, 0x83, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x44, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x84, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x85, 0x04, 0x12,
	0x15, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x86, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xd8, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xd9, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xda, 0x04, 0x12,
	0x14, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0xdb, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x10, 0xb0, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xb1, 0x09, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xb2, 0x09, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x10, 0xb3, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x53, 0x4f, 0x10, 0xb4, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xb5, 0x09,
	0x12, 0x16, 0x0a, 0x11, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0xb6, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0xb7, 0x09, 0x12,
	0x0f, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x74, 0x10, 0xb8, 0x09,
	0x12, 0x0c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0xb9, 0x09, 0x12, 0x14,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x10, 0xba, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x10, 0xbb, 0x09, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0xdc, 0x0b,
	0x12, 0x12, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x10, 0xdd, 0x0b, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0xde, 0x0b, 0x12, 0x15, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10,
	0xdf, 0x0b, 0x12, 0x16, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x10, 0xe0, 0x0b, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc0, 0x0c, 0x12, 0x0d, 0x0a, 0x08, 0x44,
	0x72, 0x6f, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc1, 0x0c, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc2, 0x0c,
	0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0xc3,
	0x0c, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10,
	0xc4, 0x0c, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x10, 0xc5, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x10, 0xc6, 0x0c, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x10, 0xc7, 0x0c,
	0x12, 0x1b, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x10, 0xc8, 0x0c, 0x12, 0x0f, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0xc9, 0x0c, 0x12, 0x18,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xa4, 0x0d, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xa5, 0x0d,
	0x12, 0x17, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0xa6, 0x0d, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0xa7, 0x0d, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0xa8, 0x0d, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x10, 0xa9, 0x0d, 0x12, 0x19,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0xaa, 0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x10, 0x89, 0x0e, 0x12, 0x11,
	0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x10, 0x8a,
	0x0e, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x10, 0x8b, 0x0e, 0x2a, 0x22, 0x0a, 0x07, 0x44, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x73, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x56, 0x31, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x58, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x9e, 0x01, 0x0a, 0x0b, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x32, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x02, 0x2a, 0xba, 0x0a, 0x0a,
	0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x10, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x12, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x15,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x16, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x10, 0x19, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x1a, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x1c,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10,
	0x1d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x10, 0x1f, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x10, 0x23, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44,
	0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x10, 0x24, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x10, 0x26,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x27, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x48, 0x61, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x2b, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x2c, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x2d,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x10, 0x2f, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x30, 0x2a, 0x53, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0x63,
	0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x10, 0x03, 0x3a, 0x71, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x76,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x45, 0x78, 0x74, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x45, 0x78, 0x74, 0x4f, 0x62, 0x6a, 0x42, 0x6d, 0x0a, 0x0e, 0x69, 0x6f, 0x2e, 0x6d, 0x69, 0x6c,
	0x76, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x6d, 0x69,
	0x6c, 0x76, 0x75, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0xa0, 0x01, 0x01,
	0xaa, 0x02, 0x12, 0x4d, 0x69, 0x6c, 0x76, 0x75, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_common_proto_goTypes = []interface{}{
	(ErrorCode)(0),                      // 0: milvus.protov2.common.ErrorCode
	(IndexState)(0),                     // 1: milvus.protov2.common.IndexState
	(SegmentState)(0),                   // 2: milvus.protov2.common.SegmentState
	(PlaceholderType)(0),                // 3: milvus.protov2.common.PlaceholderType
	(MsgType)(0),                        // 4: milvus.protov2.common.MsgType
	(DslType)(0),                        // 5: milvus.protov2.common.DslType
	(CompactionState)(0),                // 6: milvus.protov2.common.CompactionState
	(ConsistencyLevel)(0),               // 7: milvus.protov2.common.ConsistencyLevel
	(ImportState)(0),                    // 8: milvus.protov2.common.ImportState
	(ObjectType)(0),                     // 9: milvus.protov2.common.ObjectType
	(ObjectPrivilege)(0),                // 10: milvus.protov2.common.ObjectPrivilege
	(StateCode)(0),                      // 11: milvus.protov2.common.StateCode
	(LoadState)(0),                      // 12: milvus.protov2.common.LoadState
	(*Status)(nil),                      // 13: milvus.protov2.common.Status
	(*KeyValuePair)(nil),                // 14: milvus.protov2.common.KeyValuePair
	(*KeyDataPair)(nil),                 // 15: milvus.protov2.common.KeyDataPair
	(*Blob)(nil),                        // 16: milvus.protov2.common.Blob
	(*PlaceholderValue)(nil),            // 17: milvus.protov2.common.PlaceholderValue
	(*PlaceholderGroup)(nil),            // 18: milvus.protov2.common.PlaceholderGroup
	(*Address)(nil),                     // 19: milvus.protov2.common.Address
	(*MsgBase)(nil),                     // 20: milvus.protov2.common.MsgBase
	(*ReplicateInfo)(nil),               // 21: milvus.protov2.common.ReplicateInfo
	(*MsgHeader)(nil),                   // 22: milvus.protov2.common.MsgHeader
	(*DMLMsgHeader)(nil),                // 23: milvus.protov2.common.DMLMsgHeader
	(*PrivilegeExt)(nil),                // 24: milvus.protov2.common.PrivilegeExt
	(*SegmentStats)(nil),                // 25: milvus.protov2.common.SegmentStats
	(*ClientInfo)(nil),                  // 26: milvus.protov2.common.ClientInfo
	(*ServerInfo)(nil),                  // 27: milvus.protov2.common.ServerInfo
	(*NodeInfo)(nil),                    // 28: milvus.protov2.common.NodeInfo
	nil,                                 // 29: milvus.protov2.common.Status.ExtraInfoEntry
	nil,                                 // 30: milvus.protov2.common.MsgBase.PropertiesEntry
	nil,                                 // 31: milvus.protov2.common.ClientInfo.ReservedEntry
	nil,                                 // 32: milvus.protov2.common.ServerInfo.ReservedEntry
	(*descriptorpb.MessageOptions)(nil), // 33: google.protobuf.MessageOptions
}
var file_common_proto_depIdxs = []int32{
	0,  // 0: milvus.protov2.common.Status.error_code:type_name -> milvus.protov2.common.ErrorCode
	29, // 1: milvus.protov2.common.Status.extra_info:type_name -> milvus.protov2.common.Status.ExtraInfoEntry
	3,  // 2: milvus.protov2.common.PlaceholderValue.type:type_name -> milvus.protov2.common.PlaceholderType
	17, // 3: milvus.protov2.common.PlaceholderGroup.placeholders:type_name -> milvus.protov2.common.PlaceholderValue
	4,  // 4: milvus.protov2.common.MsgBase.msg_type:type_name -> milvus.protov2.common.MsgType
	30, // 5: milvus.protov2.common.MsgBase.properties:type_name -> milvus.protov2.common.MsgBase.PropertiesEntry
	21, // 6: milvus.protov2.common.MsgBase.replicateInfo:type_name -> milvus.protov2.common.ReplicateInfo
	20, // 7: milvus.protov2.common.MsgHeader.base:type_name -> milvus.protov2.common.MsgBase
	20, // 8: milvus.protov2.common.DMLMsgHeader.base:type_name -> milvus.protov2.common.MsgBase
	9,  // 9: milvus.protov2.common.PrivilegeExt.object_type:type_name -> milvus.protov2.common.ObjectType
	10, // 10: milvus.protov2.common.PrivilegeExt.object_privilege:type_name -> milvus.protov2.common.ObjectPrivilege
	31, // 11: milvus.protov2.common.ClientInfo.reserved:type_name -> milvus.protov2.common.ClientInfo.ReservedEntry
	32, // 12: milvus.protov2.common.ServerInfo.reserved:type_name -> milvus.protov2.common.ServerInfo.ReservedEntry
	33, // 13: milvus.protov2.common.privilege_ext_obj:extendee -> google.protobuf.MessageOptions
	24, // 14: milvus.protov2.common.privilege_ext_obj:type_name -> milvus.protov2.common.PrivilegeExt
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	14, // [14:15] is the sub-list for extension type_name
	13, // [13:14] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMLMsgHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivilegeExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   20,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
		ExtensionInfos:    file_common_proto_extTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
